{"title":"24-预编译","slug":"JavaScript/24-预编译","date":"2023-02-16T07:30:25.438Z","updated":"2023-02-16T07:49:46.975Z","comments":true,"path":"api/articles/JavaScript/24-预编译.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<blockquote>\n<p>我们在上一篇文章《作用域》中简单讲过“变量提升”，今天来讲一下预编译，这对我们深入理解变量提升会有帮助。</p>\n</blockquote>\n<h2 id=\"JavaScript-运行三部曲\"><a href=\"#JavaScript-运行三部曲\" class=\"headerlink\" title=\"JavaScript 运行三部曲\"></a>JavaScript 运行三部曲</h2><ul>\n<li><p>语法分析</p>\n</li>\n<li><p>预编译</p>\n</li>\n<li><p>解释执行</p>\n</li>\n</ul>\n<h2 id=\"预编译前奏\"><a href=\"#预编译前奏\" class=\"headerlink\" title=\"预编译前奏\"></a>预编译前奏</h2><blockquote>\n<p>在讲预编译前，我们先来普及下面两个规律。</p>\n</blockquote>\n<h3 id=\"两个规律\"><a href=\"#两个规律\" class=\"headerlink\" title=\"两个规律\"></a>两个规律</h3><p><strong>规律1：任何变量，如果未经声明就赋值，此变量是属于 window 的属性</strong>，而且不会做变量提升。（注意，无论在哪个作用域内赋值）</p>\n<p>比如说，如果我们直接在代码里写 <code>console.log(a)</code>，这肯定会报错的，提示找不到 <code>a</code>。但如果我直接写 <code>a = 100</code>，这就不会报错，此时，这个 <code>a</code> 就是 <code>window.a</code>。</p>\n<p><strong>规律2：一切声明的全局变量，全是window的属性</strong>。（注意，这里说的是在全局作用域内声明的全局变量，不是说局部变量）</p>\n<p>比如，当定义 <code>var a = 200</code> 时，这个 <code>a</code> 就是 <code>window.a</code>。</p>\n<p>由此，我们可以看出：<strong>window 代表了全局作用域</strong>（是说「代表」，没说「等于」）。</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>掌握了上面两句话之后，我们再来看看下面的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = b = <span class=\"number\">100</span>; <span class=\"comment\">// 连续赋值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">b</span>); <span class=\"comment\">// 在全局范围内访问 b</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 在全局范围内访问 b，但是前面没有加 window 这个关键字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>); <span class=\"comment\">// 在全局范围内访问 a</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 在全局范围内访问 a，但是前面没有加 window 这个关键字</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上方代码的打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\"></span><br><span class=\"line\">100</span><br><span class=\"line\"></span><br><span class=\"line\">undefined</span><br><span class=\"line\"></span><br><span class=\"line\">（会报错，提示 Uncaught ReferenceError: a is not defined）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<p>当执行了<code>foo()</code>函数之后， <code>var a = b = 100</code> 这行<strong>连续赋值</strong>的代码等价于 <code>var a = (b = 100)</code>，其执行顺序是：</p>\n<p>（1）先把 100 赋值给 b；</p>\n<p>（2）再声明变量 a；</p>\n<p>（3）再把 b 的值赋值给 a。</p>\n<p>我们可以看到，b 是未经声明的变量就被赋值了，此时，根据规律1，这个 b 是属于 <code>window.b</code>；而 a 的作用域仅限于 foo() 函数内部，不属于 window。所以也就有了这样的打印结果。</p>\n<h2 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h2><h3 id=\"函数预编译的步骤\"><a href=\"#函数预编译的步骤\" class=\"headerlink\" title=\"函数预编译的步骤\"></a>函数预编译的步骤</h3><blockquote>\n<p>函数预编译，发生在函数执行的前一刻。</p>\n</blockquote>\n<p>（1）创建AO对象。AO即 Activation Object 活跃对象，其实就是「执行期上下文」。</p>\n<p>（2）找形参和变量声明，将形参名和变量作为 AO 的属性名，值为undefined。</p>\n<p>（3）将实参值和形参统一，实参的值赋给形参。</p>\n<p>（4）查找函数声明，函数名作为 AO 对象的属性名，值为整个函数体。</p>\n<p>这个地方比较难理解。但只有了解了函数的预编译，才能理解明白函数的执行顺序。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">666</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ƒ a() &#123;&#125;</span><br><span class=\"line\">666</span><br><span class=\"line\">666</span><br><span class=\"line\">ƒ () &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><p>JavaScript预编译原理分析：<a href=\"https://blog.csdn.net/q1056843325/article/details/52951114\">https://blog.csdn.net/q1056843325/article/details/52951114</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000018001871\">https://segmentfault.com/a/1190000018001871</a></p>\n</li>\n<li><p>预编译及变量提升：<a href=\"https://juejin.im/post/5aa6693df265da23884cb571\">https://juejin.im/post/5aa6693df265da23884cb571</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5adaf8215188256712781830\">https://juejin.im/post/5adaf8215188256712781830</a></p>\n</li>\n<li><p><a href=\"https://www.qqzmly.com/archives/1521\">https://www.qqzmly.com/archives/1521</a></p>\n</li>\n<li><p>宏任务&amp;微任务相关：<a href=\"https://segmentfault.com/a/1190000018134157\">https://segmentfault.com/a/1190000018134157</a></p>\n</li>\n</ul>\n","categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]}