{"title":"25-this指向","slug":"JavaScript/25-this指向","date":"2023-02-16T07:30:25.440Z","updated":"2023-02-16T07:50:09.741Z","comments":true,"path":"api/articles/JavaScript/25-this指向.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"执行期上下文\"><a href=\"#执行期上下文\" class=\"headerlink\" title=\"执行期上下文\"></a>执行期上下文</h2><p>当<strong>函数执行</strong>时（准确来说，是在函数发生预编译的前一刻），会创建一个执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境。</p>\n<p>每调用一次函数，就会创建一个新的上下文对象，他们之间是相互独立且独一无二的。当函数执行完毕，它所产生的执行期上下文会被销毁。</p>\n<p>参考链接：<a href=\"https://www.cnblogs.com/chenyingjie1207/p/9966036.html\">https://www.cnblogs.com/chenyingjie1207/p/9966036.html</a></p>\n<h2 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h2><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是 this，this 指向的是一个对象，这个对象我们称为函数执行的 上下文对象。</p>\n<h3 id=\"ES5-函数内-this-的指向【非常重要】\"><a href=\"#ES5-函数内-this-的指向【非常重要】\" class=\"headerlink\" title=\"ES5 函数内 this 的指向【非常重要】\"></a>ES5 函数内 this 的指向【非常重要】</h3><p>函数的调用有<strong>六种</strong>形式。</p>\n<p>在ES5语法中，根据函数的调用方式的不同，this 会指向不同的对象：</p>\n<p>1、以函数的形式（包括普通函数、定时器函数、立即执行函数）调用时，this 的指向永远都是 window。比如<code>fun();</code>相当于<code>window.fun();</code></p>\n<p>2、以方法的形式调用时，this 指向调用方法的那个对象</p>\n<p>3、以构造函数的形式调用时，this 指向实例对象</p>\n<p>4、以事件绑定函数的形式调用时，this 指向<strong>绑定事件的对象</strong></p>\n<p>5、使用 call 和 apply 调用时，this 指向指定的那个对象</p>\n<p><strong>第 1 条的举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;smyh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: fun,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vae&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: fun,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全局的name属性&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以函数形式调用，this是window</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">//可以理解成 window.fun()</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Window</span><br><span class=\"line\">全局的name属性</span><br></pre></td></tr></table></figure>\n\n<p>上面的举例可以看出，this 指向的是 window 对象，所以 this.name 指的是全局的 name。</p>\n<p><strong>第 2 条的举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;smyh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: fun,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vae&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: fun,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全局的name属性&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以方法的形式调用，this是调用方法的对象</span></span><br><span class=\"line\">obj2.<span class=\"title function_\">sayName</span>();</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object</span><br><span class=\"line\">vae</span><br></pre></td></tr></table></figure>\n\n<p>上面的举例可以看出，this 指向的是 对象 obj2 ，所以 this.name 指的是 obj2.name。</p>\n<h3 id=\"ES6-箭头函数中-this-的指向\"><a href=\"#ES6-箭头函数中-this-的指向\" class=\"headerlink\" title=\"ES6 箭头函数中 this 的指向\"></a>ES6 箭头函数中 this 的指向</h3><p>ES6 中的箭头函数并不使用上面的准则，而是会继承外层函数调用的 this 绑定（无论 this 绑定到什么）。</p>\n<h3 id=\"改变函数内部的-this-指向\"><a href=\"#改变函数内部的-this-指向\" class=\"headerlink\" title=\"改变函数内部的 this 指向\"></a>改变函数内部的 this 指向</h3><p>JS 专门为我们提供了一些方法来改变函数内部的 this 指向。常见的方法有 call()、apply()、bind() 方法。继续往下看。</p>\n<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h2><h3 id=\"call-方法的作用\"><a href=\"#call-方法的作用\" class=\"headerlink\" title=\"call() 方法的作用\"></a>call() 方法的作用</h3><p>call() 方法的作用：可以<strong>调用</strong>一个函数，与此同时，它还可以改变这个函数内部的 this 指向。</p>\n<p>call() 方法的另一个应用：<strong>可以实现继承</strong>。之所以能实现继承，其实是利用了上面的作用。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1.<span class=\"title function_\">call</span>(想要将<span class=\"variable language_\">this</span>指向哪里, 函数实参<span class=\"number\">1</span>, 函数实参<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>备注：第一个参数中，如果不需要改变 this 指向，则传 null。</p>\n<h3 id=\"call-方法举例\"><a href=\"#call-方法举例\" class=\"headerlink\" title=\"call() 方法举例\"></a>call() 方法举例</h3><p><strong>举例 1</strong>、通过 call() 调用函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">nickName</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nickName</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// this的指向并没有被改变，此时相当于 fn1();</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码的打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window</span><br><span class=\"line\">undefined</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码，跟普通的函数调用 <code>fn1()</code> 没有区别。</p>\n<p><strong>举例 2</strong>、通过 call() 改变 this 指向：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">nickName</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nickName</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn1.<span class=\"title function_\">call</span>(obj1, <span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 先将 this 指向 obj1，然后执行 fn1() 函数</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码的打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1</span><br><span class=\"line\">qianguyihao</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p><strong>举例 3</strong>、通过 call() 实现继承：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给 Father 增加 name 和 age 属性</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Father</span>(<span class=\"params\">myName, myAge</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = myName;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = myAge;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">myName, myAge</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 【下面这一行，重要代码】</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过这一步，将 father 里面的 this 修改为 Son 里面的 this；另外，给 Son 加上相应的参数，让 Son 自动拥有 Father 里的属性。最终实现继承</span></span><br><span class=\"line\">    <span class=\"title class_\">Father</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, myName, myAge);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(son1));</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，通过 call() 方法，让 Son 继承了 Father 里面的 name 和 age 属性。</p>\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;myName&quot;:&quot;千古壹号&quot;,&quot;myAge&quot;:28&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply-方法\"><a href=\"#apply-方法\" class=\"headerlink\" title=\"apply() 方法\"></a>apply() 方法</h2><h3 id=\"apply-方法的作用\"><a href=\"#apply-方法的作用\" class=\"headerlink\" title=\"apply() 方法的作用\"></a>apply() 方法的作用</h3><p>apply() 方法的作用：可以<strong>调用</strong>一个函数，与此同时，它还可以改变这个函数内部的 this 指向。这一点，和 call()类似。</p>\n<p>apply() 方法的应用： 由于 apply()需要传递<strong>数组</strong>，所以它有一些巧妙应用，稍后看接下来的应用举例就知道了。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1.<span class=\"title function_\">apply</span>(想要将<span class=\"variable language_\">this</span>指向哪里, [函数实参<span class=\"number\">1</span>, 函数实参<span class=\"number\">2</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>备注：第一个参数中，如果不需要改变 this 指向，则传 null。</p>\n<p>到这里可以看出， call() 和 apply() 方法的作用是相同的。唯一的区别在于，apply() 里面传入的<strong>实参，必须是数组（或者伪数组）</strong>。</p>\n<h3 id=\"apply-方法举例\"><a href=\"#apply-方法举例\" class=\"headerlink\" title=\"apply() 方法举例\"></a>apply() 方法举例</h3><p><strong>举例</strong>、通过 apply() 改变 this 指向：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">nickName</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nickName</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn1.<span class=\"title function_\">apply</span>(obj1, [<span class=\"string\">&#x27;hello&#x27;</span>]); <span class=\"comment\">// 先将 this 指向 obj1，然后执行 fn1() 函数</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，上方代码中，apply() 里面传实参时，需要以数组的形式。即便是传一个实参，也需要传数组。</p>\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1</span><br><span class=\"line\">qianguyihao</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"apply-方法的巧妙应用：求数组的最大值\"><a href=\"#apply-方法的巧妙应用：求数组的最大值\" class=\"headerlink\" title=\"apply() 方法的巧妙应用：求数组的最大值\"></a>apply() 方法的巧妙应用：求数组的最大值</h3><p>我们知道，如果想要求数组中元素的最大值，数组本身是没有自带方法的。那怎么办呢？</p>\n<p>虽然数组里没有获取最大值的方法，但是数值里有 <code>Math.max(数字1，数字2，数字3)</code> 方法，可以获取<strong>多个数值中的最大值</strong>。 另外，由于 apply() 方法在传递实参时，传的刚好是<strong>数组</strong>，所以我们可以 通过 Math.max() 和 apply() 曲线救国。</p>\n<p><strong>举例</strong>：求数组中多个元素的最大值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这一行代码的目的，无需改变 this 指向，所以：第一个参数填 null，或者填 Math，或者填 this 都可以。严格模式中，不让填null。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> maxValue = <span class=\"title class_\">Math</span>.<span class=\"property\">max</span>.<span class=\"title function_\">apply</span>(<span class=\"title class_\">Math</span>, arr1); <span class=\"comment\">// 求数组 arr1 中元素的最大值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(maxValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> minValue = <span class=\"title class_\">Math</span>.<span class=\"property\">min</span>.<span class=\"title function_\">apply</span>(<span class=\"title class_\">Math</span>, arr1); <span class=\"comment\">// 求数组 arr1 中元素的最小值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(minValue);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind-方法\"><a href=\"#bind-方法\" class=\"headerlink\" title=\"bind() 方法\"></a>bind() 方法</h2><h3 id=\"bind-方法的作用\"><a href=\"#bind-方法的作用\" class=\"headerlink\" title=\"bind() 方法的作用\"></a>bind() 方法的作用</h3><p>bind() 方法<strong>不会调用函数</strong>，但是可以改变函数内部的 this 指向。</p>\n<p>把call()、apply()、bind()这三个方法做一下对比，你会发现：实际开发中， bind() 方法使用得最为频繁。如果有些函数，我们不需要立即调用，但是又想改变这个函数内部的this指向，此时用 bind() 是最为合适的。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新函数 = fn1.<span class=\"title function_\">bind</span>(想要将<span class=\"variable language_\">this</span>指向哪里, 函数实参<span class=\"number\">1</span>, 函数实参<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<ul>\n<li><p>第一个参数：在 fn1 函数运行时，指定 fn1 函数的this 指向。如果不需要改变 this 指向，则传 null。</p>\n</li>\n<li><p>其他参数：fn1 函数的实参。</p>\n</li>\n</ul>\n<p>解释：它不会调用 fn1 函数，但会返回 由指定this 和指定实参的<strong>原函数拷贝</strong>。可以看出， bind() 方法是有返回值的。</p>\n","categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]}