{"title":"13-对象简介","slug":"JavaScript/13-对象简介","date":"2023-02-15T12:06:59.464Z","updated":"2023-02-15T12:23:48.156Z","comments":true,"path":"api/articles/JavaScript/13-对象简介.json","photos":[],"link":"","excerpt":null,"covers":["https://img.smyhvae.com/20221014_1130.png"],"content":"<h2 id=\"对象简介\"><a href=\"#对象简介\" class=\"headerlink\" title=\"对象简介\"></a>对象简介</h2><h3 id=\"对象的概念\"><a href=\"#对象的概念\" class=\"headerlink\" title=\"对象的概念\"></a>对象的概念</h3><p>在 JavaScript 中，对象是一组<strong>无序</strong>的相关属性和方法的集合。</p>\n<p><strong>对象的作用是：封装信息</strong>。比如 Student 类里可以封装学生的姓名、年龄、成绩等。</p>\n<p>对象具有<strong>特征</strong>（属性）和<strong>行为</strong>（方法）。</p>\n<h3 id=\"对象包括哪些数据类型\"><a href=\"#对象包括哪些数据类型\" class=\"headerlink\" title=\"对象包括哪些数据类型\"></a>对象包括哪些数据类型</h3><p>我们知道，JS 中的数据类型，包括以下几种：</p>\n<ul>\n<li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、BigInt 大型数值、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol。</p>\n</li>\n<li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p>\n</li>\n</ul>\n<p>只要不是那七种基本数据类型，就全都是对象。对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p>\n<h3 id=\"对象的分类\"><a href=\"#对象的分类\" class=\"headerlink\" title=\"对象的分类\"></a>对象的分类</h3><p>1、内置对象：</p>\n<ul>\n<li><p>由 ES 标准中定义的对象，在任何的 ES 的实现中都可以使用。</p>\n</li>\n<li><p>比如：Object、Math、Date、String、Array、Number、Boolean、Function 等。</p>\n</li>\n</ul>\n<p>2、宿主对象：</p>\n<ul>\n<li><p>由 JS 的运行环境提供的对象，目前来讲主要指由浏览器提供的对象。</p>\n</li>\n<li><p>比如 BOM、DOM，比如<code>console</code>、<code>document</code>。</p>\n</li>\n</ul>\n<p>3、自定义对象：</p>\n<ul>\n<li>由开发人员自己创建的对象。</li>\n</ul>\n<p>通过 new 关键字创建出来的对象实例，都是属于对象类型。</p>\n<h2 id=\"自定义对象\"><a href=\"#自定义对象\" class=\"headerlink\" title=\"自定义对象\"></a>自定义对象</h2><h3 id=\"为什么需要自定义对象\"><a href=\"#为什么需要自定义对象\" class=\"headerlink\" title=\"为什么需要自定义对象\"></a>为什么需要自定义对象</h3><p>保存一个值时，可以使用<strong>变量</strong>，保存多个值（一组值）时，可以使用<strong>数组</strong>。</p>\n<p>比如，如果要保存一个人的信息，通过数组的方式可以这样保存：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;王二&#x27;</span>, <span class=\"number\">35</span>, <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"string\">&#x27;180&#x27;</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上面这种表达方式比较乱。而如果用 JS 中的<strong>自定义对象</strong>来表达，<strong>结构会更清晰</strong>。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">favor</span>: [<span class=\"string\">&#x27;阅读&#x27;</span>, <span class=\"string\">&#x27;羽毛球&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，自定义对象里面的属性均是<strong>键值对（key: value）</strong>，表示属性和值的映射关系：</p>\n<ul>\n<li><p>键&#x2F;属性：属性名。</p>\n</li>\n<li><p>值：属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）。</p>\n</li>\n</ul>\n<h3 id=\"自定义对象的语法\"><a href=\"#自定义对象的语法\" class=\"headerlink\" title=\"自定义对象的语法\"></a>自定义对象的语法</h3><p>语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: value,</span><br><span class=\"line\">    <span class=\"attr\">key</span>: value,</span><br><span class=\"line\">    <span class=\"attr\">key</span>: value,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>key 和 value 之间用冒号分隔，每组 key:vaue 之间用逗号分隔，最后一对 key:value 的末尾可以写逗号，也可以不写逗号。</p>\n<p>问：对象的属性名是否需要加引号？</p>\n<p>答：如果属性名不符合 JS 标识符的命名规范，则需要用引号包裹。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;my-name&#x27;</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>补充：其实，JS 的内置对象、宿主对象，底层也是通过自定义对象的形式（也就是键值对的形式）进行封装的。</p>\n<h2 id=\"对象的属性值补充\"><a href=\"#对象的属性值补充\" class=\"headerlink\" title=\"对象的属性值补充\"></a>对象的属性值补充</h2><h3 id=\"对象的方法【重要】\"><a href=\"#对象的方法【重要】\" class=\"headerlink\" title=\"对象的方法【重要】\"></a>对象的方法【重要】</h3><p>对象的属性值可以是任何的数据类型，也可以是个<strong>函数</strong>（也称之为方法）。换而言之，<strong>如果对象的属性值是函数，则这个函数也被称之为对象的“方法”</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没加括号，就是获取方法</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">sayName</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;-----------&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 加了括号，就是调用方法。即：执行函数内容，并执行函数体的内容</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">sayName</span>());</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"https://img.smyhvae.com/20221014_1130.png\"></p>\n<h3 id=\"对象中的属性值，也可以是一个对象\"><a href=\"#对象中的属性值，也可以是一个对象\" class=\"headerlink\" title=\"对象中的属性值，也可以是一个对象\"></a>对象中的属性值，也可以是一个对象</h3><p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建对象 obj1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj1.<span class=\"property\">test</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建对象 obj2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj2.<span class=\"property\">name</span> = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将整个 obj2 对象，设置为 obj1 的属性</span></span><br><span class=\"line\">obj1.<span class=\"property\">test</span> = obj2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">test</span>.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果为：qianguyihao</p>\n<h2 id=\"传值和传址的区别\"><a href=\"#传值和传址的区别\" class=\"headerlink\" title=\"传值和传址的区别\"></a>传值和传址的区别</h2><h3 id=\"对象保存在哪里\"><a href=\"#对象保存在哪里\" class=\"headerlink\" title=\"对象保存在哪里\"></a>对象保存在哪里</h3><p>1、基本数据类型的值直接保存在<strong>栈内存</strong>中，变量与变量之间是独立的，值与值之间是独立的，修改一个变量不会影响其他的变量。</p>\n<p>2、对象是保存到<strong>堆内存</strong>中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间。变量保存的是对象的内存地址（对象的引用）。换而言之，对象的值是保存在<strong>堆内存</strong>中的，而对象的引用（即变量）是保存在<strong>栈内存</strong>中的。</p>\n<p><strong>如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响</strong>。这句话很重要，我们来看看下面的例子。</p>\n<h3 id=\"传值\"><a href=\"#传值\" class=\"headerlink\" title=\"传值\"></a>传值</h3><p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a; <span class=\"comment\">// 将 a 赋值给 b</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">2</span>; <span class=\"comment\">// 修改 b 的值</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，当我修改 b 的值之后，a 的值并不会发生改变。这个大家都知道。我们继续往下看。</p>\n<h3 id=\"传址（一个经典的例子）\"><a href=\"#传址（一个经典的例子）\" class=\"headerlink\" title=\"传址（一个经典的例子）\"></a>传址（一个经典的例子）</h3><p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&#x27;孙悟空&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1; <span class=\"comment\">// 将 obj1 的地址赋值给 obj2。从此， obj1 和 obj2 指向了同一个堆内存空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改obj2的name属性</span></span><br><span class=\"line\">obj2.<span class=\"property\">name</span> = <span class=\"string\">&#x27;猪八戒&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，当我修改 obj2 的 name 属性后，会发现，obj1 的 name 属性也会被修改。因为 obj1 和 obj2 指向的是堆内存中的同一个地址。</p>\n<p>这个例子要尤其注意，实战开发中，很容易忽略。</p>\n<p>对于引用类型的数据，赋值相当于地址拷贝，a、b 指向了同一个堆内存地址。所以改了 b，a 也会变；本质上 a、b 就是一个东西。</p>\n<p>如果你打算把引用类型 A 的值赋值给 B，让 A 和 B 相互不受影响的话，可以通过 Object.assign() 来复制对象。效果如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;孙悟空&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制对象：把 obj1 赋值给 obj3。两者之间互不影响</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, obj1);</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]}