{"title":"23-作用域、变量提升、函数提升","slug":"JavaScript/23-作用域、变量提升、函数提升","date":"2023-02-16T07:30:25.435Z","updated":"2023-02-16T07:49:36.202Z","comments":true,"path":"api/articles/JavaScript/23-作用域、变量提升、函数提升.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><h3 id=\"作用域（Scope）的概念和分类\"><a href=\"#作用域（Scope）的概念和分类\" class=\"headerlink\" title=\"作用域（Scope）的概念和分类\"></a>作用域（Scope）的概念和分类</h3><ul>\n<li><p><strong>概念</strong>：作用域是一个变量或函数的作用范围。作用域在<strong>函数定义</strong>时，就已经确定了。</p>\n</li>\n<li><p><strong>目的</strong>：为了提高程序的可靠性，同时减少命名冲突。</p>\n</li>\n</ul>\n<p>在 JS 中，一共有两种作用域：（ES5 中）</p>\n<ul>\n<li><strong>全局作用域</strong>：作用于整个 script 标签内部，或者作用于一个独立的 JS 文件。</li>\n<li><strong>函数作用域</strong>（局部作用域）：作用于函数内的代码环境。</li>\n</ul>\n<h3 id=\"全局作用域-和-window-对象\"><a href=\"#全局作用域-和-window-对象\" class=\"headerlink\" title=\"全局作用域 和 window 对象\"></a>全局作用域 和 window 对象</h3><p>直接编写在 script 标签中的 JS 代码，都在全局作用域。全局作用域在页面打开时创建，在页面关闭时销毁。</p>\n<p>在全局作用域中有一个全局对象 window，它代表的是浏览器的窗口，由浏览器创建，我们可以直接使用。相关知识点如下：</p>\n<ul>\n<li>创建的<strong>变量</strong>都会作为 window 对象的属性保存。比如在全局作用域内写 <code>const a = 100</code>，这里的 <code>a</code> 等价于 <code>window.a</code>。</li>\n<li>创建的<strong>函数</strong>都会作为 window 对象的方法保存。</li>\n</ul>\n<h3 id=\"作用域的访问关系\"><a href=\"#作用域的访问关系\" class=\"headerlink\" title=\"作用域的访问关系\"></a>作用域的访问关系</h3><p>在内部作用域中可以访问外部作用域的变量，在外部作用域中无法访问到内部作用域的变量。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"string\">&#x27;bbb&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：aaa。说明 内层作用域 可以访问 外层作用域 里的变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 报错：Uncaught ReferenceError: b is not defined。说明 外层作用域 无法访问 内层作用域 里的变量</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h3><p>根据作用域的不同，变量可以分为两类：全局变量、局部变量。</p>\n<p><strong>全局变量</strong>：</p>\n<ul>\n<li>在全局作用域下声明的变量，叫「全局变量」。在全局作用域的任何一地方，都可以访问这个变量。</li>\n<li>在全局作用域下声明的变量是全局变量。</li>\n</ul>\n<p><strong>局部变量</strong>：</p>\n<ul>\n<li>定义在函数作用域的变量，叫「局部变量」。仅限函数内部访问这个变量。</li>\n<li>函数的<strong>形参</strong>也是属于局部变量。</li>\n</ul>\n<p>从执行效率来看全局变量和局部变量：</p>\n<ul>\n<li><p>全局变量：只有浏览器关闭时才会被销毁，比较占内存。</p>\n</li>\n<li><p>局部变量：当其所在的代码块运行结束后，就会被销毁，比较节约内存。</p>\n</li>\n</ul>\n<p><strong>特殊情况：</strong></p>\n<p>（1）无论是在函数外还是函数内，变量如果未经声明就赋值（意思是，如果不加var&#x2F;let&#x2F;const），这个变量是<strong>全局变量</strong>。</p>\n<p>比如：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明变量时如果不加var/let/const，这个变量是全局变量。且可以被修改。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(); <span class=\"comment\">// 这行代码必须要写，否则下一行代码执行时会报错：Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：1</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，我们不建议这么用。</p>\n<p>（2）如果局部变量和全局变量重名，则在函数内部，变量是以局部变量为准。</p>\n<h3 id=\"作用域的上下级关系\"><a href=\"#作用域的上下级关系\" class=\"headerlink\" title=\"作用域的上下级关系\"></a>作用域的上下级关系</h3><p>当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用（<strong>就近原则</strong>）。如果没有则向上一级作用域中寻找，直到找到全局作用域；如果全局作用域中依然没有找到，则会报错 ReferenceError。</p>\n<p>在函数中要访问全局变量可以使用 window 对象。（比如说，全局作用域和函数作用域都定义了变量 a，如果想访问全局变量，可以使用<code>window.a</code>）</p>\n<h2 id=\"全局作用域的预处理\"><a href=\"#全局作用域的预处理\" class=\"headerlink\" title=\"全局作用域的预处理\"></a>全局作用域的预处理</h2><p><strong>预处理（预解析）</strong>的概念：JS在解析代码之前，有一个“预处理（预解析）”阶段，将当前 JS 代码中所有变量的定义和函数的定义，放到所有代码的最前面。</p>\n<p>（打个比方，学生在学习文言文之前，会扫读整篇文章，做简单的预习。）</p>\n<p>这种预解析，也称之为声明提前。</p>\n<h3 id=\"变量的声明提前（变量提升）\"><a href=\"#变量的声明提前（变量提升）\" class=\"headerlink\" title=\"变量的声明提前（变量提升）\"></a>变量的声明提前（变量提升）</h3><p>使用 var 关键字声明的变量（ 比如 <code>var a = 1</code>），<strong>会在所有的代码执行之前被声明</strong>（但是不会赋值）。但是如果声明变量时不是用 var 关键字（比如直接写<code>a = 1</code>），则变量不会被声明提前。</p>\n<p><strong>举例 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：undefined。注意，打印结果并没有报错，而是 undefined，说明变量 a 被提前声明了，只是尚未被赋值。</p>\n<p><strong>举例 2</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">a = <span class=\"number\">123</span>; <span class=\"comment\">//此时a相当于window.a</span></span><br></pre></td></tr></table></figure>\n\n<p>程序会报错：<code>Uncaught ReferenceError: a is not defined</code>。</p>\n<p><strong>举例 3</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">123</span>; <span class=\"comment\">//此时a相当于window.a</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：123。</p>\n<p><strong>举例 4</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：undefined。注意，打印结果并没有报错，而是 undefined。这个例子，再次说明了：变量 i 在函数执行前，就被提前声明了，只是尚未被赋值。</p>\n<p>例 4 中， <code>if(false)</code>里面的代码虽然不会被执行，但是整个代码有<strong>解析</strong>的环节，解析的时候就已经把 变量 i 给提前声明了。</p>\n<p><strong>总结</strong>：</p>\n<p>既然在ES5 中存在变量提升的现象，那么，在实战开发中，为了避免出错，建议先声明一个变量，然后再使用这个变量。</p>\n<h3 id=\"函数的声明提前（函数提升）\"><a href=\"#函数的声明提前（函数提升）\" class=\"headerlink\" title=\"函数的声明提前（函数提升）\"></a>函数的声明提前（函数提升）</h3><p><strong>函数声明</strong>：</p>\n<p>使用<code>函数声明</code>的形式创建的函数<code>function foo()&#123;&#125;</code>，<strong>会被声明提前</strong>。</p>\n<p>也就是说，整个函数会在所有的代码执行之前就被<strong>创建完成</strong>。所以，在代码顺序上，我们可以先调用函数，再定义函数。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fn1</span>(); <span class=\"comment\">// 虽然 函数 fn1 的定义是在后面，但是因为被提前声明了， 所以此处可以调用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是函数 fn1&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数表达式</strong>：</p>\n<p>使用<code>函数表达式</code>创建的函数<code>const foo = function()&#123;&#125;</code>，<strong>不会被声明提前</strong>，所以不能在声明前调用。</p>\n<p>很好理解，因为此时只是变量 foo 被提升了，且值为 undefined，并没有把 <code>function()&#123;&#125;</code> 赋值给 foo。</p>\n<p>所以，下面的例子会报错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不会报错，可以正常执行函数，正常打印结果</span></span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时 fun2 相当于 undefined。执行时会报错：Uncaught ReferenceError: Cannot access &#x27;fun2&#x27; before initialization</span></span><br><span class=\"line\"><span class=\"title function_\">fun2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数声明，会被提前声明</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是 fun1 函数&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数表达式，不会被提前声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fun2 = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是 fun12 函数&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数提升优先于变量提升\"><a href=\"#函数提升优先于变量提升\" class=\"headerlink\" title=\"函数提升优先于变量提升\"></a>函数提升优先于变量提升</h3><p>在JS的规则中，函数提升优先于变量提升。来看看下面这段代码，你认为打印结果应该如何：（这是一道经典面试题）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">// 打印 B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量提升</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数提升</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">// 打印 A</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B</span><br><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n\n<p>当声明被提前后，上方代码的实际顺序可以这样理解：（把它当成伪代码理解即可）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*伪代码*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数提升</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">// 打印 B</span></span><br><span class=\"line\"></span><br><span class=\"line\">fun = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">// 打印A</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，上方代码是ES5写法，如果把 var 改成ES6中的 let&#x2F;const，代码会报错<code>Uncaught SyntaxError: Identifier &#39;fun&#39; has already been declared</code>。也就是说，ES6中不需要关心谁优先提升的问题了。</p>\n<h2 id=\"函数作用域的预处理\"><a href=\"#函数作用域的预处理\" class=\"headerlink\" title=\"函数作用域的预处理\"></a>函数作用域的预处理</h2><p>上一段讲的是全局作用域中的声明提前。在函数作用域中，也有声明提前的现象：</p>\n<ul>\n<li><p>函数中，使用 var 关键字声明的变量，会在函数中所有代码执行之前被提前声明。</p>\n</li>\n<li><p>函数中，没有 var 声明的变量都是<strong>全局变量</strong>，且并不会被提前声明。</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    a = <span class=\"number\">2</span>; <span class=\"comment\">// 此处的a相当于window.a</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//打印结果是2</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，执行 foo() 后，函数里面的打印结果是<code>1</code>。如果去掉第一行代码，执行 foo() 后，函数里面的打印结果是<code>Uncaught ReferenceError: a is not defined</code>。</p>\n<p><strong>补充</strong>：定义形参就相当于在函数作用域中声明了变量。举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个函数中，因为有了形参 e，此时相当于在函数内部的第一行代码里，写了 var e;</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">//打印结果为 undefined</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"number\">123</span>); <span class=\"comment\">//打印结果为123</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES5中没有块级作用域\"><a href=\"#ES5中没有块级作用域\" class=\"headerlink\" title=\"ES5中没有块级作用域\"></a>ES5中没有块级作用域</h2><p>在其他编程语言中（如 Java、C#等），存在块级作用域，由<code>&#123;&#125;</code>包括起来。比如在 Java 语言中，if 语句里创建的变量，只能在 if 语句内部使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    system.out.print(num); <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">system.out.print(num); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>但是，在 ES5 中没有块级作用域。举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">//123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">//123（可以正常打印）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>先来认识函数的嵌套：</p>\n<ul>\n<li><p>只要是代码，就至少有一个作用域</p>\n</li>\n<li><p>函数内部有局部作用域</p>\n</li>\n<li><p>如果函数内部还嵌套了函数，那么在这个作用域中就又诞生了另一个作用域。</p>\n</li>\n</ul>\n<p>基于上面几条内容，我们可以得出作用域链的概念。</p>\n<p><strong>作用域链</strong>：在嵌套函数中，变量会从内到外逐层寻找它的定义（查找时，采用<strong>就近原则</strong>）。也就是说，采用的是链式查找的方式来决定取哪个值，这种结构称之为作用域链。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 外部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">fun</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：20。</p>\n","categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]}