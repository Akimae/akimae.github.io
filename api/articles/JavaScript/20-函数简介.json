{"title":"20-函数简介","slug":"JavaScript/20-函数简介","date":"2023-02-16T07:30:25.428Z","updated":"2023-02-16T07:31:56.791Z","comments":true,"path":"api/articles/JavaScript/20-函数简介.json","photos":[],"link":"","excerpt":null,"covers":["https://img.smyhvae.com/20220725_2000.png","http://img.smyhvae.com/20180125_2140.png"],"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"函数的介绍\"><a href=\"#函数的介绍\" class=\"headerlink\" title=\"函数的介绍\"></a>函数的介绍</h2><p>函数：就是一些功能或语句的<strong>封装</strong>。在需要的时候，通过<strong>调用</strong>的形式，执行这些语句。</p>\n<p>补充：</p>\n<ul>\n<li><p><strong>函数也是一个对象</strong></p>\n</li>\n<li><p>使用<code>typeof</code>检查一个函数对象时，会返回 function</p>\n</li>\n</ul>\n<p><strong>函数的作用</strong>：</p>\n<ul>\n<li><p>一次定义，多次调用。将大量重复的语句抽取出来，写在函数里，以后需要这些语句时，可以直接调用函数，避免重复劳动。</p>\n</li>\n<li><p>简化代码，可读性更强，让编程模块化。高内聚、低耦合。</p>\n</li>\n</ul>\n<p>来看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你好&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>();\t<span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>();\t<span class=\"comment\">// 再调用一次函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;欢迎&quot;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;welcome&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的定义-x2F-声明\"><a href=\"#函数的定义-x2F-声明\" class=\"headerlink\" title=\"函数的定义&#x2F;声明\"></a>函数的定义&#x2F;声明</h2><p>我们使用<code>function</code>关键字定义函数，中文含义是“函数”、“功能”。可以使用如下方式进行定义。</p>\n<h3 id=\"方式一：函数声明（命名函数）\"><a href=\"#方式一：函数声明（命名函数）\" class=\"headerlink\" title=\"方式一：函数声明（命名函数）\"></a>方式一：函数声明（命名函数）</h3><p>使用<code>函数声明</code>来创建一个函数。语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 函数名([形参<span class=\"number\">1</span>,形参<span class=\"number\">2.</span>..形参N])&#123;  <span class=\"comment\">// 备注：语法中的中括号，表示“可选”</span></span><br><span class=\"line\">\t<span class=\"comment\">// 函数体语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释如下：</p>\n<ul>\n<li><p>函数名：命名规定和变量的命名规定一样，必须符合JS标识符的命名规则。只能是字母、数字、下划线、美元符号，不能以数字开头。</p>\n</li>\n<li><p>圆括号里，是形参列表，可选。即使没有形参，也必须书写圆括号。</p>\n</li>\n<li><p>大括号里，是函数体语句。</p>\n</li>\n</ul>\n<p>PS：在有些编辑器中，方法写完之后，我们在方法的前面输入<code>/**</code>，然后回车，会发现，注释的格式会自动补齐。</p>\n<h3 id=\"方式二：函数表达式（匿名函数）\"><a href=\"#方式二：函数表达式（匿名函数）\" class=\"headerlink\" title=\"方式二：函数表达式（匿名函数）\"></a>方式二：函数表达式（匿名函数）</h3><p>使用<code>函数表达式</code>来创建一个函数。语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 变量名  = <span class=\"keyword\">function</span>(<span class=\"params\">[形参<span class=\"number\">1</span>,形参<span class=\"number\">2.</span>..形参N]</span>)&#123;</span><br><span class=\"line\">\t语句....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fun2 = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是匿名函数中封装的代码&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>解释如下：</p>\n<ul>\n<li><p>上面的 fun2 是变量名，不是函数名。</p>\n</li>\n<li><p>函数表达式的声明方式跟声明变量类似，只不过变量里存的是值，而函数表达式里存的是函数。</p>\n</li>\n<li><p>函数表达式也可以传递参数。</p>\n</li>\n</ul>\n<p>从方式二的举例中可以看出：所谓的“函数表达式”，其实就是将匿名函数赋值给一个变量。因为，一个匿名函数终究还是要给它一个接收对象，进而方便地调用这个函数。</p>\n<h3 id=\"方式三：使用构造函数-new-Function\"><a href=\"#方式三：使用构造函数-new-Function\" class=\"headerlink\" title=\"方式三：使用构造函数 new Function()\"></a>方式三：使用构造函数 new Function()</h3><p>使用构造函数<code>new Function()</code>来创建一个对象。这种方式，用的少。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 变量名/函数名  = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;形参1&#x27;</span>, <span class=\"string\">&#x27;形参2&#x27;</span>, <span class=\"string\">&#x27;函数体&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意，Function 里面的参数都必须是<strong>字符串</strong>格式。也就是说，形参也必须放在<strong>字符串</strong>里；函数体也是放在<strong>字符串</strong>里包裹起来，放在 Function 的最后一个参数的位置。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fun3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;console.log(&quot;我是函数内部的内容&quot;);  console.log(a + b);&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun3</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 调用函数</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是函数内部的内容</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<p><strong>分析</strong>：</p>\n<p>方式3的写法很少用，原因如下：</p>\n<ul>\n<li><p>不方便书写：写法过于啰嗦和麻烦。</p>\n</li>\n<li><p>执行效率较低：首先需要把字符串转换为 js 代码，然后再执行。</p>\n</li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>1、<strong>所有的函数，都是 <code>Fuction</code> 的“实例”</strong>（或者说是“实例对象”）。函数本质上都是通过 new Function 得到的。</p>\n<p>2、函数既然是实例对象，那么，<strong>函数也属于“对象”</strong>。还可以通过如下特征，来佐证函数属于对象：</p>\n<p>（1）我们直接打印某一个函数，比如 <code>console.log(fun2)</code>，发现它的里面有<code>__proto__</code>。（这个是属于原型的知识，后续再讲）</p>\n<p>（2）我们还可以打印 <code>console.log(fun2 instanceof Object)</code>，发现打印结果为 <code>true</code>。这说明 fun2 函数就是属于 Object。</p>\n<h2 id=\"函数的调用\"><a href=\"#函数的调用\" class=\"headerlink\" title=\"函数的调用\"></a>函数的调用</h2><p>调用函数即：执行函数体中的语句。函数必须要等到被调用时才执行。</p>\n<h3 id=\"方式1：普通函数的调用\"><a href=\"#方式1：普通函数的调用\" class=\"headerlink\" title=\"方式1：普通函数的调用\"></a>方式1：普通函数的调用</h3><p>函数调用的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法1（最常用）</span></span><br><span class=\"line\">函数名();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法2</span></span><br><span class=\"line\">函数名.<span class=\"title function_\">call</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是函数体里面的内容1&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是函数体里面的内容2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>(); <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">fn2.<span class=\"title function_\">call</span>(); <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式2：通过对象的方法来调用\"><a href=\"#方式2：通过对象的方法来调用\" class=\"headerlink\" title=\"方式2：通过对象的方法来调用\"></a>方式2：通过对象的方法来调用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">fn2</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;千古壹号，永不止步!&#x27;</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">fn2</span>(); <span class=\"comment\">// 调用函数</span></span><br></pre></td></tr></table></figure>\n\n<p>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的<strong>方法</strong>。</p>\n<p>PS：关于函数和方法的区别，本文的后续内容里有讲到，可以往下面翻。</p>\n<h3 id=\"方式3：立即执行函数\"><a href=\"#方式3：立即执行函数\" class=\"headerlink\" title=\"方式3：立即执行函数\"></a>方式3：立即执行函数</h3><p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是立即执行函数&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>立即执行函数在定义后，会自动调用。</p>\n<p>PS：关于立即执行函数，本文的后续内容里有讲到，可以往下面翻。</p>\n<p>上面讲到的这三种方式，是用得最多的。接下来讲到的三种方式，暂时看不懂也没关系，可以等学完其他的知识点，再回过头来看。</p>\n<h3 id=\"方式4：通过构造函数来调用\"><a href=\"#方式4：通过构造函数来调用\" class=\"headerlink\" title=\"方式4：通过构造函数来调用\"></a>方式4：通过构造函数来调用</h3><p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fun3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;千古壹号，永不止步~&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Fun3</span>();</span><br></pre></td></tr></table></figure>\n\n<p>这种方式用得不多。</p>\n<h3 id=\"方式5：绑定事件函数\"><a href=\"#方式5：绑定事件函数\" class=\"headerlink\" title=\"方式5：绑定事件函数\"></a>方式5：绑定事件函数</h3><p>代码举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>我是按钮，请点击我<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//2.绑定事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;点击按钮后，要做的事情&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里涉及到DOM操作和事件的知识点，后续再讲。</p>\n<h3 id=\"方式6：定时器函数\"><a href=\"#方式6：定时器函数\" class=\"headerlink\" title=\"方式6：定时器函数\"></a>方式6：定时器函数</h3><p>代码举例：（每间隔一秒，将 数字 加1）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    num ++;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这里涉及到定时器的知识点。</p>\n<h2 id=\"函数的参数：形参和实参\"><a href=\"#函数的参数：形参和实参\" class=\"headerlink\" title=\"函数的参数：形参和实参\"></a>函数的参数：形参和实参</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>函数的参数包括形参和实参。形参是函数内的一些<strong>待定值</strong>。在调用函数时，需传入这些参数的具体值（即实参）。</p>\n<p>可以在函数的<code>()</code>中指定一个或多个参数，也可以不指定参数。多个参数之间用英文逗号隔开。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a, b 是形参，表示待定值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = a + b;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1, 2 是实参，表示传入的具体值。调用函数时，传入实参</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>形参：</strong></p>\n<ul>\n<li>概念：形式上的参数。定义函数时传递的待定值（此时并不知道是什么值）。</li>\n<li>声明形参相当于在函数内部声明了变量，但并不赋值。也可以说，<strong>形参的默认值是 undefined</strong>。</li>\n</ul>\n<p><strong>实参</strong>：</p>\n<ul>\n<li>概念：实际上的参数。调用函数时传递的具体值。实参将传递给函数中对应的形参。</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"string\">&quot;3&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;World&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义函数：求和</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br><span class=\"line\">34</span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"形参和实参的个数\"><a href=\"#形参和实参的个数\" class=\"headerlink\" title=\"形参和实参的个数\"></a>形参和实参的个数</h3><p>实际参数和形式参数的个数，可以不同。调用函数时，解析器不会检查实参的数量。</p>\n<ul>\n<li>如果实参个数 &gt; 形参个数，则末尾的实参是多余的，不会被赋值，因为没有形参能接收它。</li>\n<li>如果实参个数 &lt; 形参个数，则末尾的形参是多余的，值是 undefined，因为它没有接收到实参。（undefined参与运算时，表达式的运算结果为NaN）</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">NaN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实参的数据类型\"><a href=\"#实参的数据类型\" class=\"headerlink\" title=\"实参的数据类型\"></a>实参的数据类型</h3><p>函数的实参可以是任意的数据类型。调用函数时，解析器不会检查实参类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型检查。</p>\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><h3 id=\"return-关键字\"><a href=\"#return-关键字\" class=\"headerlink\" title=\"return 关键字\"></a>return 关键字</h3><p>函数体内可以没有返回值，也可以根据需要加返回值。语法格式：<code>return 函数的返回值</code>。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>)); <span class=\"comment\">// 将函数的返回值打印出来</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数：求和</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>return关键字的作用既可以是<strong>终止函数</strong>，也可以给函数添加返回值。</p>\n<p>解释：</p>\n<p>（1）return 后的返回值将会作为函数的执行结果返回，可以定义一个变量，来接收该返回值。</p>\n<p>（2）在函数中，return后的语句都不会执行。也就是说，函数在执行完 return 语句之后，会立即退出函数。</p>\n<p>（3）如果return语句后不跟任何值，就相当于返回一个undefined</p>\n<p>（4）如果函数中不写return，则也会返回undefined</p>\n<p>（5）返回值可以是任意的数据类型，可以是对象，也可以是函数。</p>\n<p>（6）return 只能返回一个值。如果用逗号隔开多个值，则以最后一个为准。</p>\n<h3 id=\"break、continue、return-的区别\"><a href=\"#break、continue、return-的区别\" class=\"headerlink\" title=\"break、continue、return 的区别\"></a>break、continue、return 的区别</h3><ul>\n<li><p>break ：结束当前的循环体（如 for、while）</p>\n</li>\n<li><p>continue ：跳出本次循环，继续执行下次循环（如 for、while）</p>\n</li>\n<li><p>return ：1、退出循环。2、返回 return 语句中的值，同时结束当前的函数体内的代码，退出当前函数。</p>\n</li>\n</ul>\n<h2 id=\"函数名、函数体和函数加载问题（重要，请记住）\"><a href=\"#函数名、函数体和函数加载问题（重要，请记住）\" class=\"headerlink\" title=\"函数名、函数体和函数加载问题（重要，请记住）\"></a>函数名、函数体和函数加载问题（重要，请记住）</h2><p>我们要记住：<strong>函数名 &#x3D;&#x3D; 整个函数</strong>。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn) == <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">alert</span>(<span class=\"number\">1</span>)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义fn方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">alert</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们知道，当我们在调用一个函数时，通常使用<code>函数()</code>这种格式；可如果，我们是直接使用<code>函数</code>这种格式，它的作用相当于整个函数。</p>\n<p><strong>函数的加载问题</strong>：JS加载的时候，只加载函数名，不加载函数体。所以如果想使用内部的成员变量，需要调用函数。</p>\n<h3 id=\"fn-和-fn-的区别【重要】\"><a href=\"#fn-和-fn-的区别【重要】\" class=\"headerlink\" title=\"fn()  和 fn 的区别【重要】\"></a>fn()  和 fn 的区别【重要】</h3><ul>\n<li><p><code>fn()</code>：调用函数。调用之后，还获取了函数的返回值。</p>\n</li>\n<li><p><code>fn</code>：函数对象。相当于直接获取了整个函数对象。</p>\n</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>函数也可以成为对象的属性。<strong>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的方法</strong>。</p>\n<p>调用这个函数就说调用对象的方法（method）。函数和方法，有什么本质的区别吗？它只是名称上的区别，并没有其他的区别。</p>\n<p>函数举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>方法举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">obj.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>我们可以这样说，如果直接是<code>fn()</code>，那就说明是函数调用。如果是<code>XX.fn()</code>的这种形式，那就说明是<strong>方法</strong>调用。</p>\n<h2 id=\"类数组对象-arguments\"><a href=\"#类数组对象-arguments\" class=\"headerlink\" title=\"类数组对象 arguments\"></a>类数组对象 arguments</h2><blockquote>\n<p>这部分，初学者可能看不懂，可以以后再来看。</p>\n</blockquote>\n<p>在调用函数时，浏览器每次都会传递进两个隐含的参数：</p>\n<ul>\n<li><p>1.函数的上下文对象 this</p>\n</li>\n<li><p>2.<strong>封装实参的对象</strong> arguments</p>\n</li>\n</ul>\n<p>这一段，我们来讲一下 arguments。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"https://img.smyhvae.com/20220725_2000.png\"></p>\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>函数内的 arguments 是一个<strong>类数组对象</strong>，里面存储的是它接收到的<strong>实参列表</strong>。所有函数都内置了一个 arguments 对象，有个讲究的地方是：只有函数才有arguments。</p>\n<p>具体来说，在调用函数时，我们所传递的实参都会在 arguments 中保存。<strong>arguments 代表的是所有实参</strong>。</p>\n<p>arguments 的展示形式是一个<strong>伪数组</strong>。意思是，它和数组有点像，但它并不是数组。它具有以下特点：</p>\n<ul>\n<li><p>可以进行遍历；具有数组的 length 属性，可以获取长度。</p>\n</li>\n<li><p>可以通过索引（从0开始计数）存储数据、获取和操作数据。比如，我们可以通过索引访问某个实参。</p>\n</li>\n<li><p>不能调用数组的方法。比如push()、pop() 等方法都没有。</p>\n</li>\n</ul>\n<p>我们看一下 arguments 的使用。</p>\n<h3 id=\"arguments-length-返回函数实参的个数\"><a href=\"#arguments-length-返回函数实参的个数\" class=\"headerlink\" title=\"arguments.length 返回函数实参的个数\"></a>arguments.length 返回函数实参的个数</h3><p>arguments.length 可以用来获取<strong>实参的个数</strong>。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn.<span class=\"property\">length</span>); <span class=\"comment\">//获取形参的个数</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>); <span class=\"comment\">//获取实参的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;----------------&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180125_2140.png\"></p>\n<p>此外，即使我们不定义形参，也可以通过 arguments 来获取实参：arguments[0] 表示第一个实参、arguments[1] 表示第二个实参，以此类推。</p>\n<p>举例：将传入的实参进行求和，无论实参的个数有多少。代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    sum += <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">foo</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"arguments-callee-返回正在执行的函数\"><a href=\"#arguments-callee-返回正在执行的函数\" class=\"headerlink\" title=\"arguments.callee 返回正在执行的函数\"></a>arguments.callee 返回正在执行的函数</h3><p>arguments 里边有一个属性叫做 callee，这个属性对应一个函数对象，就是当前正在指向的函数对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">callee</span> == fun); <span class=\"comment\">// 打印结果为true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在使用函数<strong>递归</strong>调用时，推荐使用 arguments.callee 代替函数名本身。</p>\n<h3 id=\"arguments-可以修改元素\"><a href=\"#arguments-可以修改元素\" class=\"headerlink\" title=\"arguments 可以修改元素\"></a>arguments 可以修改元素</h3><p>arguments 还可以<strong>修改元素，但不能改变数组的长度</strong>。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">99</span>; <span class=\"comment\">// 将实参的第一个数改为99</span></span><br><span class=\"line\">    <span class=\"variable language_\">arguments</span>.<span class=\"title function_\">push</span>(<span class=\"number\">8</span>); <span class=\"comment\">// 此方法不通过，因为无法增加元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用场景举例\"><a href=\"#使用场景举例\" class=\"headerlink\" title=\"使用场景举例\"></a>使用场景举例</h3><p>当我们不确定有多少个参数传递的时候，可以用 <strong>arguments</strong> 来获取。</p>\n<p><strong>举例</strong>：利用 arguments 求函数实参中的最大值。</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMaxValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> max = <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 通过 arguments 遍历实参</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (max &lt; <span class=\"variable language_\">arguments</span>[i]) &#123;</span><br><span class=\"line\">\t\t\tmax = <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMaxValue</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]}