{"title":"34-正则表达式","slug":"JavaScript/34-正则表达式","date":"2023-02-16T07:30:25.460Z","updated":"2023-02-16T07:52:45.622Z","comments":true,"path":"api/articles/JavaScript/34-正则表达式.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"正则表达式简介\"><a href=\"#正则表达式简介\" class=\"headerlink\" title=\"正则表达式简介\"></a>正则表达式简介</h2><p><strong>定义</strong>：正则表达式用于定义一些字符串的规则。</p>\n<p><strong>作用</strong>：计算机可以根据正则表达式，来检查一个字符串是否符合指定的规则；或者将字符串中符合规则的内容提取出来。</p>\n<p>如果你想查看正则更多的内容，可以查阅官方文档关于 RegExp 这个内置对象的用法。</p>\n<h2 id=\"创建正则表达式的对象\"><a href=\"#创建正则表达式的对象\" class=\"headerlink\" title=\"创建正则表达式的对象\"></a>创建正则表达式的对象</h2><h3 id=\"方式一：使用构造函数创建正则表达式的对象\"><a href=\"#方式一：使用构造函数创建正则表达式的对象\" class=\"headerlink\" title=\"方式一：使用构造函数创建正则表达式的对象\"></a>方式一：使用构造函数创建正则表达式的对象</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量 = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;正则表达式&quot;</span>); <span class=\"comment\">// 注意，参数是字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> 变量 = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;正则表达式&quot;</span>, <span class=\"string\">&quot;匹配模式&quot;</span>); <span class=\"comment\">// 注意，两个参数都是字符串</span></span><br></pre></td></tr></table></figure>\n\n<p>备注：<code>RegExp</code>的意思是 <strong>Regular expression</strong>。使用typeof检查正则对象，会返回object。</p>\n<p>上面的语法中，既可以传一个参数，也可以传两个参数。</p>\n<p>创建了正则表达式的对象后，该怎么使用呢？大致分为两个步骤：</p>\n<ul>\n<li><p>（1）创建正则表达式的对象 reg。</p>\n</li>\n<li><p>（2）使用 reg 的test() 方法，判断指定字符串是否符合规则。</p>\n</li>\n</ul>\n<p><strong>正则表达式的<code>test()</code>方法</strong>：【重要】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myReg.<span class=\"title function_\">test</span>(str); <span class=\"comment\">// 判断字符串 str 是否符合 指定的 myReg 这个正则表达式的规则</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：使用<code>test()</code>这个方法可以用来检查一个字符串是否符合正则表达式的规则，<strong>如果符合则返回true，否则返回false</strong>。</p>\n<p>我们来看看下面的例子。</p>\n<p><strong>1、传一个参数时</strong>：</p>\n<p>构造函数 RegExp 中，可以只传一个参数。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// 定义一个正则表达式：检查一个字符串中是否含有 a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;qianguyihao&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;smyh&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过 test()方法，判断字符串是否符合 上面定义的 reg 规则</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str1)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str2)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意，上面的例子中，我们是先定义了一个正则表达式的规则，然后通过正则表达式的<code>test()</code>方法来判断字符串是否符合之前定义的规则。</p>\n<p><strong>2、传两个参数时</strong>：匹配模式 【重要】</p>\n<p>构造函数 RegExp 中，也可以传两个参数。我们可以传递一个<strong>匹配模式</strong>作为第二个参数。这个参数可以是：</p>\n<ul>\n<li><p><code>i</code> 忽略大小写。这里的 i 指的是 ignore。</p>\n</li>\n<li><p><code>g</code> 全局匹配模式。这里的 g 指的是 global。</p>\n</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qiangu&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// 打印结果：true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式二：使用字面量创建正则表达式\"><a href=\"#方式二：使用字面量创建正则表达式\" class=\"headerlink\" title=\"方式二：使用字面量创建正则表达式\"></a>方式二：使用字面量创建正则表达式</h3><p>我们可以使用字面量来创建正则表达式。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量 = <span class=\"regexp\">/正则表达式/</span>;  <span class=\"comment\">// 注意，这个语法里没有引号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> 变量 = <span class=\"regexp\">/正则表达式/</span>匹配模式;  <span class=\"comment\">// 注意，这个语法里没有引号</span></span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/A/i</span>; <span class=\"comment\">// 定义正则表达式的规则：检查一个字符串中是否含有 a。忽略大小写。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;qiangu&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> reg);  <span class=\"comment\">// 打印结果：object</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// 打印结果：true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以上两种方式的对比\"><a href=\"#以上两种方式的对比\" class=\"headerlink\" title=\"以上两种方式的对比\"></a>以上两种方式的对比</h3><ul>\n<li><p>方式一：使用构造函数创建时，更加灵活，因为参数中还可以传递变量。</p>\n</li>\n<li><p>方式二：使用字面量的方式创建，更加简单。</p>\n</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;i&quot;</span>); <span class=\"comment\">// 方式一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a/i</span>; <span class=\"comment\">// 方式二</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这两行代码的作用是等价的。</p>\n<h3 id=\"避坑指南：全局匹配-g-慎用test-方法\"><a href=\"#避坑指南：全局匹配-g-慎用test-方法\" class=\"headerlink\" title=\"避坑指南：全局匹配 g 慎用test()方法\"></a>避坑指南：全局匹配 g 慎用test()方法</h3><p>对于非全局匹配的正则表达式，<code>test()</code>只会检测<strong>是否存在某个目标字符串</strong>（只要存在就为 true），多次检测的结果都相同。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/test/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_test_test&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">reg.<span class=\"title function_\">test</span>(str) <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.<span class=\"title function_\">test</span>(str) <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.<span class=\"title function_\">test</span>(str) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>重点来了。</p>\n<p>当设置全局标志 <code>/g</code> 时，一旦字符串中还存在匹配，test() 方法都将返回 true，同时匹配成功后将把 <code>lastIndex</code> 属性的值<strong>设置为上次匹配成功结果之后的第一个字符所在的位置</strong>，下次匹配将从 <code>lastIndex</code> 指示的位置开始；匹配不成功时返回 false，同时将 lastIndex 属性的值重置为 0。</p>\n<p>举例：（很重要的例子，看仔细）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/test/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_test_test&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"property\">lastIndex</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"property\">lastIndex</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"property\">lastIndex</span>); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：</p>\n<p>全局匹配模式<code>g</code>一般用于 <code>exec()</code>、<code>match()</code>、<code>replace()</code>等方法。</p>\n<p>全局匹配模式<code>g</code>如果用于test()方法会有问题。因为g模式会生成一个<code>lastindex</code>参数来存储匹配最后一次的位置。</p>\n<p>参考链接：</p>\n<ul>\n<li><p><a href=\"https://juejin.im/post/5de9bd5fe51d45582c27b6f3\">JS正则表达式全局匹配的那些坑</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/Leolu007/article/details/8576490\">javascript正则全局匹配g慎用test方法</a></p>\n</li>\n<li><p><a href=\"https://github.com/qianguyihao/Web/issues/69\">issues</a></p>\n</li>\n</ul>\n<h2 id=\"正则表达式的简单语法\"><a href=\"#正则表达式的简单语法\" class=\"headerlink\" title=\"正则表达式的简单语法\"></a>正则表达式的简单语法</h2><h3 id=\"检查一个字符串中是否包含-a或b\"><a href=\"#检查一个字符串中是否包含-a或b\" class=\"headerlink\" title=\"检查一个字符串中是否包含 a或b\"></a>检查一个字符串中是否包含 a或b</h3><p><strong>写法1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a|b/</span>;</span><br></pre></td></tr></table></figure>\n\n<p>解释：使用 <code>|</code> 表示<code>或</code>的意思。</p>\n<p><strong>写法2</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[ab]/</span>;  <span class=\"comment\">// 跟上面的那行语法，是等价的</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：这里的<code>[]</code>也是表示<code>或</code>的意思。</p>\n<p><code>[]</code>这个符号在正则还是比较常用的。我们接下来看几个例子。</p>\n<h3 id=\"表示：或\"><a href=\"#表示：或\" class=\"headerlink\" title=\"[]表示：或\"></a>[]表示：或</h3><p>一些规则：</p>\n<ul>\n<li><p><code>/[ab]/</code> 等价于 <code>/a|b/</code>：检查一个字符串中是否包含 <strong>a或b</strong></p>\n</li>\n<li><p><code>/[a-z]/</code>：检查一个字符串那种是否包含<strong>任意小写字母</strong></p>\n</li>\n<li><p><code>/[A-Z]/</code>：任意大写字母</p>\n</li>\n<li><p><code>/[A-z]/</code>：任意字母</p>\n</li>\n<li><p><code>/[0-9]/</code>：任意数字</p>\n</li>\n<li><p><code>/a[bde]c/</code>：检查一个字符串中是否包含 abc 或 adc 或 aec</p>\n</li>\n</ul>\n<h3 id=\"表示：除了\"><a href=\"#表示：除了\" class=\"headerlink\" title=\"[^ ] 表示：除了\"></a>[^ ] 表示：除了</h3><p>举例1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^ab]/</span>; <span class=\"comment\">// 规则：字符串中，除了a、b之外，还有没有其他的字符内容？</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;acb&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// 打印结果：true</span></span><br></pre></td></tr></table></figure>\n\n<p>举例2：（可以用来验证某字符串是否为 纯数字）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^0-9]/</span>;  <span class=\"comment\">// 规则：字符串中，除了数字之外，还有没有其他的内容？</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;1991&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;199a1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str1)); <span class=\"comment\">// 打印结果：false （如果字符串是 纯数字，则返回 false）</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str2)); <span class=\"comment\">// 打印结果：true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持正则表达式的-String-对象的方法\"><a href=\"#支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"支持正则表达式的 String 对象的方法\"></a>支持正则表达式的 String 对象的方法</h2><p> String对象的如下方法，是支持正则表达式的：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">split()</td>\n<td align=\"left\">将字符串拆分成数组</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">search()</td>\n<td align=\"left\">搜索字符串中是否含有指定内容，返回索引 index</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">match()</td>\n<td align=\"left\">根据正则表达式，从一个字符串中将符合条件的内容提取出来</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">replace()</td>\n<td align=\"left\">将字符串中的指定内容，替换为新的内容并返回</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>下面来分别介绍和举例。</p>\n<h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h3><p><code>split()</code>：将一个字符串拆分成一个数组。可以接受一个正则表达式作为参数。</p>\n<p>备注：关于<code>split()</code>更详细的用法，可以看之前的关于《内置对象：String》这篇文章。</p>\n<p><strong>正则相关的举例</strong>：根据任意字母，将字符串拆分成数组。</p>\n<p>代码实现：（通过正则）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;1a2b3c4d5e6f7g&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = str.<span class=\"title function_\">split</span>(<span class=\"regexp\">/[A-z]/</span>); <span class=\"comment\">// 参数是一个正则表达式：表示所有字母</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;4&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;5&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;6&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;7&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search()\"></a>search()</h3><p><code>search()</code>：搜索字符串中是否含有指定内容。如果搜索到指定内容，则会返回第一次出现的索引；否则返回-1。</p>\n<p><code>search()</code>方法可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串。<code>serach()</code>只会查找第一个，即使设置全局匹配也没用。</p>\n<p><strong>举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;hello abc hello aec afc&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 搜索字符串中是否含有abc 或 aec 或 afc</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">result = str.<span class=\"title function_\">search</span>(<span class=\"regexp\">/a[bef]c/</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 打印结果：6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h3><p><code>match()</code>：根据正则表达式，从一个字符串中将符合条件的内容提取出来，封装到一个数组中返回（即使只查询到一个结果）。</p>\n<p><strong>注意</strong>：默认情况下，<code>match()</code>方法只会找到<strong>第一个</strong>符合要求的内容，找到以后就停止检索。我们可以设置正则表达式为<strong>全局匹配</strong>模式，这样就会匹配到所有的内容，并以<strong>数组</strong>的形式返回。</p>\n<p>另外，我们可以为一个正则表达式设置多个匹配模式，且匹配模式的顺序无所谓。</p>\n<p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/[a-z]/</span>);   <span class=\"comment\">// 找到符合要求的第一个内容，然后返回</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/[a-z]/g</span>);  <span class=\"comment\">// 设置为“全局匹配”模式，匹配字符串中 所有的小写字母</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result3 = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/[a-z]/gi</span>); <span class=\"comment\">// 设置多个匹配模式，匹配字符串中 所有的字母（忽略大小写）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 打印结果：[&quot;a&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 打印结果：[&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result3); <span class=\"comment\">// 打印结果：[&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;e&quot;, &quot;f&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：</p>\n<p>match()这个方法还是很实用的，可以在一个很长的字符串中，提取出<strong>有规则</strong>的内容。这不就是爬虫的时候经常会遇到的场景么？</p>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><p><code>replace()</code>：将字符串中的指定内容，替换为新的内容并返回。不会修改原字符串。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的字符串 = str.<span class=\"title function_\">replace</span>(被替换的内容，新的内容);</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：</p>\n<ul>\n<li><p>被替换的内容：可以接受一个正则表达式作为参数。</p>\n</li>\n<li><p>新的内容：默认只会替换第一个。如果需要替换全部符合条件的内容，可以设置正则表达式为<strong>全局匹配</strong>模式。</p>\n</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//replace()方法：替换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;Today is fine day,today is fine day !!!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;today&quot;</span>,<span class=\"string\">&quot;tomorrow&quot;</span>));  <span class=\"comment\">//只能替换第一个today</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/today/gi</span>,<span class=\"string\">&quot;tomorrow&quot;</span>)); <span class=\"comment\">//这里用到了正则，且为“全局匹配”模式，才能替换所有的today</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见正则表达式举例\"><a href=\"#常见正则表达式举例\" class=\"headerlink\" title=\"常见正则表达式举例\"></a>常见正则表达式举例</h2><h3 id=\"检查一个字符串是否是一个合法手机号\"><a href=\"#检查一个字符串是否是一个合法手机号\" class=\"headerlink\" title=\"检查一个字符串是否是一个合法手机号\"></a>检查一个字符串是否是一个合法手机号</h3><p>手机号的规则：</p>\n<ul>\n<li><p>以1开头（<code>^1</code> 表示1开头 , <code>[^1]</code>表示非1或除了1）</p>\n</li>\n<li><p>第二位是3~9之间任意数字</p>\n</li>\n<li><p>三位以后任意9位数字</p>\n</li>\n</ul>\n<p>正则实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> phoneStr = <span class=\"string\">&quot;13067890123&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> phoneReg = <span class=\"regexp\">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(phoneReg.<span class=\"title function_\">test</span>(phoneStr));</span><br></pre></td></tr></table></figure>\n\n<p><strong>备注</strong>：如果在正则表达式中同时使用<code>^</code>和<code>$</code>符号，则要求字符串必须完全符合正则表达式。</p>\n<h3 id=\"去掉字符串开头和结尾的空格\"><a href=\"#去掉字符串开头和结尾的空格\" class=\"headerlink\" title=\"去掉字符串开头和结尾的空格\"></a>去掉字符串开头和结尾的空格</h3><p>正则实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s*|\\s*$/g</span>,<span class=\"string\">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>解释如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s*/</span>, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">//去除开头的空格</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s*$/</span>, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">//去除结尾的空格</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断字符串是否为电子邮件\"><a href=\"#判断字符串是否为电子邮件\" class=\"headerlink\" title=\"判断字符串是否为电子邮件\"></a>判断字符串是否为电子邮件</h3><p>正则实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> emailReg = <span class=\"regexp\">/^\\w&#123;3,&#125;(\\.\\w+)*@[A-z0-9]+(\\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> email = <span class=\"string\">&quot;abchello@163.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(emailReg.<span class=\"title function_\">test</span>(email));</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]}