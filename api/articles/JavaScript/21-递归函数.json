{"title":"21-递归函数","slug":"JavaScript/21-递归函数","date":"2023-02-16T07:30:25.430Z","updated":"2023-02-16T07:49:10.595Z","comments":true,"path":"api/articles/JavaScript/21-递归函数.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>如果一个函数在内部调用这个函数自身，这个函数就是递归函数。</p>\n<p>递归在数据结构和算法中经常用到，可以将很多复杂的数据模型拆解为简单问题进行求解。一定要掌握。</p>\n<h3 id=\"递归的要素\"><a href=\"#递归的要素\" class=\"headerlink\" title=\"递归的要素\"></a>递归的要素</h3><ul>\n<li>递归模式：把大问题拆解为小问题进行分析。也称为递归体。</li>\n<li>边界条件：需要确定递归到何时结束。也称为递归出口。</li>\n</ul>\n<h3 id=\"代码演示：计算阶乘\"><a href=\"#代码演示：计算阶乘\" class=\"headerlink\" title=\"代码演示：计算阶乘\"></a>代码演示：计算阶乘</h3><p>提问：求一个正整数的阶乘。</p>\n<p><strong>普通写法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数：计算一个正整数的阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    result *= i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">factorial</span>(<span class=\"number\">5</span>)); <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n\n<p>现在，我们学习了递归函数之后，会有更简洁的写法。</p>\n<p><strong>递归写法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归函数：计算一个正整数的阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 递归出口：如果计算1的阶乘，就不用递归了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 开始递归：如果当前这个 n 不是1，就返回 n * (n-1)!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * <span class=\"title function_\">factorial</span>(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">factorial</span>(<span class=\"number\">5</span>)); <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"递归函数的案例\"><a href=\"#递归函数的案例\" class=\"headerlink\" title=\"递归函数的案例\"></a>递归函数的案例</h2><h3 id=\"寻找所有的喇叭花数\"><a href=\"#寻找所有的喇叭花数\" class=\"headerlink\" title=\"寻找所有的喇叭花数\"></a>寻找所有的喇叭花数</h3><p>题目：喇叭花数是一个<strong>三位数</strong>，其每一位数字的阶乘之和恰好等于它本身，即<code>abc＝a! + b! + c!</code>，其中abc表示一个三位数。请找出所有的喇叭花数。</p>\n<p>思路：将计算某个数字的阶乘封装成函数。</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归函数：计算一个数的阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 递归出口：如果计算1的阶乘，就不用递归了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 开始递归：如果当前这个 n 不是1，就返回 n * (n-1)!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * <span class=\"title function_\">factorial</span>(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 穷举法，从100到999遍历，寻找喇叭花数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">100</span>; i &lt;= <span class=\"number\">999</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将数字i转为字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> i_str = i.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  <span class=\"comment\">// abc分别表示百位、十位、个位</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"title class_\">Number</span>(i_str[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"title class_\">Number</span>(i_str[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"title class_\">Number</span>(i_str[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据喇叭花数的条件进行判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">factorial</span>(a) + <span class=\"title function_\">factorial</span>(b) + <span class=\"title function_\">factorial</span>(c) == i) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">145</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><p>斐波那契数列是这样一个数列：1、1、2、3、5、8、13、21、34……最早是由意大利数学家斐波那契开始研究的。它的规律是：下标为0和1的项，值为1；从下标为2的项开始，每一项等于前面两项之和。</p>\n<p>提问：请找出斐波那契数列的前10项。</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归函数：返回斐波那契数列中下标为n的那一项的值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 下标为0和1的项，值为1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 从下标为2的项开始，每一项等于前面两项之和</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">fib</span>(n - <span class=\"number\">1</span>) + <span class=\"title function_\">fib</span>(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环语句：打印斐波那契数列的前10项</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">15</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fib</span>(i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>关于递归的案例，后面还会有更多的应用场景。比如<strong>深拷贝</strong>就会用到递归。</p>\n","categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]}