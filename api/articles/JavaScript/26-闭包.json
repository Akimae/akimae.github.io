{"title":"26-闭包","slug":"JavaScript/26-闭包","date":"2023-02-16T07:30:25.442Z","updated":"2023-02-16T07:50:21.378Z","comments":true,"path":"api/articles/JavaScript/26-闭包.json","photos":[],"link":"","excerpt":null,"covers":["http://img.smyhvae.com/20200703_2055.png"],"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"闭包的引入\"><a href=\"#闭包的引入\" class=\"headerlink\" title=\"闭包的引入\"></a>闭包的引入</h2><p>我们知道，变量根据作用域的不同分为两种：全局变量和局部变量。</p>\n<ul>\n<li><p>函数内部可以访问全局变量和局部变量。</p>\n</li>\n<li><p>函数外部只能访问全局变量，不能访问局部变量。</p>\n</li>\n<li><p>当函数执行完毕，本作用域内的局部变量会销毁。</p>\n</li>\n</ul>\n<p>比如下面这样的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印报错：Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，由于变量 <code>a</code> 是函数内的局部变量，所以外部无法访问。</p>\n<p>但是，在有些场景下，我们就是想要在函数外部访问<strong>函数内部作用域的局部变量</strong>，那要怎么办呢？这就引入了闭包的概念。</p>\n<h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><h3 id=\"闭包（closure）的概念\"><a href=\"#闭包（closure）的概念\" class=\"headerlink\" title=\"闭包（closure）的概念\"></a>闭包（closure）的概念</h3><p><strong>闭包</strong>：如果<strong>外部作用域</strong>有权访问另外一个<strong>函数内部</strong>的<strong>局部变量</strong>时，那就产生了闭包。这个内部函数称之为闭包函数。注意，这里强调的是访问<strong>局部变量</strong>。</p>\n<p>闭包代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fun2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"comment\">// 调用外部函数，就能得到内部函数，并用 变量 result 接收</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"comment\">// 在 fun1函数的外部，执行了内部函数 fun2，并访问到了 fun2的内部变量a</span></span><br><span class=\"line\"><span class=\"title function_\">result</span>(); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，外部作用域（即全局作用域） 访问了函数 fun1 中的局部变量，那么，在 fun1 中就产生了闭包，函数 fun1是闭包函数。</p>\n<p>全局作用域中，并没有定义变量a。正常情况下作为函数内的局部变量 a，无法被外部访问到。但是通过闭包，我们最后还是可以在全局作用域中拿到局部变量 a 的值。</p>\n<p>注意，闭包函数是fun1，不是fun2。fun2在这里的作用是让全局作用域访问到变量a，fun2只是一个桥梁。</p>\n<h3 id=\"闭包的生命周期\"><a href=\"#闭包的生命周期\" class=\"headerlink\" title=\"闭包的生命周期\"></a>闭包的生命周期</h3><ol>\n<li><p>产生：内部函数fn1被声明时（即被创建时，不是被调用时）就产生了。</p>\n</li>\n<li><p>死亡：嵌套的内部函数成为垃圾对象时。（比如fun1 &#x3D; null，就可以让 fun1 成为垃圾对象）</p>\n</li>\n</ol>\n<h3 id=\"在-chrome-浏览器控制台中，调试闭包\"><a href=\"#在-chrome-浏览器控制台中，调试闭包\" class=\"headerlink\" title=\"在 chrome 浏览器控制台中，调试闭包\"></a>在 chrome 浏览器控制台中，调试闭包</h3><p>上面的代码中，要怎么验证，确实产生了闭包呢？我们可以在 chrome 浏览器的控制台中设置断点，当代码执行到 <code>console.log(a)</code>这一行的时候，如下图所示：</p>\n<p><img src=\"http://img.smyhvae.com/20200703_2055.png\"></p>\n<p>上图中， Local 指的是局部作用域，Global 指的是全局作用域；而 Closure 则是<strong>闭包</strong>，fn1 是一个闭包函数。</p>\n<h2 id=\"闭包的表现形式\"><a href=\"#闭包的表现形式\" class=\"headerlink\" title=\"闭包的表现形式\"></a>闭包的表现形式</h2><h3 id=\"形式1：将一个函数作为另一个函数的返回值\"><a href=\"#形式1：将一个函数作为另一个函数的返回值\" class=\"headerlink\" title=\"形式1：将一个函数作为另一个函数的返回值\"></a>形式1：将一个函数作为另一个函数的返回值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fn1</span>();   <span class=\"comment\">//执行外部函数fn1，返回的是内部函数fn2</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// 3       //执行fn2</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// 4       //再次执行fn2</span></span><br></pre></td></tr></table></figure>\n\n\n<p>当f()第二次执行的时候，a加1了，也就说明了：闭包里的数据没有消失，而是保存在了内存中。如果没有闭包，代码执行完倒数第三行后，变量a就消失了。</p>\n<p>上面的代码中，虽然调用了内部函数两次，但是，闭包对象只创建了一个。</p>\n<p>也就是说，要看闭包对象创建了几个，就看：<strong>外部函数执行了几次</strong>（与内部函数执行几次无关）。</p>\n<h3 id=\"形式2：将函数作为实参传递给另一个函数调用\"><a href=\"#形式2：将函数作为实参传递给另一个函数调用\" class=\"headerlink\" title=\"形式2：将函数作为实参传递给另一个函数调用\"></a>形式2：将函数作为实参传递给另一个函数调用</h3><p>在定时器、事件监听、Ajax 请求、Web Workers 或者任何异步中，只要使用了回调函数，实际上就是在使用闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showDelay</span>(<span class=\"params\">msg, time</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;  <span class=\"comment\">//这个function是闭包，因为是嵌套的子函数，而且引用了外部函数的变量msg</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(msg)</span><br><span class=\"line\">  &#125;, time)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">showDelay</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，闭包是里面的function，因为它是嵌套的子函数，而且引用了外部函数的变量msg。</p>\n<h2 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h2><ul>\n<li><p>作用1：延长局部变量的生命周期。</p>\n</li>\n<li><p>作用2：让函数外部可以操作（读写）函数内部的数据（变量&#x2F;函数）。</p>\n</li>\n</ul>\n<p>代码演示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">fun2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fun2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title function_\">fun1</span>();   <span class=\"comment\">//执行外部函数fn1，返回的是内部函数fn2</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>() <span class=\"comment\">// 3       //执行fun2</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>() <span class=\"comment\">// 4       //再次执行fun2</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，foo 代表的就是整个 fun2 函数。当执行了 <code>foo()</code> 语句之后，也就执行了fun2()函数，fun1() 函数内就产生了闭包。</p>\n<p><strong>作用1分析</strong>：</p>\n<p>一般来说，在 fn1() 函数执行完毕后，它里面的变量 a 会立即销毁。但此时由于产生了闭包，所以 <strong>fun1 函数中的变量 a 不会立即销毁，仍然保留在内存中，因为 fn2 函数还要继续调用变量 a</strong>。只有等所有函数把变量 a 调用完了，变量 a 才会销毁。</p>\n<p><strong>作用2分析：</strong></p>\n<p>在执行 <code>foo()</code>语句之后，竟然能够打印出 <code>3</code>，这就完美通过闭包实现了：全局作用域成功访问到了局部作用域中的变量 a。</p>\n<p>达到的效果是：<strong>外界看不到变量a，但可以操作a</strong>。当然，如果你真想看到a，可以在fun2中将a返回即可。</p>\n<h2 id=\"闭包的应用场景\"><a href=\"#闭包的应用场景\" class=\"headerlink\" title=\"闭包的应用场景\"></a>闭包的应用场景</h2><h3 id=\"场景1：高阶函数\"><a href=\"#场景1：高阶函数\" class=\"headerlink\" title=\"场景1：高阶函数\"></a>场景1：高阶函数</h3><p>题目：不同的班级有不同成绩检测标准。比如：A班的合格线是60分，B 班的合格线是70分。已知某个人班级和分数，请用闭包函数判断他的成绩是否合格。</p>\n<p>思路：创建成绩检测函数 checkStandard(n)，检查成绩 n 是否合格，函数返回布尔值。</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 高阶函数：判断学生的分数是否合格。形参 standardTemp 为标准线</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createCheckTemp</span>(<span class=\"params\">standardTemp</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 形参 n 表示具体学生的分数</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">checkTemp</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt;= standardTemp) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;成绩合格&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;成绩不合格&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> checkTemp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 checkStandard_A 函数，它以60分为合格线</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkStandard_A = <span class=\"title function_\">createCheckTemp</span>(<span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"comment\">// 再创建一个 checkStandard_B 函数，它以70分为合格线</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkStandard_B = <span class=\"title function_\">createCheckTemp</span>(<span class=\"number\">70</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"title function_\">checkStandard_A</span>(<span class=\"number\">65</span>); <span class=\"comment\">// 成绩合格</span></span><br><span class=\"line\"><span class=\"title function_\">checkStandard_B</span>(<span class=\"number\">65</span>); <span class=\"comment\">// 成绩不合格</span></span><br></pre></td></tr></table></figure>\n\n<p>对于A班来说，它的闭包函数是createCheckTemp()，闭包范围是 checkTemp()函数和参数<code>standardTemp = 60</code>。对于B班来说，它的闭包函数是全新的createCheckTemp()，闭包范围是全新的checkTemp()函数和全新的参数<code>standardTemp = 70</code>。</p>\n<p>因为有闭包存在，所以，并不会因为 createCheckTemp() 执行完毕后就销毁 standardTemp 的值；且A班和B班的standardTemp参数不会混淆。</p>\n<p>备注：关于“高阶函数”的更多解释，我们在以后的内容中讲解。</p>\n<h3 id=\"场景2：封装JS模块\"><a href=\"#场景2：封装JS模块\" class=\"headerlink\" title=\"场景2：封装JS模块\"></a>场景2：封装JS模块</h3><p>闭包的第二个使用场景是：定义具有特定功能的JS模块，将所有的数据和功能都封装在一个函数内部，只向外暴露指定的对象或方法。模块的调用者，只能调用模块暴露的对象或方法来实现对应的功能。</p>\n<p>比如有这样一个需求：定义一个私有变量a，要求a只能被进行指定操作（加减），不能进行其他操作（乘除）。在  Java、C++ 等语言中，有私有属性的概念，但在JS中只能通过闭包模拟。</p>\n<p>我们来看看下面的代码，如何通过闭包封装JS模块。</p>\n<p>写法1：</p>\n<p>（1）myModule.js：（定义一个模块，向外暴露多个方法，供外界调用）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myModule</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = <span class=\"string\">&#x27;Qinguyihao Haha&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//操作私有数据的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doSomething() &#x27;</span> + msg.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">//字符串大写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doOtherthing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doOtherthing() &#x27;</span> + msg.<span class=\"title function_\">toLowerCase</span>()) <span class=\"comment\">//字符串小写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过【对象字面量】的形式进行包裹，向外暴露多个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">doSomething1</span>: doSomething,</span><br><span class=\"line\">        <span class=\"attr\">doOtherthing2</span>: doOtherthing</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，外界只能通过doSomething1和doOtherthing2来操作里面的数据，但不让外界看到里面的具体实现。</p>\n<p>（2）index.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>闭包的应用-自定义JS模块<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">闭包应用举例: 定义JS模块</span></span><br><span class=\"line\"><span class=\"comment\">  * 具有特定功能的js文件</span></span><br><span class=\"line\"><span class=\"comment\">  * 将所有的数据和功能都封装在一个函数内部(私有的)</span></span><br><span class=\"line\"><span class=\"comment\">  * 【重要】只向外暴露一个包含n个方法的对象或方法</span></span><br><span class=\"line\"><span class=\"comment\">  * 模块的使用者, 只需要调用模块暴露的对象或者方法来实现对应的功能</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;myModule.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = <span class=\"title function_\">myModule</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">module</span>.<span class=\"title function_\">doSomething1</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">module</span>.<span class=\"title function_\">doOtherthing2</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>写法2：</p>\n<p>同样是实现上面的功能，我们还采取另外一种写法，写起来更方便。如下：</p>\n<p>（1）myModule2.js：（是一个立即执行的匿名函数）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = <span class=\"string\">&#x27;Qinguyihao Haha&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//操作私有数据的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doSomething() &#x27;</span> + msg.<span class=\"title function_\">toUpperCase</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doOtherthing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doOtherthing() &#x27;</span> + msg.<span class=\"title function_\">toLowerCase</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//外部函数是即使运行的匿名函数，我们可以把两个方法直接传给window对象</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">myModule</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">doSomething1</span>: doSomething,</span><br><span class=\"line\">        <span class=\"attr\">doOtherthing2</span>: doOtherthing</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n\n<p>（2）index.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>闭包的应用-自定义JS模块<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">闭包的应用2 : 定义JS模块</span></span><br><span class=\"line\"><span class=\"comment\">  * 具有特定功能的js文件</span></span><br><span class=\"line\"><span class=\"comment\">  * 将所有的数据和功能都封装在一个函数内部(私有的)</span></span><br><span class=\"line\"><span class=\"comment\">  * 只向外暴露一个包信n个方法的对象或函数</span></span><br><span class=\"line\"><span class=\"comment\">  * 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入myModule文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;myModule2.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\">    myModule.doSomething1()</span><br><span class=\"line\">    myModule.doOtherthing2()</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上方两个文件中，我们在<code>myModule2.js</code>里直接把两个方法直接传递给window对象了。于是，在index.html中引入这个js文件后，会立即执行里面的匿名函数。在index.html中把myModule直接拿来用即可。</p>\n<p><strong>小结：</strong></p>\n<p>写法1和写法2都采用了闭包。</p>\n<h2 id=\"内存溢出和内存泄露\"><a href=\"#内存溢出和内存泄露\" class=\"headerlink\" title=\"内存溢出和内存泄露\"></a>内存溢出和内存泄露</h2><blockquote>\n<p>我们再讲两个概念，这两个概念和闭包有些联系。</p>\n</blockquote>\n<h3 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h3><p><strong>内存泄漏</strong>：<strong>占用的内存</strong>没有及时释放。</p>\n<p>内存泄露的次数积累多了，就容易导致内存溢出。</p>\n<p><strong>常见的内存泄露</strong>：</p>\n<p>1、意外的全局变量</p>\n<p>2、没有及时清理的计时器或回调函数</p>\n<p>3、闭包</p>\n<p>情况1举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 意外的全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  a = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10000000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>情况2举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有及时清理的计时器或回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intervalId = <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">//启动循环定时器后不清理</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;----&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// clearInterval(intervalId);  //清理定时器</span></span><br></pre></td></tr></table></figure>\n\n<p>情况3举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(++a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fn1</span>()</span><br><span class=\"line\"><span class=\"title function_\">f</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f = null //让内部函数成为垃圾对象--&gt;回收闭包</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存溢出\"><a href=\"#内存溢出\" class=\"headerlink\" title=\"内存溢出\"></a>内存溢出</h3><p><strong>内存溢出</strong>：程序运行时出现的错误。当程序运行<strong>需要的内存</strong>超过<strong>剩余的内存</strong>时，就抛出内存溢出的错误。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">obj[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10000000</span>);  <span class=\"comment\">//把所有的数组内容都放到obj里保存，导致obj占用了很大的内存空间</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包是否会造成内存泄漏\"><a href=\"#闭包是否会造成内存泄漏\" class=\"headerlink\" title=\"闭包是否会造成内存泄漏\"></a>闭包是否会造成内存泄漏</h3><p>一般来说，答案是否定的。因为内存泄漏是非预期情况，本来想回收，但实际没回收；而闭包是预期情况，一般不会造成内存泄漏。</p>\n<p>但如果因代码质量不高，滥用闭包，也会造成内存泄漏。</p>\n<h2 id=\"闭包面试题\"><a href=\"#闭包面试题\" class=\"headerlink\" title=\"闭包面试题\"></a>闭包面试题</h2><p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    count = count + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fun1 = <span class=\"title function_\">addCount</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> fun2 = <span class=\"title function_\">addCount</span>();</span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"title function_\">fun2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"title function_\">fun2</span>();</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p>代码解释：</p>\n<p>（1）fun1 和 fun2 这两个闭包函数是互不影响的，因此第一次调用时，count变量都是0，最终各自都输出1。</p>\n<p>（2）第二次调用时，由于闭包有记忆性，所以各自会在上一次的结果上再加1，因此输出2。</p>\n","categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]}