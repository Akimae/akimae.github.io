{"total":81,"pageSize":10,"pageCount":9,"data":[{"title":"10-运算符","slug":"JavaScript/10-运算符","date":"2023-02-15T12:06:59.457Z","updated":"2023-02-15T12:21:08.507Z","comments":true,"path":"api/articles/JavaScript/10-运算符.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20181222_1218.png","content":"<h2 id=\"运算符的定义和分类\"><a href=\"#运算符的定义和分类\" class=\"headerlink\" title=\"运算符的定义和分类\"></a>运算符的定义和分类</h2><h3 id=\"运算符的定义\"><a href=\"#运算符的定义\" class=\"headerlink\" title=\"运算符的定义\"></a>运算符的定义</h3><p><strong>运算符</strong>：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p>\n<p><strong>表达式</strong>：数字、运算符、变量的组合（组成的式子）。</p>\n<p>表达式最终都会有一个运算结果，我们将这个结果称为表达式的<strong>返回值</strong>。</p>\n<p>比如：<code>+</code>、<code>*</code>、<code>/</code>、<code>()</code> 都是<strong>运算符</strong>，而<code>（3+5）/2</code>则是<strong>表达式</strong>。</p>\n<p>比如：typeof 就是运算符，可以获得一个值的类型。它会将该值的类型以<strong>字符串</strong>的形式返回，返回值可以是 number、string、boolean、undefined、object。</p>\n<h3 id=\"运算符的分类\"><a href=\"#运算符的分类\" class=\"headerlink\" title=\"运算符的分类\"></a>运算符的分类</h3><p>JS 中的运算符，分类如下：</p>\n<ul>\n<li>算数运算符</li>\n<li>自增&#x2F;自减运算符</li>\n<li>一元运算符</li>\n<li>三元运算符（条件运算符）</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n<li>比较运算符</li>\n</ul>\n<p>下面来逐一讲解。</p>\n<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><p><strong>算术运算符</strong>：用于执行两个变量或值的算术运算。</p>\n<p>常见的算数运算符有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"center\">加、字符串连接</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"center\">减</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"center\">乘</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"center\">除</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"center\">获取余数（取余、取模）</td>\n</tr>\n</tbody></table>\n<p><strong>求余的举例</strong>：</p>\n<p>假设用户输入 345，怎么分别得到 3、4、5 这三个数呢？</p>\n<p><strong>答案</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">得到3的方法：345 除以100，得到3.45然后取整，得到3。即：parseInt(345/100)</span><br><span class=\"line\"></span><br><span class=\"line\">得到4的方法：345 除以100，余数是45，除以10，得到4.5，取整。即：parseInt(345 % 100 / 10)</span><br><span class=\"line\"></span><br><span class=\"line\">得到5的方法：345 除以10，余数就是5。即：345 % 10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"算数运算符的运算规则\"><a href=\"#算数运算符的运算规则\" class=\"headerlink\" title=\"算数运算符的运算规则\"></a>算数运算符的运算规则</h3><p>（1）<code>* / %</code> 的优先级高于 <code>+ -</code></p>\n<p>（2）无论是<code>+ - * / %</code>都是左结合性（从左至右计算）</p>\n<p>（2）小括号<code>( )</code>：能够影响计算顺序，且可以嵌套。没有中括号、没有大括号，只有小括号。</p>\n<p>举例 1：（取余）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> % <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 3。</p>\n<p>举例 2：（注意运算符的优先级）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span> + ((<span class=\"number\">2</span> * <span class=\"number\">3</span>) % <span class=\"number\">4</span>) / <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>结果分析：</p>\n<p>原式 &#x3D; 1 + 6 % 4 &#x2F; 3 &#x3D; 1 + 2 &#x2F; 3 &#x3D; 1.66666666666666</p>\n<h3 id=\"取模（取余）运算\"><a href=\"#取模（取余）运算\" class=\"headerlink\" title=\"取模（取余）运算\"></a>取模（取余）运算</h3><p>格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">余数 = m % n;</span><br></pre></td></tr></table></figure>\n\n<p>计算结果注意：</p>\n<ul>\n<li><p>取余运算结果的正负性，取决于 m，而不是 n。比如：<code>10 % -3</code>的运算结果是 1。<code>-10 % 3</code>的运算结果是-1。</p>\n</li>\n<li><p>如果 n &lt; 0，那就先把 n 取绝对值后，再计算。等价于 m % (-n)。</p>\n</li>\n<li><p>如果 n 是 0，那么结果是 NaN。</p>\n</li>\n<li><p>在 n &gt; 0 的情况下：</p>\n<ul>\n<li>如果 m&gt;&#x3D;n，那就正常取余。</li>\n<li>如果 m&lt;n，那结果就是 m。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"浮点数运算的精度问题\"><a href=\"#浮点数运算的精度问题\" class=\"headerlink\" title=\"浮点数运算的精度问题\"></a>浮点数运算的精度问题</h3><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时，会丢失精度，导致计算不够准确。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>); <span class=\"comment\">// 运算结果不是 0.3，而是 0.30000000000000004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0.07</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 运算结果不是 7，而是 7.000000000000001</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，<strong>不要直接判断两个浮点数是否相等</strong>。前面的文章《JavaScript 基础：基本数据类型：Number》有详细介绍。</p>\n<h3 id=\"隐式类型转换——运算符：加号\"><a href=\"#隐式类型转换——运算符：加号\" class=\"headerlink\" title=\"隐式类型转换——运算符：加号 +\"></a>隐式类型转换——运算符：加号 <code>+</code></h3><ol>\n<li><strong>字符串 + XX &#x3D; 字符串</strong></li>\n</ol>\n<p>任何值和字符串做加法运算，都会先调用 String() 函数转换为字符串，然后再做拼串操作。最终的运算结果是字符串。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result1 = <span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"string\">&#x27;3&#x27;</span>; <span class=\"comment\">// 字符串：33</span></span><br><span class=\"line\"></span><br><span class=\"line\">result2 = <span class=\"string\">&#x27;1&#x27;</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span>; <span class=\"comment\">// 字符串：123</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>Boolean + 数字 &#x3D; 数字</strong></li>\n</ol>\n<p>Boolean 型和数字型相加时， true 按 1 来算 ，false 按 0 来算。这里其实是先调 Number() 函数，将 Boolean 类型转为 Number 类型，然后再和 数字相加。</p>\n<ol start=\"3\">\n<li><strong>null + 数字 &#x3D; 数字</strong></li>\n</ol>\n<p>等价于：0 + 数字</p>\n<ol start=\"4\">\n<li><strong>undefined + 数字 &#x3D; NaN</strong></li>\n</ol>\n<p>计算结果：NaN</p>\n<ol start=\"5\">\n<li>任何值和 <strong>NaN</strong> 运算的结果都是 NaN。</li>\n</ol>\n<h3 id=\"隐式类型转换——运算符：-、-、-、\"><a href=\"#隐式类型转换——运算符：-、-、-、\" class=\"headerlink\" title=\"隐式类型转换——运算符：-、*、/、%\"></a>隐式类型转换——运算符：<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></h3><p>任何非 Number 类型的值做<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>运算时，会将这些值转换为 Number 然后再运算(内部调用的是 Number() 函数），运算结果是 Number 类型。</p>\n<p>任何数据和 NaN进行运算，结果都是NaN。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result1 = <span class=\"number\">100</span> - <span class=\"string\">&#x27;1&#x27;</span>; <span class=\"comment\">// 99</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = <span class=\"literal\">true</span> + <span class=\"title class_\">NaN</span>; <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自增和自减运算符\"><a href=\"#自增和自减运算符\" class=\"headerlink\" title=\"自增和自减运算符\"></a>自增和自减运算符</h2><h3 id=\"自增运算符\"><a href=\"#自增运算符\" class=\"headerlink\" title=\"自增运算符 ++\"></a>自增运算符 <code>++</code></h3><p>作用：可以快速对一个变量进行加1操作。只能操作变量，不能操作常量或者表达式。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a1++;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = a1++ + a2; <span class=\"comment\">// result的结果为4</span></span><br><span class=\"line\"><span class=\"comment\">// (a1+a2)++; // 报错，没有这种写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a3 = <span class=\"number\">3</span>;</span><br><span class=\"line\">a3++; <span class=\"comment\">// 报错，因为常量无法再自加</span></span><br></pre></td></tr></table></figure>\n\n<p>自增分成两种：<code>a++</code>和<code>++a</code>。共同点：</p>\n<p>（1）无论是 <code>a++</code> 还是<code>++a</code>，自增都会使原变量的值加 1。</p>\n<p>（2）<strong>我们要注意的是</strong>：<code>a</code>是变量，而<code>a++</code>和<code>++a</code>是<strong>表达式</strong>。</p>\n<p>那这两种自增，有啥区别呢？区别是：<code>a++</code> 和 <code>++a</code>的值不同：（也就是说，表达式的值不同）</p>\n<ul>\n<li><p><code>a++</code>这个表达式的值等于原变量的值（a 自增前的值）。可以这样理解：先把 a 的值赋值给表达式，然后 a 再自增。</p>\n</li>\n<li><p><code>++a</code>这个表达式的值等于新值 （a 自增后的值）。 可以这样理解：a 先自增，然后把自增后的值赋值给表达式。</p>\n</li>\n</ul>\n<h3 id=\"自减运算符\"><a href=\"#自减运算符\" class=\"headerlink\" title=\"自减运算符 --\"></a>自减运算符 <code>--</code></h3><p>作用：可以快速对一个变量进行减1操作。原理同自增运算符。</p>\n<p>开发时，大多使用后置的自增&#x2F;自减，并且代码独占一行，例如：<code>num++</code>，或者 <code>num--</code>。</p>\n<h3 id=\"代码举例\"><a href=\"#代码举例\" class=\"headerlink\" title=\"代码举例\"></a>代码举例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n1 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = n1++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n1); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = ++n1;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n1); <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">//12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = n2--;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n2); <span class=\"comment\">// 19</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\">result2 = --n2;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n2); <span class=\"comment\">// 18</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><p>自增和自减时，a的执行过程：</p>\n<p>（1）先调用<code>Number(a)</code>函数；</p>\n<p>（2）然后将<code>Number(a)</code>的返回结果进行 加 1 操作，得到的结果赋值给 a。</p>\n<p>举例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;666&#x27;</span>; <span class=\"comment\">// 这里不能用 const 定义，否则报错。</span></span><br><span class=\"line\">a++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：667</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果： number</span></span><br></pre></td></tr></table></figure>\n\n<p>举例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">a++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：NaN。因为 Number(&#x27;abc&#x27;)的结果为 NaN，再自增后，结果依然是 NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果：number</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一元运算符\"><a href=\"#一元运算符\" class=\"headerlink\" title=\"一元运算符\"></a>一元运算符</h2><p>一元运算符，只需要一个操作数。常见的一元运算符如下。</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><blockquote>\n<p>typeof 就是典型的一元运算符，因为后面只跟一个操作数。</p>\n</blockquote>\n<p><code>typeof()</code>表示“<strong>获取变量的数据类型</strong>”，它是 JS 提供的一个操作符。返回的是小写，语法为：（两种写法都可以）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法1</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> 变量;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法2</span></span><br><span class=\"line\"><span class=\"title function_\">typeof</span>(变量);</span><br></pre></td></tr></table></figure>\n\n<p>typeof 这个运算符的返回结果就是变量的类型。那返回结果的类型是什么呢？是字符串。</p>\n<p><strong>返回结果</strong>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">typeof 的语法</th>\n<th align=\"center\">返回结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">typeof 数字（含 typeof NaN）</td>\n<td align=\"center\">number</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 字符串</td>\n<td align=\"center\">string</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 布尔型</td>\n<td align=\"center\">boolean</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 对象</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 方法</td>\n<td align=\"center\">function</td>\n</tr>\n<tr>\n<td align=\"left\">typeof null</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"left\">typeof undefined</td>\n<td align=\"center\">undefined</td>\n</tr>\n</tbody></table>\n<p>备注 1：为啥 <code>typeof null</code>的返回值也是 object 呢？因为 null 代表的是<strong>空对象</strong>。</p>\n<p>备注 2：<code>typeof NaN</code>的返回值是 number，上一篇文章中讲过，NaN 是一个特殊的数字。</p>\n<p><strong>返回结果举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果：string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> []); <span class=\"comment\">// 空数组的打印结果：object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123;&#125;); <span class=\"comment\">// 空对象的打印结果：object</span></span><br></pre></td></tr></table></figure>\n\n<p>代码解释：这里的空数组<code>[]</code>、空对象<code>&#123;&#125;</code> ，为啥他们在使用 typeof 时，返回值也是 <code>object</code>呢？因为空数组、空对象都是<strong>引用数据类型 Object</strong>。</p>\n<p>typeof 无法区分数组，但 instanceof 可以。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<p>关于 instanceof 的详细内容，以后讲对象的时候，会详细介绍。</p>\n<h3 id=\"正号-x2F-负号：-a、-a\"><a href=\"#正号-x2F-负号：-a、-a\" class=\"headerlink\" title=\"正号&#x2F;负号：+a、-a\"></a>正号&#x2F;负号：<code>+a</code>、<code>-a</code></h3><blockquote>\n<p>注意，这里说的是正号&#x2F;负号，不是加号&#x2F;减号。</p>\n</blockquote>\n<p>（1）不会改变原数值。</p>\n<p>（1）正号不会对数字产生任何影响。比如说，<code>2</code>和<code>+2</code>是一样的。</p>\n<p>（2）我们可以对其他的数据类型使用<code>+</code>，来将其转换为 number【重要的小技巧】。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">true</span>;</span><br><span class=\"line\">a = +a; <span class=\"comment\">// 注意这行代码的一元运算符操作</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a：&#x27;</span> + a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;-----------------&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;18&#x27;</span>;</span><br><span class=\"line\">b = +b; <span class=\"comment\">// 注意这行代码的一元运算符操作</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b：&#x27;</span> + b);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> b);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a：1</span><br><span class=\"line\">number</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">b：18</span><br><span class=\"line\">number</span><br></pre></td></tr></table></figure>\n\n<p>（3）负号可以对数字进行取反。</p>\n<h3 id=\"隐式类型转换——正号-x2F-负号\"><a href=\"#隐式类型转换——正号-x2F-负号\" class=\"headerlink\" title=\"隐式类型转换——正号&#x2F;负号\"></a>隐式类型转换——正号&#x2F;负号</h3><p>任何值做<code>+a</code>、<code>-a</code>运算时， 内部调用的是 Number() 函数。</p>\n<p><strong>举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;666&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = +a; <span class=\"comment\">// 对 a 进行一元运算，b是运算结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果：string。说明 a 的数据类型保持不变。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：&quot;666&quot;。不会改变原数值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> b); <span class=\"comment\">// 打印结果：number。说明 b 的数据类型发生了变化。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 打印结果：666</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h2><p>三目运算符也叫三元运算符、条件运算符。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">条件表达式 ? 语句1 : 语句2;</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行流程</strong>——条件运算符在执行时，首先对条件表达式进行求值：</p>\n<ul>\n<li><p>如果该值为 true，则执行语句 1，并返回执行结果</p>\n</li>\n<li><p>如果该值为 false，则执行语句 2，并返回执行结果</p>\n</li>\n</ul>\n<p>如果条件表达式的求值结果是一个非布尔值，会将其转换为布尔值然后再运算。</p>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>逻辑运算符有三个：</p>\n<ul>\n<li><p><code>&amp;&amp;</code>： 与（且）。两个都为真，结果才为真。特点：一假则假。</p>\n</li>\n<li><p><code>||</code> ：或。只要有一个是真，结果就是真。特点：特点: 一真则真。</p>\n</li>\n<li><p><code>!</code> ：非。对一个布尔值进行取反。特点: 真变假, 假变真。</p>\n</li>\n</ul>\n<p>注意：能参与逻辑运算的，都是布尔值。</p>\n<p><strong>连比的写法：</strong></p>\n<p>来看看逻辑运算符连比的写法。</p>\n<p>举例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> &lt; <span class=\"number\">2</span> &amp;&amp; <span class=\"number\">2</span> &lt; <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 false。</p>\n<p>举例 2：（判断一个人的年龄是否在 18~65 岁之间）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入您的年龄&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt;= <span class=\"number\">18</span> &amp;&amp; a &lt; <span class=\"number\">65</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;可以上班&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;准备退休&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PS：上面的<code>a&gt;=18 &amp;&amp; a&lt;= 65</code>千万别想当然地写成<code> 18&lt;= a &lt;= 65</code>，没有这种语法。</p>\n<h3 id=\"非布尔值的与或运算【重要】\"><a href=\"#非布尔值的与或运算【重要】\" class=\"headerlink\" title=\"非布尔值的与或运算【重要】\"></a>非布尔值的与或运算【重要】</h3><blockquote>\n<p>之所以重要，是因为在实际开发中，我们经常用这种代码做容错处理或者兜底处理。</p>\n</blockquote>\n<p>非布尔值进行<strong>与或运算</strong>时，会先将其转换为布尔值，然后再运算，但返回结果是<strong>原值</strong>。比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">5</span> &amp;&amp; <span class=\"number\">6</span>; <span class=\"comment\">// 运算过程：true &amp;&amp; true;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result：&#x27;</span> + result); <span class=\"comment\">// 打印结果：6（也就是最后面的那个值）</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码可以看到，虽然运算过程为布尔值的运算，但返回结果是原值。</p>\n<p>那么，返回结果是哪个原值呢？我们来看一下。</p>\n<p>1、两个非布尔值，做逻辑运算：</p>\n<p><strong>与运算</strong>的返回结果：</p>\n<ul>\n<li><p>如果第一个值为 false，则只执行第一条语句，并直接返回第一个值；不会再往后执行。</p>\n</li>\n<li><p>如果第一个值为 true，则继续执行第二条语句，并返回第二个值（无论第二个值的结果如何）。</p>\n</li>\n</ul>\n<p><strong>或运算</strong>的返回结果：</p>\n<ul>\n<li><p>如果第一个值为 true，则只执行第一条语句，并直接返回第一个值；不会再往后执行。</p>\n</li>\n<li><p>如果第一个值为 false，则继续执行第二条语句，并返回第二个值（无论第二个值的结果如何）。</p>\n</li>\n</ul>\n<p>2、三个及以上的非布尔值，做逻辑运算：</p>\n<p><strong>与运算</strong>的返回结果：（value1 &amp;&amp; value2 &amp;&amp; value3）</p>\n<ul>\n<li>从左到右依次计算操作数，找到第一个为 false 的值为止。</li>\n<li>如果所有的值都为 true，则返回最后一个值。</li>\n</ul>\n<p><strong>或运算</strong>的返回结果：（value1 || value2 || value3）</p>\n<ul>\n<li>从左到右依次计算操作数，找到第一个为 true 的值为止。</li>\n<li>如果所有的值都为 false，则返回最后一个值。</li>\n</ul>\n<h3 id=\"非布尔值的-运算\"><a href=\"#非布尔值的-运算\" class=\"headerlink\" title=\"非布尔值的 ! 运算\"></a>非布尔值的 <code>!</code> 运算</h3><p>非布尔值进行<strong>非运算</strong>时，会先将其转换为布尔值，然后再运算，返回结果是<strong>布尔值</strong>。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">a = !a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// boolean</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"短路运算的妙用【重要】\"><a href=\"#短路运算的妙用【重要】\" class=\"headerlink\" title=\"短路运算的妙用【重要】\"></a>短路运算的妙用【重要】</h3><blockquote>\n<p>下方举例中的写法技巧，在实际开发中，经常用到。这种写法，是一种很好的「容错、容灾、降级」方案，需要多看几遍。</p>\n</blockquote>\n<p>1、JS 中的<code>&amp;&amp;</code>属于<strong>短路</strong>的与：</p>\n<ul>\n<li><p>如果第一个值为 false，则不会执行后面的内容。</p>\n</li>\n<li><p>如果第一个值为 true，则继续执行第二条语句，并返回第二个值。</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第一个值为true，会继续执行后面的内容</span></span><br><span class=\"line\">a1 &amp;&amp; <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;看 a1 出不出来&#x27;</span>); <span class=\"comment\">// 可以弹出 alert 框</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第一个值为false，不会继续执行后面的内容</span></span><br><span class=\"line\">a2 &amp;&amp; <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;看 a2 出不出来&#x27;</span>); <span class=\"comment\">// 不会弹出 alert 框</span></span><br></pre></td></tr></table></figure>\n\n<p>2、JS 中的<code>||</code>属于<strong>短路</strong>的或：</p>\n<ul>\n<li><p>如果第一个值为 true，则不会执行后面的内容。</p>\n</li>\n<li><p>如果第一个值为 false，则继续执行第二条语句，并返回第二个值。</p>\n</li>\n</ul>\n<p>实际开发中，我们经常是这样来做「容错处理」的，如下。</p>\n<p>举例1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result; <span class=\"comment\">// 请求接口时，后台返回的内容</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> errorMsg = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// 前端的文案提示</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (result &amp; result.<span class=\"property\">retCode</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  errorMsg = <span class=\"string\">&#x27;恭喜你中奖啦~&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (result &amp;&amp; result.<span class=\"property\">retCode</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 接口返回异常码时</span></span><br><span class=\"line\">\terrorMsg = result.<span class=\"property\">msg</span> || <span class=\"string\">&#x27;活动太火爆，请稍后再试&#x27;</span>; <span class=\"comment\">// 文案提示信息，优先用 接口返回的msg字段，其次用 &#x27;活动太火爆，请稍后再试&#x27; 这个文案兜底。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 接口挂掉时</span></span><br><span class=\"line\">\terrorMsg = <span class=\"string\">&#x27;网络异常，请稍后再试&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举例2，当前端成功调用一个接口后，返回的数据为 result 对象。这个时候，我们用变量 a 来接收 result 里的图片资源：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (result.<span class=\"property\">retCode</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = result &amp;&amp; result.<span class=\"property\">data</span> &amp;&amp; result.<span class=\"property\">data</span>.<span class=\"property\">imgUrl</span> || <span class=\"string\">&#x27;http://img.smyhvae.com/20160401_01.jpg&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的意思是，获取返回结果中的<code>result.data.imgUrl</code>这个图片资源；如果返回结果中没有 <code>result.data.imgUrl</code> 这个字段，就用 <code>http://img.smyhvae.com/20160401_01.jpg</code> 作为<strong>兜底</strong>图片。这种写法，在实际开发中经常用到。</p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>赋值：将等号右侧的值赋给符号左侧的变量。</p>\n<h3 id=\"赋值运算符包括哪些\"><a href=\"#赋值运算符包括哪些\" class=\"headerlink\" title=\"赋值运算符包括哪些\"></a>赋值运算符包括哪些</h3><ul>\n<li><p><code>=</code> 直接赋值。比如 <code>var a = 5</code>。意思是，把 5 这个值，往 a 里面存一份。简称：把 5 赋值给 a。</p>\n</li>\n<li><p><code>+=</code>：比如 a +&#x3D; 5 等价于 a &#x3D; a + 5。</p>\n</li>\n<li><p><code>-=</code>：比如 a -&#x3D; 5 等价于 a &#x3D; a - 5。</p>\n</li>\n<li><p><code>*=</code>：比如 a _ &#x3D; 5 等价于 a &#x3D; a -5。</p>\n</li>\n<li><p><code>/=</code>：比如 a &#x2F;&#x3D; 5 等价于 a &#x3D; a &#x2F; 5。</p>\n</li>\n<li><p><code>%=</code>：比如 a %&#x3D; 5 等价于 a &#x3D; a % 5。</p>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>（1）算数运算符的优先级高于赋值运算符。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"number\">1</span> + <span class=\"number\">2</span>; <span class=\"comment\">// 先计算 1 + 2，再把计算结果赋值给 result。因为算数运算符的优先级高于赋值运算符。</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）赋值运算符的结合性是右结合性（从右至左的顺序计算）。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1, a2;</span><br><span class=\"line\">a1 = a2 = <span class=\"number\">3</span>; <span class=\"comment\">// 先将 3 复制给 a2，再将 a2 的值赋值给 a1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p>比较运算符可以比较两个值之间的大小关系，如果关系成立它会返回 true，如果关系不成立则返回 false。</p>\n<p>比较运算符有很多种，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;\t大于号</span><br><span class=\"line\">&lt;\t小于号</span><br><span class=\"line\">&gt;= \t大于或等于</span><br><span class=\"line\">&lt;=  小于或等于</span><br><span class=\"line\">== \t等于</span><br><span class=\"line\">=== 全等于</span><br><span class=\"line\">!=\t不等于</span><br><span class=\"line\">!== 不全等于</span><br></pre></td></tr></table></figure>\n\n<p><strong>比较运算符，得到的结果都是布尔值：要么是 true，要么是 false</strong>。如果关系成立，就返回true；如果关系不成立，就返回false。</p>\n<p>举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"number\">5</span> &gt; <span class=\"number\">10</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非数值的比较\"><a href=\"#非数值的比较\" class=\"headerlink\" title=\"非数值的比较\"></a>非数值的比较</h3><p>（1）对于非数值进行比较时，会将其转换为数值类型（内部是调用<code>Number()方法</code>），再进行比较。</p>\n<p>举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span> &gt; <span class=\"literal\">true</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span> &gt;= <span class=\"literal\">true</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span> &gt; <span class=\"string\">&#x27;0&#x27;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//console.log(10 &gt; null); //true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//任何值和NaN做任何比较都是false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">10</span> &lt;= <span class=\"string\">&#x27;hello&#x27;</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> &gt; <span class=\"literal\">false</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）特殊情况：如果参与比较的都是字符串，则<strong>不会</strong>将其转换为数字进行比较，比较的是字符串的<strong>Unicode 编码</strong>。【非常重要，这里是个大坑，很容易踩到】</p>\n<p>比较字符编码时，是一位一位进行比较，顺序从左到右。如果大一样，则继续比较下一位。</p>\n<p>比如说，当你尝试去比较<code>&quot;123&quot;</code>和<code>&quot;56&quot;</code>这两个字符串时，你会发现，字符串”56”竟然比字符串”123”要大（因为 5 比 1 大）。也就是说，下面这样代码的打印结果，其实是 true:（这个我们一定要注意，在日常开发中，很容易忽视）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比较两个字符串时，比较的是字符串的字符编码，所以可能会得到不可预期的结果</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;56&#x27;</span> &gt; <span class=\"string\">&#x27;123&#x27;</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>因此</strong>：当我们想比较两个字符串型的数字时，<strong>一定一定要先转型</strong>再比较大小，比如 <code>parseInt()</code>。</p>\n<p>（3）任何值和 NaN 做任何比较都是 false。</p>\n<h3 id=\"符号的强调\"><a href=\"#符号的强调\" class=\"headerlink\" title=\"==符号的强调\"></a><code>==</code>符号的强调</h3><p><code>==</code>这个符号，它是<strong>判断是否等于</strong>，而不是赋值。注意事项如下：</p>\n<p>（1）<code>== </code>这个符号，还可以验证字符串是否相同。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我爱你中国&#x27;</span> == <span class=\"string\">&#x27;我爱你中国&#x27;</span>); <span class=\"comment\">// 输出结果为true</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>== </code>这个符号并不严谨，会做隐式转换，将不同的数据类型，<strong>转为相同类型</strong>进行比较。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;6&#x27;</span> == <span class=\"number\">6</span>); <span class=\"comment\">// 打印结果：true。这里的字符串&quot;6&quot;会先转换为数字6，然后再进行比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> == <span class=\"string\">&#x27;1&#x27;</span>); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span> == -<span class=\"number\">0</span>); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> == <span class=\"number\">0</span>); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）undefined 衍生自 null，所以这两个值做相等判断时，会返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> == <span class=\"literal\">null</span>); <span class=\"comment\">//打印结果：true。</span></span><br></pre></td></tr></table></figure>\n\n<p>（4）NaN 不和任何值相等，包括它本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">NaN</span> == <span class=\"title class_\">NaN</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">NaN</span> === <span class=\"title class_\">NaN</span>); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>问题：那如果我想判断 b 的值是否为 NaN，该怎么办呢？</p>\n<p>答案：可以通过 isNaN()函数来判断一个值是否是 NaN。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(b));</span><br></pre></td></tr></table></figure>\n\n<p>如上方代码所示，如果 b 为 NaN，则返回 true；否则返回 false。</p>\n<h3 id=\"全等符号的强调\"><a href=\"#全等符号的强调\" class=\"headerlink\" title=\"===全等符号的强调\"></a><code>===</code>全等符号的强调</h3><p><strong>全等在比较时，不会做类型转换</strong>。如果要保证<strong>完全等于</strong>（即：不仅要判断取值相等，还要判断数据类型相同），我们就要用三个等号<code>===</code>。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;6&#x27;</span> === <span class=\"number\">6</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span> === <span class=\"number\">6</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>上述内容分析出：</p>\n<ul>\n<li><p><code>==</code>两个等号，不严谨，”6”和 6 是 true。</p>\n</li>\n<li><p><code>===</code>三个等号，严谨，”6”和 6 是 false。</p>\n</li>\n</ul>\n<p>另外还有：**<code>==</code>的反面是<code>!=</code>，<code>===</code>的反面是<code>!==</code>**。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> != <span class=\"number\">8</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> != <span class=\"string\">&#x27;3&#x27;</span>); <span class=\"comment\">// false，因为3==&quot;3&quot;是true，所以反过来就是false。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> !== <span class=\"string\">&#x27;3&#x27;</span>); <span class=\"comment\">// true，应为3===&quot;3&quot;是false，所以反过来是true。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同数据类型之间的大小比较\"><a href=\"#不同数据类型之间的大小比较\" class=\"headerlink\" title=\"不同数据类型之间的大小比较\"></a>不同数据类型之间的大小比较</h2><p>这一段是比较运算符的延伸，内容繁琐，新手可以不用记，等以后用到的时候再查阅。</p>\n<h3 id=\"数值类型和其他类型比较\"><a href=\"#数值类型和其他类型比较\" class=\"headerlink\" title=\"数值类型和其他类型比较\"></a>数值类型和其他类型比较</h3><p>先将其他类型隐式转换为数值类型（内部是调用<code>Number()</code>方法），然后比较大小。代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串与数字比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;200&#x27;</span> &gt; <span class=\"number\">100</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span> &gt; <span class=\"number\">100</span>); <span class=\"comment\">// false。 &#x27;a&#x27; 被转换成 NaN 进行比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;110a&#x27;</span> &gt; <span class=\"number\">100</span>); <span class=\"comment\">// false。 &#x27;110a&#x27; 被转换成 NaN 进行比较。说明`110a`在做隐式转换的时候，是调用了 Number(&#x27;110a&#x27;)方法，而不是调用  parseInt(&#x27;110a&#x27;)方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 布尔值与数字比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> == <span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">false</span> == <span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null 与数字进行比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> &lt; <span class=\"number\">0</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> == <span class=\"number\">0</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> &gt; <span class=\"number\">0</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> &lt;= <span class=\"number\">0</span>); <span class=\"comment\">// true。这是一个很严重的bug</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> &gt;= <span class=\"number\">0</span>); <span class=\"comment\">// true。同上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined 与数字进行比较：结果都是 false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> &lt; <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> &gt;= <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日期大小比较\"><a href=\"#日期大小比较\" class=\"headerlink\" title=\"日期大小比较\"></a>日期大小比较</h3><p>如果日期的格式为字符串，则比较字符串的<strong>Unicode 编码</strong>。代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myDate1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2022</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myDate2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2022</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myDate3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2022</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myDate4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2023</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate1 &lt; myDate2); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate1 &lt; myDate3); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate3 &lt; myDate4); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date1 = <span class=\"string\">&#x27;2022-08-08&#x27;</span>; <span class=\"comment\">// &quot;2022/08/08&quot;同理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> date2 = <span class=\"string\">&#x27;2022-08-09&#x27;</span>; <span class=\"comment\">// &quot;2022/08/09&quot;同理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> date3 = <span class=\"string\">&#x27;2022-09-08&#x27;</span>; <span class=\"comment\">// &quot;2022/09/08&quot;同理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> date4 = <span class=\"string\">&#x27;2023-08-08&#x27;</span>; <span class=\"comment\">// &quot;2023/08/08&quot;同理</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date1 &lt; date2); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date1 &lt; date3); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date3 &lt; date4); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> time1 = <span class=\"string\">&#x27;2022-08-08 08:00:00&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> time2 = <span class=\"string\">&#x27;2022-08-08 08:00:01&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> time3 = <span class=\"string\">&#x27;2022-08-08 08:01:00&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> time4 = <span class=\"string\">&#x27;2022-08-08 09:00:00&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(time1 &lt; time2); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(time1 &lt; time3); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(time1 &lt; time4); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据类型不同，此处是先将 myDate1 转为字符串类型，然后比较大小。可想而知，结果都是 false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate1 &gt;= date1); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate1 &lt;= date1); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 虽然时间格式不同，但都是字符串，所以可以比较大小</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date1 &lt; time1); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/w390058785/article/details/79957206\">【JavaScript】探究数据类型之间的隐式转换和大小比较</a></li>\n</ul>\n<h2 id=\"逗号运算符\"><a href=\"#逗号运算符\" class=\"headerlink\" title=\"逗号运算符\"></a>逗号运算符</h2><p>逗号运算符一般用于简化代码。逗号运算符的优先级是所有运算符中最低的。</p>\n<p>逗号运算符也是一个运算符, 所以也有运算符结果。它的运算符结果是最后一个表达式的结果。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用逗号运算符同时定义多个变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a, b;</span><br><span class=\"line\"><span class=\"comment\">// 利用逗号运算符同时给多个变量赋值</span></span><br><span class=\"line\">a = <span class=\"number\">10</span>, b = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res1 = (<span class=\"number\">1</span> + <span class=\"number\">2</span>, <span class=\"number\">3</span> + <span class=\"number\">4</span>, <span class=\"number\">5</span> + <span class=\"number\">6</span>); <span class=\"comment\">// 打印结果：11</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h2><p>运算符的优先级如下：（优先级从高到低）</p>\n<ul>\n<li><p><code>.</code>、<code>[]</code>、<code>new</code></p>\n</li>\n<li><p><code>()</code></p>\n</li>\n<li><p><code>++</code>、<code>--</code></p>\n</li>\n<li><p><code>!</code>、<code>~</code>、<code>+</code>（单目）、<code>-</code>（单目）、<code>typeof</code>、<code>void</code>、<code>delete</code></p>\n</li>\n<li><p><code>*</code>、<code>/</code>、<code>%</code></p>\n</li>\n<li><p><code>+</code>（双目）、<code>-</code>（双目）</p>\n</li>\n<li><p><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></p>\n</li>\n<li><p>比较运算符：<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code></p>\n</li>\n<li><p>比较运算符：<code>==</code>、<code>!==</code>、<code>===</code>、<code>!==</code></p>\n</li>\n<li><p><code>&amp;</code></p>\n</li>\n<li><p><code>^</code></p>\n</li>\n<li><p><code>|</code></p>\n</li>\n<li><p>逻辑运算符：<code>&amp;&amp;</code> （注意：逻辑与 <code>&amp;&amp;</code> 比逻辑或 <code>||</code> 的优先级更高）</p>\n</li>\n<li><p>逻辑运算符：<code>||</code></p>\n</li>\n<li><p><code>?:</code></p>\n</li>\n<li><p><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>、<code>|=</code></p>\n</li>\n<li><p><code>,</code></p>\n</li>\n</ul>\n<p>备注：在实际写代码的时候，如果你不清楚哪个优先级更高，可以先尝试把括号用上。</p>\n<h2 id=\"Unicode-编码\"><a href=\"#Unicode-编码\" class=\"headerlink\" title=\"Unicode 编码\"></a>Unicode 编码</h2><blockquote>\n<p>这一段中，我们来讲引申的内容：Unicode 编码的使用。</p>\n</blockquote>\n<p>各位同学可以先在网上查一下“Unicode 编码表”。</p>\n<p>1、在字符串中可以使用转义字符输入 Unicode 编码。格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\u四位编码</span><br></pre></td></tr></table></figure>\n\n<p>举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\u2600&#x27;</span>); <span class=\"comment\">// 这里的 2600 采用的是16进制</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\u2602&#x27;</span>); <span class=\"comment\">// 这里的 2602 采用的是16进制。</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20181222_1218.png\"></p>\n<p>2、我们还可以在 HTML 网页中使用 Unicode 编码。格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;#四位编码;</span><br></pre></td></tr></table></figure>\n\n<p>PS：我们知道，Unicode 编码采用的是 16 进制，但是，这里的编码需要使用 10 进制。</p>\n<p>举例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;font-size: 100px;&quot;</span>&gt;</span><span class=\"symbol\">&amp;#9860;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20181222_1226.png\"></p>\n","text":"运算符的定义和分类运算符的定义运算符：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。表达式：数字、运算符、变量的组合（组成的式子）。表达式最终都会有一个运算结果，我们将这个结果称为表达式的返回值。比如：+、*、/、() 都是运算符，而（3+5）/2","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"09-数据类","slug":"JavaScript/09-数据类型转换","date":"2023-02-15T12:06:59.453Z","updated":"2023-02-15T12:19:59.273Z","comments":true,"path":"api/articles/JavaScript/09-数据类型转换.json","excerpt":"","keywords":null,"cover":"https://img.smyhvae.com/20211116_1458.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>变量的数据类型转换</strong>：将一种数据类型转换为另外一种数据类型。</p>\n<p>通常有三种形式的类型转换：</p>\n<ul>\n<li><p>转换为字符串类型</p>\n</li>\n<li><p>转换为数字型</p>\n</li>\n<li><p>转换为布尔型</p>\n</li>\n</ul>\n<p>把某个数据类型转换成 null 或者 undefined 没有意义。</p>\n<h2 id=\"变量的类型转换的分类\"><a href=\"#变量的类型转换的分类\" class=\"headerlink\" title=\"变量的类型转换的分类\"></a>变量的类型转换的分类</h2><p>类型转换分为两种：显式类型转换、隐式类型转换。</p>\n<h3 id=\"显式类型转换\"><a href=\"#显式类型转换\" class=\"headerlink\" title=\"显式类型转换\"></a>显式类型转换</h3><ul>\n<li><p>toString()</p>\n</li>\n<li><p>String()</p>\n</li>\n<li><p>Number()</p>\n</li>\n<li><p>parseInt(string)</p>\n</li>\n<li><p>parseFloat(string)</p>\n</li>\n<li><p>Boolean()</p>\n</li>\n</ul>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><ul>\n<li><p>isNaN ()</p>\n</li>\n<li><p>自增&#x2F;自减运算符：<code>++</code>、<code>—-</code></p>\n</li>\n<li><p>正号&#x2F;负号：<code>+a</code>、<code>-a</code></p>\n</li>\n<li><p>加号：<code>+</code></p>\n</li>\n<li><p>运算符：<code>-</code>、<code>*</code>、<code>/</code></p>\n</li>\n</ul>\n<h3 id=\"隐式类型转换（特殊）\"><a href=\"#隐式类型转换（特殊）\" class=\"headerlink\" title=\"隐式类型转换（特殊）\"></a>隐式类型转换（特殊）</h3><ul>\n<li><p>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code> 。非布尔值进行<strong>与或</strong>运算时，会先将其转换为布尔值，然后再运算。<code>&amp;&amp;</code>、<code>||</code>的运算结果是<strong>原值</strong>，<code>!</code>的运算结果为布尔值。具体可以看下一篇文章《运算符》。</p>\n</li>\n<li><p>关系运算符：<code>&lt;</code>、<code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code>等。关系运算符，得到的运算结果都是布尔值：要么是 true，要么是 false。具体可以看下一篇文章《运算符》。</p>\n</li>\n</ul>\n<p>针对上面这两种类型转换，这篇文章来详细介绍。</p>\n<h2 id=\"一、转换为-String\"><a href=\"#一、转换为-String\" class=\"headerlink\" title=\"一、转换为 String\"></a>一、转换为 String</h2><h3 id=\"1-调用-toString-方法\"><a href=\"#1-调用-toString-方法\" class=\"headerlink\" title=\"1. 调用 toString()方法\"></a>1. 调用 toString()方法</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">常量.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 这里的常量，不允许是数字，但可以是其它常量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者用一个新的变量接收转换结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = 变量.<span class=\"title function_\">toString</span>();</span><br></pre></td></tr></table></figure>\n\n<p>【重要】该方法<strong>不会影响到原变量</strong>，它会将转换的结果返回。当然我们还可以直接写成<code>a = a.toString()</code>，这样的话，就是直接修改原变量。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"number\">29</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a3 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a4 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a5 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">29</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null 和 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a6 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a7 = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果都是字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;qianguyihao&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a2.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;29&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a3.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a4.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;1,2,3&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a5.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这两个，打印报错</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a6.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 报错：Uncaught TypeError: Cannot read properties of null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a7.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 报错：Uncaught TypeError: Cannot read properties of undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>小技巧：在 chrome 浏览器的控制台中，Number类型、Boolean类型的打印结果是蓝色的，String类型的打印结果是黑色的。</p>\n<p>一起来看看 toString() 的注意事项。</p>\n<p>（1）null 和 undefined 这两个值没有 toString() 方法，所以它们不能用 toString() 。如果调用，会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span>.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span>.<span class=\"title function_\">toString</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img.smyhvae.com/20211116_1458.png\"></p>\n<p>如果你不确定一个值是不是<code>null</code>或<code>undefined</code>，可以使用<code>String()</code>函数，下一小段会讲。</p>\n<p>（2）多数情况下，<code>toString()</code>不接收任何参数；当然也有例外：Number 类型的变量，在调用 toString()时，可以在方法中传递一个整数作为参数。此时它会把数字转换为指定的进制，如果不指定则默认转换为 10 进制。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">255</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Number数值在调用toString()时，可以在方法中传递一个整数作为参数</span></span><br><span class=\"line\"><span class=\"comment\">//此时它将会把数字转换为指定的进制,如果不指定则默认转换为10进制</span></span><br><span class=\"line\">a = a.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 转换为二进制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// &quot;11111111&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）纯小数的小数点后面，如果紧跟连续6个或6个以上的“0”时，那么，将用e来表示这个小数。代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num1 = <span class=\"number\">0.000001</span>; <span class=\"comment\">// 小数点后面紧跟五个零</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 打印结果：&quot;0.000001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> num2 = <span class=\"number\">0.0000001</span>; <span class=\"comment\">// 小数点后面紧跟六个零</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 【重点关注】打印结果：&quot;1e-7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> num3 = <span class=\"number\">1.0000001</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num3.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 打印结果：&quot;1.0000001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> num4 = <span class=\"number\">0.10000001</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num4.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 打印结果：&quot;0.10000001&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>（4）常量可以直接调用 toString() 方法，但这里的常量，不允许是数字。举例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span><span class=\"title function_\">toString</span>(); <span class=\"comment\">// 注意，会报错</span></span><br><span class=\"line\"><span class=\"number\">1.</span>.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 合法。得到的结果是字符串&quot;1&quot;</span></span><br><span class=\"line\"><span class=\"number\">1.2</span>.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 合法。得到的结果是字符串&quot;1.2&quot;</span></span><br><span class=\"line\">(<span class=\"number\">1</span>).<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 合法。得到的结果是字符串&quot;1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，为何出现这样的打印结果？这是因为：</p>\n<ul>\n<li>第一行代码：JS引擎认为<code>1.toString()</code>中的<code>.</code>是小数点，小数点后面的字符是非法的。</li>\n<li>第二行、第三行代码：JS引擎认为第一个<code>.</code>是小数点，第二个<code>.</code>是属性访问的语法，所以能正常解释实行。</li>\n<li>第四行嗲吗：用<code>()</code>排除了<code>.</code>被视为小数点的语法解释，所以这种写法也能正常解释执行。</li>\n</ul>\n<p>参考链接：<a href=\"https://www.jianshu.com/p/88570529a03c\">你不知道的toString方法</a></p>\n<p>（5）既然常量没有方法，那它为什么可以调用 toString()呢？这是因为，除了 null、undefined之外，其他的常量都有对应的特殊的引用类型——<strong>基本包装类型</strong>，所以代码在解释执行的时候，会将常量转为基本包装类型，这样就可以调用相应的引用类型的方法。</p>\n<p>我们在后续的内容《JavaScritpt基础&#x2F;基本包装类型》中会专门讲到基本包装类型。</p>\n<h3 id=\"2-使用-String-函数\"><a href=\"#2-使用-String-函数\" class=\"headerlink\" title=\"2. 使用 String()函数\"></a>2. 使用 String()函数</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>(变量/常量);</span><br></pre></td></tr></table></figure>\n\n<p>使用 String()函数做强制类型转换时：</p>\n<ul>\n<li>对于 Number、Boolean、String、Object 而言，本质上就是调用 toString()方法，返回结果同 toString()方法。</li>\n<li>但是对于 null 和 undefined，则不会调用 toString()方法。它会将 null 直接转换为 “null”。将 undefined 直接转换为 “undefined”。</li>\n</ul>\n<p>该方法<strong>不会影响到原数值</strong>，它会将转换的结果返回。</p>\n<h3 id=\"3-隐式类型转换：字符串拼接\"><a href=\"#3-隐式类型转换：字符串拼接\" class=\"headerlink\" title=\"3. 隐式类型转换：字符串拼接\"></a>3. 隐式类型转换：字符串拼接</h3><p>格式：变量+”” 或者 变量+”abc”</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>; <span class=\"comment\">// Number 类型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + <span class=\"string\">&#x27;&#x27;</span>); <span class=\"comment\">// 打印结果：&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + <span class=\"string\">&#x27;haha&#x27;</span>); <span class=\"comment\">// 打印结果：&quot;123haha&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，打印的结果，都是字符串类型的数据。实际上底层是调用的 String() 函数。</p>\n<h3 id=\"prompt-：用户的输入\"><a href=\"#prompt-：用户的输入\" class=\"headerlink\" title=\"prompt()：用户的输入\"></a>prompt()：用户的输入</h3><p>我们在前面的《JavaScript基础&#x2F;02-JavaScript书写方式：hello world》就讲过，<code>prompt()</code>就是专门用来弹出能够让用户输入的对话框。重要的是：用户不管输入什么，都当字符串处理。</p>\n<h2 id=\"二、转换为-Number\"><a href=\"#二、转换为-Number\" class=\"headerlink\" title=\"二、转换为 Number\"></a>二、转换为 Number</h2><h3 id=\"1-使用-Number-函数\"><a href=\"#1-使用-Number-函数\" class=\"headerlink\" title=\"1. 使用 Number() 函数\"></a>1. 使用 Number() 函数</h3><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title class_\">Number</span>(变量/常量);</span><br></pre></td></tr></table></figure>\n\n<p><strong>情况一：字符串 –&gt; 数字</strong></p>\n<p>（1）如果字符串中是纯数字，则直接将其转换为数字。</p>\n<p>（2）如果字符串是一个<strong>空串</strong>或者是一个<strong>全是空格</strong>的字符串，则转换为 0。</p>\n<p>（3）只要字符串中包含了其他非数字的内容（<code>小数点</code>按数字来算），则转换为 NaN。怎么理解这里的 <strong>NaN</strong> 呢？可以这样理解，使用 Number() 函数之后，<strong>如果无法转换为数字，就会转换为 NaN</strong>。</p>\n<p><strong>情况二：布尔 –&gt; 数字</strong></p>\n<p>（1）true 转成 1</p>\n<p>（2）false 转成 0</p>\n<p><strong>情况三：null –&gt; 数字</strong>，结果为：0</p>\n<p><strong>情况四：undefined –&gt; 数字</strong>，结果为：NaN</p>\n<h3 id=\"2-隐式类型转换：正负号-a、-a\"><a href=\"#2-隐式类型转换：正负号-a、-a\" class=\"headerlink\" title=\"2. 隐式类型转换：正负号 +a、-a\"></a>2. 隐式类型转换：正负号 <code>+a</code>、<code>-a</code></h3><blockquote>\n<p>注意，这里说的是正号&#x2F;负号，不是加号&#x2F;减号。</p>\n</blockquote>\n<p>任何值做<code>+a</code>、<code>-a</code>运算时， 底层调用的是 Number() 函数。不会改变原数值；得到的结果，会改变正负性。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a1); <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a1); <span class=\"comment\">// -123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = <span class=\"string\">&#x27;123abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a2); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a2); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a3 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a3); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a3); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a4 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a4); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a4); <span class=\"comment\">// -0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a5 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a5); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a5); <span class=\"comment\">// -0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a6 = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a6); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a6); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用-parseInt-函数：字符串-gt-整数\"><a href=\"#3-使用-parseInt-函数：字符串-gt-整数\" class=\"headerlink\" title=\"3. 使用 parseInt()函数：字符串 -&gt; 整数\"></a>3. 使用 parseInt()函数：字符串 -&gt; 整数</h3><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"built_in\">parseInt</span>(需要转换的字符串)</span><br></pre></td></tr></table></figure>\n\n<p><strong>parseInt()<strong>：将传入的数据当作</strong>字符串</strong>来处理，从左至右提取数值，一旦遇到非数值就立即停止；停止时如果还没有提取到数值，就返回NaN。</p>\n<p>parse 表示“转换”，Int 表示“整数”。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;5&#x27;</span>); <span class=\"comment\">// 得到的结果是数字 5</span></span><br></pre></td></tr></table></figure>\n\n<p>按照上面的规律，parseInt()的转换结果，列举如下。</p>\n<p><strong>情况一：字符串 –&gt; 数字</strong></p>\n<p>（1）<strong>只保留字符串最开头的数字</strong>，后面的中文自动消失。</p>\n<p>（2）如果字符串不是以数字开头，则转换为 NaN。</p>\n<p>（3）如果字符串是一个空串或者是一个全是空格的字符串，转换时会报错。</p>\n<p><strong>情况二：Boolean –&gt; 数字</strong>，结果为：NaN</p>\n<p><strong>情况三：Null –&gt; 数字</strong>，结果为：NaN</p>\n<p><strong>情况四：Undefined –&gt; 数字</strong>，结果为：NaN</p>\n<hr>\n<p>Number() 函数和 parseInt() 函数的区别：</p>\n<p>就拿<code>Number(true)</code> 和 <code>parseInt(true)/parseFloat(true)</code>来举例，二者在使用时，是有区别的：</p>\n<ul>\n<li><p>Number(true) ：千方百计地想转换为数字；如果转换不了则返回 NaN。</p>\n</li>\n<li><p>parseInt(true)&#x2F;parseFloat(true) ：提取出最前面的数字部分；没提取出来，那就返回 NaN。</p>\n</li>\n</ul>\n<p><strong>parseInt()具有以下特性</strong>：</p>\n<p>（1）parseInt()、parseFloat()会将传入的数据当作<strong>字符串</strong>来处理。也就是说，如果对<strong>非 String</strong>使用 parseInt()、parseFloat()，它会<strong>先将其转换为 String</strong> 然后再操作。【重要】</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">168.23</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(a)); <span class=\"comment\">//打印结果：168  （因为是先将 a 转为字符串&quot;168.23&quot;，然后然后再操作）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(b)); <span class=\"comment\">//打印结果：NaN （因为是先将 b 转为字符串&quot;true&quot;，然后然后再操作）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(c)); <span class=\"comment\">//打印结果：NaN  （因为是先将 c 转为字符串&quot;null&quot;，然后然后再操作）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(d)); <span class=\"comment\">//打印结果：NaN  （因为是先将 d 转为字符串&quot;undefined&quot;，然后然后再操作）</span></span><br></pre></td></tr></table></figure>\n\n\n<p>（2）<strong>只保留字符串最开头的数字</strong>，后面的中文自动消失。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;2017在公众号上写了6篇文章&#x27;</span>)); <span class=\"comment\">//打印结果：2017</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;2017.01在公众号上写了6篇文章&#x27;</span>)); <span class=\"comment\">//打印结果仍是：2017   （说明只会取整数）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;aaa2017.01在公众号上写了6篇文章&#x27;</span>)); <span class=\"comment\">//打印结果：NaN （因为不是以数字开头）</span></span><br></pre></td></tr></table></figure>\n\n\n<p>（3）自动截断小数：<strong>取整，不四舍五入</strong>。</p>\n<p>例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">parseInt</span>(<span class=\"number\">5.8</span>) + <span class=\"built_in\">parseInt</span>(<span class=\"number\">4.7</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n\n<p>例 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">parseInt</span>(<span class=\"number\">5.8</span> + <span class=\"number\">4.7</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<p>（4）带两个参数时，表示在转换时，包含了进制转换。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;110&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(a, <span class=\"number\">16</span>); <span class=\"comment\">// 【重要】将 a 当成 十六进制 来看待，转换成 十进制 的 num</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">272</span><br></pre></td></tr></table></figure>\n\n<p>如果你对打印结果感到震惊，请仔细看上面的代码注释。就是说，无论 parseInt() 里面的进制参数是多少，最终的转换结果是十进制。</p>\n<p>我们来看下面的代码，打印结果继续震惊。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;5&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(a, <span class=\"number\">2</span>); <span class=\"comment\">// 将 a 当成 二进制 来看待，转换成 十进制 的 num</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">// 打印结果：NaN。因为 二进制中没有 5 这个数，转换失败。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-parseFloat-函数：字符串-–-gt-浮点数（小数）\"><a href=\"#4-parseFloat-函数：字符串-–-gt-浮点数（小数）\" class=\"headerlink\" title=\"4. parseFloat()函数：字符串 –&gt; 浮点数（小数）\"></a>4. parseFloat()函数：字符串 –&gt; 浮点数（小数）</h3><p>parseFloat()的作用是：将字符串转换为<strong>浮点数</strong>。</p>\n<p>parseFloat()和 parseInt()的作用类似，不同的是，parseFloat()可以获得小数部分。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;123.456.789px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseFloat</span>(a)); <span class=\"comment\">// 打印结果：123.456</span></span><br></pre></td></tr></table></figure>\n\n<p>parseFloat() 的几个特性，可以参照 parseInt()。</p>\n<h2 id=\"三、转换为-Boolean\"><a href=\"#三、转换为-Boolean\" class=\"headerlink\" title=\"三、转换为 Boolean\"></a>三、转换为 Boolean</h2><h3 id=\"转换结果列举【重要】\"><a href=\"#转换结果列举【重要】\" class=\"headerlink\" title=\"转换结果列举【重要】\"></a>转换结果列举【重要】</h3><p>其他的数据类型都可以转换为 Boolean 类型。无论是隐式转换，还是显示转换，转换结果都是一样的。有下面几种情况：</p>\n<p>（1）情况一：数字 –&gt; 布尔。 0 和 NaN的转换结果 false，其余的都是 true。比如 <code>Boolean(NaN)</code>的结果是 false。</p>\n<p>（2）情况二：字符串 —&gt; 布尔。空串的转换结果是false，其余的都是 true。全是空格的字符串，转换结果也是 true。字符串<code>&#39;0&#39;</code>的转换结果也是 true。</p>\n<p>（3）情况三：null 和 undefined 都会转换为 false。</p>\n<p>（4）情况四：引用数据类型会转换为 true。注意，空数组<code>[]</code>和空对象<code>&#123;&#125;</code>，<strong>转换结果也是 true</strong>，这一点，很多人都不知道。</p>\n<p><strong>重中之重来了：</strong></p>\n<p>转换为 Boolean 的上面这几种情况，<strong>极其重要</strong>，开发中会频繁用到。比如说，我们在项目开发中，经常需要对一些<strong>非布尔值</strong>做逻辑判断，符合条件后，才做下一步的事情。这个逻辑判断就是依据上面的四种情况。</p>\n<p>举例：（接口返回的内容不为空，前端才做进一步的事情）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result1 = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = &#123; <span class=\"attr\">a</span>: <span class=\"string\">&#x27;data1&#x27;</span>, <span class=\"attr\">b</span>: <span class=\"string\">&#x27;data2&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (result1) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;因为 result1的内容为空，所以代码进不了这里&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (result2 &amp;&amp; result2.<span class=\"property\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接口返回了 result2，且 result2.a 里面有值，前端才做进一步的事情</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;代码能进来，前端继续在这里干活儿&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里再次强调一下，空数组<code>[]</code>和空对象<code>&#123;&#125;</code>转换为 Boolean 值时，转换结果为 true。</p>\n<h3 id=\"1-隐式类型转换：逻辑运算\"><a href=\"#1-隐式类型转换：逻辑运算\" class=\"headerlink\" title=\"1. 隐式类型转换：逻辑运算\"></a>1. 隐式类型转换：逻辑运算</h3><p>当非 Boolean 类型的数值和 Boolean 类型的数值做比较时，会先把前者<strong>临时</strong>进行隐式转换为 Boolean 类型，然后再做比较；且不会改变前者的数据类型。举例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == <span class=\"literal\">true</span>); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果：number。可见，上面一行代码里，a 做了隐式类型转换，但是 a 的数据类型并没有发生变化，仍然是 Number 类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span> == <span class=\"literal\">true</span>); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用 !!\"></a>2. 使用 <code>!!</code></h3><p>使用 <code>!!</code>可以显式转换为 Boolean 类型。比如 <code>!!3</code>的结果是 true。</p>\n<h3 id=\"3-使用-Boolean-函数\"><a href=\"#3-使用-Boolean-函数\" class=\"headerlink\" title=\"3. 使用  Boolean()函数\"></a>3. 使用  Boolean()函数</h3><p>使用 Boolean()函数可以显式转换为 Boolean 类型。</p>\n<h2 id=\"知识补充：其他进制的数字\"><a href=\"#知识补充：其他进制的数字\" class=\"headerlink\" title=\"知识补充：其他进制的数字\"></a>知识补充：其他进制的数字</h2><ul>\n<li><p>16 进制的数字，以<code>0x</code>开头</p>\n</li>\n<li><p>8 进制的数字，以<code>0</code>开头</p>\n</li>\n<li><p>2 进制的数字，<code>0b</code>开头（不是所有的浏览器都支持：chrome 和火狐支持，IE 不支持）</p>\n</li>\n</ul>\n<p>比如<code>070</code>这个字符串，如果我调用 parseInt()转成数字时，有些浏览器会当成 8 进制解析，有些会当成 10 进制解析。</p>\n<p>所以，比较建议的做法是：可以在 parseInt()中传递第二个参数，来指定当前数字的进制。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;070&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"built_in\">parseInt</span>(a, <span class=\"number\">8</span>); <span class=\"comment\">//将 070 当成八进制来看待，转换结果为十进制。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：56。这个地方要好好理解。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"隐式类型转换-1\"><a href=\"#隐式类型转换-1\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h2><p>重点：<strong>隐式类型转换，内部调用的都是显式类型的方法</strong>。</p>\n<p>常见的隐式类型转换，包括下面这几种：</p>\n<ul>\n<li><p>isNaN() 函数</p>\n</li>\n<li><p>运算符：加号 <code>+</code></p>\n</li>\n<li><p>运算符：<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></p>\n</li>\n<li><p>运算符：正号&#x2F;负号 +a<code>、</code>-a&#96;</p>\n</li>\n<li><p>自增&#x2F;自减运算符：<code>++</code>、<code>—-</code></p>\n</li>\n</ul>\n<p>本段先来讲一下 isNaN() ，其他内容，将在下一节《JavaScript基础&#x2F;运算符》中讲到。</p>\n<h3 id=\"isNaN-函数\"><a href=\"#isNaN-函数\" class=\"headerlink\" title=\"isNaN() 函数\"></a>isNaN() 函数</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(参数);</span><br></pre></td></tr></table></figure>\n\n<p>解释：判断指定的参数是否为 NaN（非数字类型），返回结果为 Boolean 类型。也就是说：<strong>任何不能被转换为数值的参数，都会让这个函数返回 true</strong>。</p>\n<p><strong>执行过程</strong>：</p>\n<p>（1）先调用<code>Number(参数)</code>函数；</p>\n<p>（2）然后将<code>Number(参数)</code>的返回结果是否为数值。如果不为数值，则最终结果为 true；如果为数值，则最终结果为 false。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;123&#x27;</span>)); <span class=\"comment\">// 返回结果：false。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">null</span>)); <span class=\"comment\">// 返回结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;abc&#x27;</span>)); <span class=\"comment\">// 返回结果：true。因为 Number(&#x27;abc&#x27;) 的返回结果是 NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// 返回结果：true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"title class_\">NaN</span>)); <span class=\"comment\">// 返回结果：true</span></span><br></pre></td></tr></table></figure>\n\n","text":"前言变量的数据类型转换：将一种数据类型转换为另外一种数据类型。通常有三种形式的类型转换：转换为字符串类型转换为数字型转换为布尔型把某个数据类型转换成 null 或者 undefined 没有意义。变量的类型转换的分类类型转换分为两种：显式类型转换、隐式类型转换。显式类型转换toS","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"08-基本数据类型：Null 和 Undefined","slug":"JavaScript/08-基本数据类型：Null 和 Undefined","date":"2023-02-15T12:06:59.451Z","updated":"2023-02-15T12:18:51.775Z","comments":true,"path":"api/articles/JavaScript/08-基本数据类型：Null 和 Undefined.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<p>很多其他的语言中，只有 null；但 JS 语言中，既有 null，又有 undefined。</p>\n<h2 id=\"Null：空对象\"><a href=\"#Null：空对象\" class=\"headerlink\" title=\"Null：空对象\"></a>Null：空对象</h2><p>null 专门用来定义一个<strong>空对象</strong>。例如：<code>let a = null</code>，又例如 <code>Object.create(null)</code>.</p>\n<p>如果你想定义一个变量用来保存引用类型，但是还没想好放什么内容，这个时候，可以在初始化时将其设置为 null。你可以把 null 理解为：<strong>null 虽然是一个单独的数据类型，但null 相当于是一个 object，只不过地址为空（空指针）而已</strong>。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myObj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">cosole.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> myObj); <span class=\"comment\">// 打印结果：object</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：</p>\n<ul>\n<li><p>Null 类型的值只有一个，就是 null。比如 <code>let a = null</code>。</p>\n</li>\n<li><p>从语义上讲，null表示一个空对象，所以使用 typeof 检查一个 null 值时，会返回 object。</p>\n</li>\n</ul>\n<h2 id=\"undefined：未定义类型\"><a href=\"#undefined：未定义类型\" class=\"headerlink\" title=\"undefined：未定义类型\"></a>undefined：未定义类型</h2><h3 id=\"case1：变量已声明，未赋值时\"><a href=\"#case1：变量已声明，未赋值时\" class=\"headerlink\" title=\"case1：变量已声明，未赋值时\"></a>case1：变量已声明，未赋值时</h3><p><strong>声明</strong>了一个变量，但没有<strong>赋值</strong>，此时它的值就是 <code>undefined</code>。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 打印结果：undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> name); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：</p>\n<ul>\n<li><p>Undefined 类型的值只有一个，就是 undefind。比如 <code>let a = undefined</code>。</p>\n</li>\n<li><p>使用 typeof 检查一个 undefined 值时，会返回 undefined。</p>\n</li>\n</ul>\n<h3 id=\"case2：变量未声明（未定义）时\"><a href=\"#case2：变量未声明（未定义）时\" class=\"headerlink\" title=\"case2：变量未声明（未定义）时\"></a>case2：变量未声明（未定义）时</h3><p>如果你从未声明一个变量，就去使用它，则会报错（这个大家都知道）；此时，如果用 <code>typeof</code> 检查这个变量时，会返回 <code>undefined</code>。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"case3：函数无返回值时\"><a href=\"#case3：函数无返回值时\" class=\"headerlink\" title=\"case3：函数无返回值时\"></a>case3：函数无返回值时</h3><p>如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。</p>\n<p>或者，也可以这样理解：在定义一个函数时，如果末尾没有 return 语句，那么，其实就是 <code>return undefined</code>。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">foo</span>()); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"case4：调用函数时，未传参\"><a href=\"#case4：调用函数时，未传参\" class=\"headerlink\" title=\"case4：调用函数时，未传参\"></a>case4：调用函数时，未传参</h3><p>调用函数时，如果没有传参，那么，这个参数的值就是 undefined。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// 调用函数时，未传参。执行函数后的打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>实际开发中，如果调用函数时没有传参，我们可以根据需要给形参设置一个默认值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    name = name || <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>等学习了 ES6 之后，上方代码也可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name = <span class=\"string\">&#x27;qianguyihao&#x27;</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h2><p>undefined 实际上是由 null 衍生出来的，所以<code>null == undefined</code>的结果为 true。</p>\n<p>但是 <code>null === undefined</code> 的结果是 false。它们虽然相似，但还是有区别的，其中一个区别是，和数字运算时：</p>\n<ul>\n<li><p>10 + null 结果为 10。</p>\n</li>\n<li><p>10 + undefined 结果为 NaN。</p>\n</li>\n</ul>\n<p>规律总结：</p>\n<ul>\n<li><p>任何值和 null 运算，null 可看做 0 运算。</p>\n</li>\n<li><p>任何数据类型和 undefined 运算都是 NaN。</p>\n</li>\n</ul>\n","text":"很多其他的语言中，只有 null；但 JS 语言中，既有 null，又有 undefined。Null：空对象null 专门用来定义一个空对象。例如：let a = null，又例如 Object.create(null).如果你想定义一个变量用来保存引用类型，但是还没想好放什么","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"07-基本数据类型：Number","slug":"JavaScript/07-基本数据类型：Number","date":"2023-02-15T12:06:59.449Z","updated":"2023-02-15T12:18:15.941Z","comments":true,"path":"api/articles/JavaScript/07-基本数据类型：Number.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"数值型：Number\"><a href=\"#数值型：Number\" class=\"headerlink\" title=\"数值型：Number\"></a>数值型：Number</h2><p>在 JS 中所有的数值都是 Number 类型，包括整数和浮点数（小数）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>; <span class=\"comment\">// 定义一个变量 a，并且赋值整数100</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 输出变量 a 的类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">12.3</span>; <span class=\"comment\">// 定义一个变量 b，并且赋值浮点数 12.3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number</span><br><span class=\"line\"></span><br><span class=\"line\">number</span><br></pre></td></tr></table></figure>\n\n<p>再次补充：在 JS 中，只要是数，就是 Number 数值型的。无论整浮、浮点数（即小数）、无论大小、无论正负，都是 Number 类型的。</p>\n<h3 id=\"数值范围\"><a href=\"#数值范围\" class=\"headerlink\" title=\"数值范围\"></a>数值范围</h3><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。</p>\n<ul>\n<li><p>最大值：<code>Number.MAX_VALUE</code>，这个值为： 1.7976931348623157e+308</p>\n</li>\n<li><p>最小值：<code>Number.MIN_VALUE</code>，这个值为： 5e-324</p>\n</li>\n</ul>\n<p>如果使用 Number 表示的变量超过了最大值，则会返回 Infinity。</p>\n<ul>\n<li><p>无穷大（正无穷）：Infinity</p>\n</li>\n<li><p>无穷小（负无穷）：-Infinity</p>\n</li>\n</ul>\n<p>注意：<code>typeof Infinity</code>的返回结果是 number。</p>\n<h3 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h3><p><strong>NaN</strong>：是一个特殊的数字，表示 Not a Number，非数值。在进行数值运算时，如果得不到正常结果，就会返回 NaN。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;abc&#x27;</span> / <span class=\"number\">18</span>); <span class=\"comment\">//结果是NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;abc&#x27;</span> * <span class=\"string\">&#x27;abcd&#x27;</span>); <span class=\"comment\">//按理说，字符串相乘是没有结果的，但如果你非要让JS去算，它就一定会给你一个结果，结果是NaN。</span></span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<ol>\n<li><p><code>typeof NaN</code>的返回结果是 number。</p>\n</li>\n<li><p><strong>Undefined 和任何数值计算的结果为 NaN。NaN 与任何值都不相等，包括 NaN 本身。</strong></p>\n</li>\n<li><p>关于 isNaN() 函数，可以看后续的文章《JavaScript基础&#x2F;typeof和数据类型转换》。</p>\n</li>\n</ol>\n<h3 id=\"连字符和加号的区别\"><a href=\"#连字符和加号的区别\" class=\"headerlink\" title=\"连字符和加号的区别\"></a>连字符和加号的区别</h3><p>键盘上的<code>+</code>可能是连字符，也可能是数字的加号。如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&quot;我&quot; + &quot;爱&quot; + &quot;你&quot;);\t//连字符，把三个独立的汉字，连接在一起了</span><br><span class=\"line\">console.log(&quot;我+爱+你&quot;);\t\t\t//原样输出</span><br><span class=\"line\">console.log(1+2+3);\t\t\t\t//输出6</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我爱你</span><br><span class=\"line\">我+爱+你</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：如果加号两边<strong>都是</strong> Number 类型，此时是数字相加。否则，就是连字符（用来连接字符串）。</p>\n<p>举例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<p>举例 2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">var b = 2;</span><br><span class=\"line\">console.log(&quot;a&quot; + b);\t//&quot;a&quot;就不是变量了！所以就是&quot;a&quot;+2 输出a2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a2</span><br></pre></td></tr></table></figure>\n\n<p>于是我们明白了，在变量中加入字符串进行拼接，可以被同化为字符串。【重要】</p>\n<h3 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><p>我们知道，<code>&quot;2&quot;+1</code>得到的结果其实是字符串，但是<code>&quot;2&quot;-1</code>得到的结果却是数值 1，这是因为计算机自动帮我们进行了“<strong>隐式转换</strong>”。</p>\n<p>也就是说，<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>这几个符号会自动进行隐式转换。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;4&#x27;</span> + <span class=\"number\">3</span> - <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">37</span>;</span><br></pre></td></tr></table></figure>\n\n<p>虽然程序可以对<code>-</code>、<code>*</code>、<code>/</code>、&#96;%&#96;&#96;这几个符号自动进行“隐式转换”；但作为程序员，我们最好自己完成转换，方便程序的可读性。</p>\n<p>关于隐式转换的详细内容，可以看后续的文章《JavaScript基础&#x2F;typeof和数据类型转换》。</p>\n<h2 id=\"浮点数的运算\"><a href=\"#浮点数的运算\" class=\"headerlink\" title=\"浮点数的运算\"></a>浮点数的运算</h2><h3 id=\"运算精度问题\"><a href=\"#运算精度问题\" class=\"headerlink\" title=\"运算精度问题\"></a>运算精度问题</h3><p>在 JS 中，整数的运算<strong>基本</strong>可以保证精确；但是<strong>小数的运算，可能会得到一个不精确的结果</strong>。所以，千万不要使用 JS 进行对精确度要求比较高的运算。</p>\n<p>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//打印结果十分意外：0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，打印结果并不是 0.3，而是 0.30000000000000004。</p>\n<p>这是因为，计算机在做运算时，所有的运算都要转换成二进制去计算。然而，有些数字转换成二进制之后，无法精确表示。比如说，0.1 和 0.2 转换成二进制之后，是无穷的，因此存在浮点数的计算不精确的问题。</p>\n<h3 id=\"处理数学运算的精度问题\"><a href=\"#处理数学运算的精度问题\" class=\"headerlink\" title=\"处理数学运算的精度问题\"></a>处理数学运算的精度问题</h3><p>如果只是一些简单的精度问题，可以使用 <code>toFix()</code> 方法进行小数的截取。备注：关于 <code>toFixed()</code>方法， 详见《JavaScript 基础&#x2F;内置对象：Number 和 Math》。</p>\n<p>在实战开发中，关于浮点数计算的精度问题，往往比较复杂。市面上有很多针对数学运算的开源库，比如<a href=\"https://github.com/MikeMcl/decimal.js/\">decimal.js</a>、 <a href=\"https://github.com/josdejong/mathjs\">Math.js</a>。这些开源库都比较成熟，我们可以直接拿来用。</p>\n<ul>\n<li><p>Math.js：属于很全面的运算库，文件很大，压缩后的文件就有 500kb。如果你的项目涉及到大型的复杂运算，可以使用 Math.js。</p>\n</li>\n<li><p>decimal.js：属于轻量的运算库，压缩后的文件只有 32kb。大多数项目的数学运算，使用 decimal.js 足够了。</p>\n</li>\n</ul>\n<p>在使用这几个开源库时，既可以用 cdn 的方式引入，也可以用 npm 包的方式引入。</p>\n<p>比如说，通过 cdn 的方式引入 decimal.js 时，可以这样用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/decimal.js/10.2.0/decimal.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;加法：&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> a = <span class=\"number\">0.1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> b = <span class=\"number\">0.2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(a).<span class=\"title function_\">add</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(b)).<span class=\"title function_\">toNumber</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;减法：&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> a = <span class=\"number\">1.0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> b = <span class=\"number\">0.7</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a - b);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(a).<span class=\"title function_\">sub</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(b)).<span class=\"title function_\">toNumber</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;乘法：&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> a = <span class=\"number\">1.01</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> b = <span class=\"number\">1.003</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a * b);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(a).<span class=\"title function_\">mul</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(b)).<span class=\"title function_\">toNumber</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;除法：&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> a = <span class=\"number\">0.029</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> b = <span class=\"number\">10</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a / b);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(a).<span class=\"title function_\">div</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(b)).<span class=\"title function_\">toNumber</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加法：</span><br><span class=\"line\">0.30000000000000004</span><br><span class=\"line\">0.3</span><br><span class=\"line\"></span><br><span class=\"line\">减法：</span><br><span class=\"line\">0.30000000000000004</span><br><span class=\"line\">0.3</span><br><span class=\"line\"></span><br><span class=\"line\">乘法：</span><br><span class=\"line\">1.0130299999999999</span><br><span class=\"line\">1.01303</span><br><span class=\"line\"></span><br><span class=\"line\">除法：</span><br><span class=\"line\">0.0029000000000000002</span><br><span class=\"line\">0.0029</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<ul>\n<li><p><a href=\"https://www.bloghome.com.cn/post/nodejsxue-xi-bi-ji-shi-qi-fu-dian-yun-suan-decimal-js.html\">https://www.bloghome.com.cn/post/nodejsxue-xi-bi-ji-shi-qi-fu-dian-yun-suan-decimal-js.html</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/62381711\">https://zhuanlan.zhihu.com/p/62381711</a></p>\n</li>\n</ul>\n<h2 id=\"变量值的传递（赋值）\"><a href=\"#变量值的传递（赋值）\" class=\"headerlink\" title=\"变量值的传递（赋值）\"></a>变量值的传递（赋值）</h2><p>语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b;</span><br></pre></td></tr></table></figure>\n\n<p>把 b 的值赋给 a，b 不变。</p>\n<p>将等号右边的值，赋给左边的变量；等号右边的变量，值不变。</p>\n<p>来做几个题目。</p>\n<p>举例 1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a\t\tb       c</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; <span class=\"comment\">// 1     2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>; <span class=\"comment\">// 1     2       3</span></span><br><span class=\"line\">a = b + c; <span class=\"comment\">// 5     2       3</span></span><br><span class=\"line\">b = c - a; <span class=\"comment\">// 5     -2      3</span></span><br><span class=\"line\">c = a * b; <span class=\"comment\">// 5     -2      -10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c);</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">-2</span><br><span class=\"line\">-10</span><br></pre></td></tr></table></figure>\n\n<p>举例 2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a    b     c</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>; <span class=\"comment\">// 1     2     3</span></span><br><span class=\"line\">a = a + b; <span class=\"comment\">// 3     2     3</span></span><br><span class=\"line\">b = b + a; <span class=\"comment\">// 3     5     3</span></span><br><span class=\"line\">c = c + b; <span class=\"comment\">// 3     5     8</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n\n<p>举例 3：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a       b</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; <span class=\"comment\">// &quot;1&quot;     2</span></span><br><span class=\"line\">a = a + b; <span class=\"comment\">// &quot;12&quot;    2</span></span><br><span class=\"line\">b = b + a; <span class=\"comment\">// &quot;12&quot;    &quot;212&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出12</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出212</span></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12</span><br><span class=\"line\">212</span><br></pre></td></tr></table></figure>\n\n<p>举例 4：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a         b</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">a = b + a; <span class=\"comment\">//&quot;21&quot;       2</span></span><br><span class=\"line\">b = b + a; <span class=\"comment\">//&quot;21&quot;       &quot;221&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//21</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">//221</span></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21</span><br><span class=\"line\">221</span><br></pre></td></tr></table></figure>\n\n<p>举例 5：（这个例子比较特殊，字符串减去数字）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a - b);</span><br></pre></td></tr></table></figure>\n\n<p>效果：（注意，字符串 - 数值 &#x3D; 数值）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n","text":"数值型：Number在 JS 中所有的数值都是 Number 类型，包括整数和浮点数（小数）。1<br>2<br>3<br>4<br>5<br>var a = 100; // 定义一个变量 a，并且赋值整数100<br>console.log(typeof a); // 输出变量","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"06-基本数据类型：String 和 Boolean","slug":"JavaScript/06-基本数据类型：String 和 Boolean","date":"2023-02-15T12:06:59.447Z","updated":"2023-02-15T12:17:43.488Z","comments":true,"path":"api/articles/JavaScript/06-基本数据类型：String 和 Boolean.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20200825_2016.png","content":"<p>详细介绍基本数据类型：</p>\n<h2 id=\"String-字符串\"><a href=\"#String-字符串\" class=\"headerlink\" title=\"String 字符串\"></a>String 字符串</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>字符串型可以是引号中的任意文本，其语法为：双引号 <code>&quot;&quot;</code> 或者单引号 <code>&#39;&#39;</code>。</p>\n<p>来看个示例。下面的这些，都是字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abcde&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;千古壹号&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">&#x27;123123&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"string\">&#x27;哈哈哈哈哈&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">//空字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = haha; <span class=\"comment\">// 没使用引号，到这里会直接报错。因为会被认为是js代码，但是之前并没有定义 haha。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> b);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> c);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> d);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> e);</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string</span><br><span class=\"line\">string</span><br><span class=\"line\">string</span><br><span class=\"line\">string</span><br><span class=\"line\">string</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引号的注意事项\"><a href=\"#引号的注意事项\" class=\"headerlink\" title=\"引号的注意事项\"></a>引号的注意事项</h3><p>1、单引号和双引号不能混用。比如下面这样写是不可以的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;hello&quot;;  // 报错：Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure>\n\n<p>2、同类引号不能嵌套：双引号里不能再放双引号，单引号里不能再放单引号。</p>\n<p>3、单引号里可以嵌套双引号；双引号里可以嵌套单引号。</p>\n<h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><p>在字符串中我们可以使用<code>\\</code>作为转义字符，当表示一些特殊符号时可以使用<code>\\</code>进行转义。</p>\n<ul>\n<li><p><code>\\&quot;</code> 表示 <code>&quot;</code> 双引号</p>\n</li>\n<li><p><code>\\&#39;</code> 表示 <code>&#39;</code> 单引号</p>\n</li>\n<li><p><code>\\\\</code> 表示<code>\\</code></p>\n</li>\n<li><p><code>\\r</code> 表示回车</p>\n</li>\n<li><p><code>\\n</code> 表示换行。n 的意思是 newline。</p>\n</li>\n<li><p><code>\\t</code> 表示缩进。t 的意思是 tab。</p>\n</li>\n<li><p><code>\\b</code> 表示空格。b 的意思是 blank。</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;我说:&quot;今天\\t天气真不错！&quot;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;\\\\\\\\\\\\&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2);</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我说:&quot;今天\t天气真不错！&quot;</span><br><span class=\"line\">\\\\\\</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取字符串的长度\"><a href=\"#获取字符串的长度\" class=\"headerlink\" title=\"获取字符串的长度\"></a>获取字符串的长度</h3><p>字符串是由若干个字符组成的，这些字符的数量就是字符串的长度。我们可以通过字符串的 length 属性可以获取整个字符串的长度。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;千古壹号&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;千古壹号，永不止步！&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str4 = <span class=\"string\">&#x27;qianguyihao, keep moving!&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str1.<span class=\"property\">length</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"property\">length</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3.<span class=\"property\">length</span>); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str4.<span class=\"property\">length</span>); <span class=\"comment\">// 25</span></span><br></pre></td></tr></table></figure>\n\n<p>由此可见，字符串的 length 属性，在判断字符串的长度时，会认为：</p>\n<ul>\n<li><p>一个中文算一个字符，一个英文算一个字符</p>\n</li>\n<li><p>一个标点符号（包括中文标点、英文标点）算一个字符</p>\n</li>\n<li><p>一个空格算一个字符</p>\n</li>\n</ul>\n<h3 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h3><p>多个字符串之间可以使用加号 <code>+</code> 进行拼接。</p>\n<p><strong>拼接语法</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 + 任意数据类型 = 拼接之后的新字符串;</span><br></pre></td></tr></table></figure>\n\n<p><strong>拼接规则</strong>：拼接前，会把与字符串相加的这个数据类型转成字符串，然后再拼接成一个新的字符串。</p>\n<p><strong>代码举例</strong>：（字符串与六大数据类型相加）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"string\">&#x27;永不止步&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str4 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str5 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">28</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str6 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str4);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str5);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str6);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">千古壹号永不止步</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号666</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号true</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号null</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号undefined</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号[object Object]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的不可变性\"><a href=\"#字符串的不可变性\" class=\"headerlink\" title=\"字符串的不可变性\"></a>字符串的不可变性</h2><p>字符串里面的值不可被改变。虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>比如上面的代码，当重新给变量 str 赋值时，常量<code>hello</code>不会被修改，依然保存在内存中；str 会改为指向<code>qianguyihao</code>。</p>\n<h2 id=\"模板字符串（模板字面量）\"><a href=\"#模板字符串（模板字面量）\" class=\"headerlink\" title=\"模板字符串（模板字面量）\"></a>模板字符串（模板字面量）</h2><p>ES6 中引入了<strong>模板字符串</strong>，让我们省去了字符串拼接的烦恼。下面一起来看看它的特性。</p>\n<h3 id=\"在模板字符串中插入变量\"><a href=\"#在模板字符串中插入变量\" class=\"headerlink\" title=\"在模板字符串中插入变量\"></a>在模板字符串中插入变量</h3><p>以前，让字符串进行拼接的时候，是这样做的：（传统写法的字符串拼接）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;smyhvae&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">&#x27;26&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;name:&#x27;</span> + name + <span class=\"string\">&#x27;,age:&#x27;</span> + age); <span class=\"comment\">//传统写法</span></span><br></pre></td></tr></table></figure>\n\n<p>这种写法，比较繁琐，而且容易出错。</p>\n<p>现在，有了 ES6 语法，字符串拼接可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">&#x27;26&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是&#x27;</span> + name + <span class=\"string\">&#x27;,age:&#x27;</span> + age); <span class=\"comment\">//传统写法</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`我是<span class=\"subst\">$&#123;name&#125;</span>,age:<span class=\"subst\">$&#123;age&#125;</span>`</span>); <span class=\"comment\">//ES6 写法。注意语法格式</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，上方代码中，倒数第二行用的符号是单引号，最后一行用的符号是反引号（在 tab 键的上方）。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000010222698\">ES6 的 rest 参数和扩展运算符</a></li>\n</ul>\n<h3 id=\"在模板字符串中插入表达式\"><a href=\"#在模板字符串中插入表达式\" class=\"headerlink\" title=\"在模板字符串中插入表达式\"></a>在模板字符串中插入表达式</h3><p>以前，在字符串中插入表达式的写法必须是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this is &#x27;</span> + (a + b) + <span class=\"string\">&#x27; and\\nnot &#x27;</span> + (<span class=\"number\">2</span> * a + b) + <span class=\"string\">&#x27;.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>现在，通过模板字符串，我们可以使用一种更优雅的方式来表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这行代码，故意做了换行。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`this is <span class=\"subst\">$&#123;a + b&#125;</span> and</span></span><br><span class=\"line\"><span class=\"string\">not <span class=\"subst\">$&#123;<span class=\"number\">2</span> * a + b&#125;</span>.`</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is 15 and</span><br><span class=\"line\">not 20.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板字符串中可以换行\"><a href=\"#模板字符串中可以换行\" class=\"headerlink\" title=\"模板字符串中可以换行\"></a>模板字符串中可以换行</h3><p>因为模板字符串支持换行，所以可以让代码写得非常美观。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板字符串支持换行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> html = <span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;span&gt;<span class=\"subst\">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;span&gt;<span class=\"subst\">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;span&gt;<span class=\"subst\">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(html); <span class=\"comment\">// 打印结果也会换行</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20200825_2016.png\"></p>\n<h3 id=\"模板字符串中可以调用函数\"><a href=\"#模板字符串中可以调用函数\" class=\"headerlink\" title=\"模板字符串中可以调用函数\"></a>模板字符串中可以调用函数</h3><p>模板字符串中可以调用函数。字符串中调用函数的位置，将会显示函数执行后的返回值。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`www.<span class=\"subst\">$&#123;getName()&#125;</span>.com`</span>); <span class=\"comment\">// 打印结果：www.qianguyihao.com</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板字符串支持嵌套使用\"><a href=\"#模板字符串支持嵌套使用\" class=\"headerlink\" title=\"模板字符串支持嵌套使用\"></a>模板字符串支持嵌套使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nameList = [<span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"string\">&#x27;解忧少帅&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myTemplate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// join(&#x27;&#x27;) 的意思是，把数组里的内容合并成一个字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t<span class=\"subst\">$&#123;nameList.map((item) =&gt; <span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;item&#125;</span>&lt;/li&gt;`</span>).join(<span class=\"string\">&#x27;&#x27;</span>)&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/ul&gt;`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">innerHTML</span> = <span class=\"title function_\">myTemplate</span>();</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20200607_2118.png\"></p>\n<h2 id=\"布尔值：Boolean\"><a href=\"#布尔值：Boolean\" class=\"headerlink\" title=\"布尔值：Boolean\"></a>布尔值：Boolean</h2><p>布尔型有两个值：true 和 false。主要用来做逻辑判断： true 表示真，false 表示假。</p>\n<p>布尔值直接使用就可以了，千万不要加引号。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean</span><br></pre></td></tr></table></figure>\n\n<p>布尔型和数字型相加时， true 按 1 来算 ，false 按 0 来算。</p>\n","text":"详细介绍基本数据类型：String 字符串语法字符串型可以是引号中的任意文本，其语法为：双引号 &quot;&quot; 或者单引号 &#39;&#39;。来看个示例。下面的这些，都是字符串：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"05-变量的数据类型：基本数据类型和引用数据类型","slug":"JavaScript/05-变量的数据类型：基本数据类型和引用数据类型","date":"2023-02-15T12:06:59.445Z","updated":"2023-02-15T12:16:27.637Z","comments":true,"path":"api/articles/JavaScript/05-变量的数据类型：基本数据类型和引用数据类型.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"数据分类\"><a href=\"#数据分类\" class=\"headerlink\" title=\"数据分类\"></a>数据分类</h2><p>数据分为：静态数据、动态数据。</p>\n<h3 id=\"静态数据\"><a href=\"#静态数据\" class=\"headerlink\" title=\"静态数据\"></a>静态数据</h3><p>静态数据是指一些永久性的数据。一般是以文件的形式存储在硬盘上，比如文档、照片、视频等文件。</p>\n<p>电脑关闭后，静态数据仍然还在。只要不主动删掉数据或者硬盘没损坏，这些数据就一直都在。</p>\n<h3 id=\"动态数据\"><a href=\"#动态数据\" class=\"headerlink\" title=\"动态数据\"></a>动态数据</h3><p>动态数据是在程序运行过程中，动态产生的临时数据，这些数据可能随时发生变化。一般存储在内存中。</p>\n<p>电脑关闭后，这些数据会被清除。</p>\n<p>为何不把应用程序的动态数据加载到硬盘中执行呢？这主要是因为，内存的访问速度比硬盘快无数倍。</p>\n<h2 id=\"变量的数据类型\"><a href=\"#变量的数据类型\" class=\"headerlink\" title=\"变量的数据类型\"></a>变量的数据类型</h2><h3 id=\"为什么需要数据类型\"><a href=\"#为什么需要数据类型\" class=\"headerlink\" title=\"为什么需要数据类型\"></a>为什么需要数据类型</h3><p>在计算机中，不同的数据所需占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型。而且，不同的数据类型，寓意也不同。</p>\n<p>我们都知道，无论这个变量是字符串类型，还是数字类型，我们都可以直接用 <code>var</code> 去定义它。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;hello word&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<p>为什么可以这样做呢？这是因为：JavaScript 是一种「弱类型语言」，或者说是一种「动态语言」，这意味着不需要提前声明变量的类型，在程序运行过程中，类型会自动被确定。</p>\n<p><strong>JS 的变量数据类型，是在程序运行的过程中，根据等号右边的值来确定的</strong>。而且，变量的数据类型是可以变化的。比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"number\">123</span>; <span class=\"comment\">// 强制将变量 name 修改为 数字类型</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JS-中一共有八种数据类型\"><a href=\"#JS-中一共有八种数据类型\" class=\"headerlink\" title=\"JS 中一共有八种数据类型\"></a>JS 中一共有八种数据类型</h3><ul>\n<li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、BigInt 大型数值、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol。</p>\n</li>\n<li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p>\n</li>\n</ul>\n<p>注意：内置对象 Function、Array、Date、RegExp、Error 等都是属于 Object 类型。也就是说，除了那七种基本数据类型之外，其他的，都称之为 Object 类型。</p>\n<p>BigInt 和 Symbol 是ES6中新增的类型</p>\n<blockquote>\n<p>面试问：引用数据类型有几种？</p>\n</blockquote>\n<blockquote>\n<p>面试答：只有一种，即 Object 类型。</p>\n</blockquote>\n<p><strong>数据类型之间最大的区别</strong>：</p>\n<ul>\n<li><p>基本数据类型：参数赋值的时候，传数值。</p>\n</li>\n<li><p>引用数据类型：参数赋值的时候，传地址。</p>\n</li>\n</ul>\n<h2 id=\"一个经典的例子\"><a href=\"#一个经典的例子\" class=\"headerlink\" title=\"一个经典的例子\"></a>一个经典的例子</h2><p><strong>基本数据类型举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">a++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：24</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 打印结果：23</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中：a 和 b 都是基本数据类型，让 b 等于 a，然后<strong>改变 a 的值之后，发现 b 的值并没有被改变</strong>。</p>\n<p>但是在引用数据类型中，就不同了，我们来看一看。</p>\n<p><strong>引用数据类型举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&#x27;smyh&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让 obj2 等于 obj1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改 obj1 的 name 属性</span></span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&#x27;vae&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">name</span>); <span class=\"comment\">// 打印结果：vae</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2.<span class=\"property\">name</span>); <span class=\"comment\">// 打印结果：vae</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中：obj1 和 obj2 都是引用数据类型，让 obj2 等于 obj1，然后<strong>修改 obj1.name 的值之后，发现 obj2.name 的值也发生了改变</strong>。</p>\n<p>从上面的例子中，可以反映出，基本数据类型和引用数据类型是有区别的。</p>\n<p>那到底有什么区别呢？我们进一步往下看。</p>\n<h2 id=\"栈内存和堆内存\"><a href=\"#栈内存和堆内存\" class=\"headerlink\" title=\"栈内存和堆内存\"></a>栈内存和堆内存</h2><p>我们首先记住一句话：JS 中，所有的<strong>变量</strong>都是保存在<strong>栈内存</strong>中的。</p>\n<p>然后来看看下面的区别。</p>\n<p><strong>基本数据类型</strong>：</p>\n<p>基本数据类型的值，直接保存在栈内存中。值与值之间是独立存在，修改一个变量不会影响其他的变量。</p>\n<p><strong>引用数据类型</strong>：</p>\n<p>对象是保存到<strong>堆内存</strong>中的。每创建一个新的对象，就会在堆内存中开辟出一个新的空间；而<strong>变量保存了对象的内存地址</strong>（对象的引用），保存在栈内存当中。如果两个变量保存了同一个对象的引用，当一个通过一个变量修改属性时，另一个也会受到影响。</p>\n","text":"数据分类数据分为：静态数据、动态数据。静态数据静态数据是指一些永久性的数据。一般是以文件的形式存储在硬盘上，比如文档、照片、视频等文件。电脑关闭后，静态数据仍然还在。只要不主动删掉数据或者硬盘没损坏，这些数据就一直都在。动态数据动态数据是在程序运行过程中，动态产生的临时数据，这些","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"04-标识符、关键字、保留字","slug":"JavaScript/04-标识符、关键字、保留字","date":"2023-02-15T12:06:59.442Z","updated":"2023-02-15T12:15:54.804Z","comments":true,"path":"api/articles/JavaScript/04-标识符、关键字、保留字.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"变量的命名规则（重要）\"><a href=\"#变量的命名规则（重要）\" class=\"headerlink\" title=\"变量的命名规则（重要）\"></a>变量的命名规则（重要）</h2><p>JS是大小敏感的语言。也就是说 A 和 a 是两个变量。大写字母是可以使用的，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"number\">250</span>; <span class=\"comment\">//变量1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">888</span>; <span class=\"comment\">//变量2</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来整理一下<strong>变量的命名规则</strong>，非常重要。</p>\n<p>必须遵守：</p>\n<ul>\n<li>只能由字母(A-Z、a-z)、数字(0-9)、下划线(_)、美元符( $ )组成。</li>\n<li>不能以数字开头。必须以字母(A-Z、a-z)、下划线(_)或者美元符( $ )开头。变量名中不允许出现空格。尤其注意，变量名中不能出现<strong>中划线</strong><code>-</code>，很多人写了多年代码都不知道这一点，让人大跌眼镜。</li>\n<li>严格区分大小写（JS 是区分大小写的语言）。</li>\n<li>不能使用 JS 语言中保留的「关键字」和「保留字」作为变量名。下一篇文章会讲。</li>\n<li>变量名长度不能超过 255 个字符。</li>\n<li></li>\n<li>汉语可以作为变量名。但是不建议使用，因为 low。</li>\n</ul>\n<p>建议遵守：</p>\n<ul>\n<li><p>命名要有可读性，方便顾名思义。</p>\n</li>\n<li><p>建议用驼峰命名法。比如 getElementById、getUserInfo、aaaOrBbbAndCcc</p>\n</li>\n</ul>\n<p><strong>补充</strong>：</p>\n<p>1、不能以数字开头，是为了把数字和字母区分开。</p>\n<p>2、JS底层保存标识符的时候，是采用的 Unicode 编码。所以理论上讲，在遵守命名规则的前提下，utf-8中包含的所有内容都可以作为标识符。</p>\n<h2 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h2><p><strong>标识符</strong>：在 JS 中所有的可以由我们<strong>自主命名</strong>的都可以称之为标识符。包括：<strong>变量名、函数名、属性名、参数名</strong>都是属于标识符。</p>\n<p>通俗来讲，标识符就是我们写代码时为某些东西起的名字。类似于人出生的时候，起个人名。</p>\n<p><strong>标识符的命名规则</strong>和变量的命令规则是一样的。关于变量的命名规则，详见上一段。</p>\n<p>标识符不能使用语言中保留的<strong>关键字</strong>及<strong>保留字</strong>。</p>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><p><strong>关键字</strong>：被JS赋予了特殊含义的单词。也就是说，关键字是 JS 本身已经使用了的单词，我们不能再用它们充当变量名、函数名等标识符。关键字在开发工具中会显示特殊的颜色。</p>\n<p>JS 中的关键字如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>、<span class=\"keyword\">else</span>、switch、<span class=\"built_in\">break</span>、<span class=\"keyword\">case</span>、default、<span class=\"keyword\">for</span>、<span class=\"keyword\">in</span>、<span class=\"keyword\">do</span>、<span class=\"keyword\">while</span>、</span><br><span class=\"line\"></span><br><span class=\"line\">var、<span class=\"built_in\">let</span>、const、void、<span class=\"keyword\">function</span>、<span class=\"built_in\">continue</span>、<span class=\"built_in\">return</span>、</span><br><span class=\"line\"></span><br><span class=\"line\">try、catch、finally、throw、debugger、</span><br><span class=\"line\"></span><br><span class=\"line\">this、typeof、instanceof、delete、with、</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span>、new、class、extends、super、with、yield、import、static、</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">true</span>、<span class=\"literal\">false</span>、null、undefined、NaN</span><br></pre></td></tr></table></figure>\n<h2 id=\"保留字\"><a href=\"#保留字\" class=\"headerlink\" title=\"保留字\"></a>保留字</h2><p><strong>保留字</strong>：实际上就是预留的“关键字”。它们虽然现在还不是关键字，但是未来可能会成为关键字。同样不能用它们当充当变量名、函数名等标识符。</p>\n<p>JS 中的保留字如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum、await</span><br><span class=\"line\"></span><br><span class=\"line\">abstract、boolean、byte、char、double、final、<span class=\"built_in\">float</span>、goto、int、long、native、short、synchronized、transient、volatile、</span><br><span class=\"line\"></span><br><span class=\"line\">arguments <span class=\"built_in\">eval</span> Infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下关键字只在严格模式中被当成保留字，在ES6中是属于关键字</span></span><br><span class=\"line\">implements、interface、package、private、protected、public</span><br></pre></td></tr></table></figure>\n\n<p>当你在网上搜“JS保留字”的时候，你会找到很多版本，每个版本都不一样，各有各的说法。<strong>如果有不一样的地方，请以我写的为准</strong>。</p>\n<p>其实，以谁的版本作为标准并不重要，因为有些单词到底是<strong>关键字</strong>还是<strong>保留字</strong>，并没有严格的界限。JS 关于保留字的规则非常复杂，上放列表中的一些单词在特殊情况下其实是可以使用的。</p>\n<p>我们只需要记住一点：上面提到的所有<strong>关键字</strong>和<strong>保留字</strong>，我们都不要用它们作为变量名或者参数名。不要尝试这些奇怪的做法。</p>\n<p>关于更多：</p>\n<ul>\n<li><p><a href=\"https://www.zhihu.com/question/472379938\">知乎问答：undefined是保留字吗？</a></p>\n</li>\n<li><p>书籍《<a href=\"https://book.douban.com/subject/35469273/\">JavaScript 悟道</a>》的第一章：保留字部分。</p>\n</li>\n</ul>\n","text":"变量的命名规则（重要）JS是大小敏感的语言。也就是说 A 和 a 是两个变量。大写字母是可以使用的，比如：1<br>2<br>var A = 250; //变量1<br>var a = 888; //变量2<br>我们来整理一下变量的命名规则，非常重要。必须遵守：只能由字母(A-","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"03-常量和变量","slug":"JavaScript/03-常量和变量","date":"2023-02-15T12:06:59.441Z","updated":"2023-02-15T12:14:45.665Z","comments":true,"path":"api/articles/JavaScript/03-常量和变量.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180116_2020.png","content":"<h2 id=\"常量（字面量）：数字和字符串\"><a href=\"#常量（字面量）：数字和字符串\" class=\"headerlink\" title=\"常量（字面量）：数字和字符串\"></a>常量（字面量）：数字和字符串</h2><p><strong>常量</strong>也称之为“字面量”，是固定值，不可改变。看见什么，它就是什么。</p>\n<p>常量有下面这几种：</p>\n<ul>\n<li>数字常量（数值常量）</li>\n<li>字符串常量</li>\n<li>布尔常量</li>\n<li>自定义常量</li>\n</ul>\n<h3 id=\"数字常量\"><a href=\"#数字常量\" class=\"headerlink\" title=\"数字常量\"></a>数字常量</h3><p>数字常量非常简单，直接写数字就行，不需要任何其他的符号。既可以是整数，也可以是浮点数。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不需要加引号</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"number\">996</span>); <span class=\"comment\">// 996是整数</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"number\">3.14</span>); <span class=\"comment\">// 3.14是浮点数（即带了小数）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串常量\"><a href=\"#字符串常量\" class=\"headerlink\" title=\"字符串常量\"></a>字符串常量</h3><p>字符串常量就是用单引号或双引号括起来的内容。可以是单词、句子等，一定要加引号。在JS中，只要是单引号或双引号括起来的内容，都是字符串常量。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;996&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;千古壹号，永不止步&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>温馨提示：996 是数字，’996’是字符串。</p>\n<h3 id=\"布尔常量\"><a href=\"#布尔常量\" class=\"headerlink\" title=\"布尔常量\"></a>布尔常量</h3><p>布尔常量就是表达<strong>真</strong>或者<strong>假</strong>，在JS中用 true 和 false 来表达。</p>\n<p>布尔字面量举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;如果为真，就走这里面的代码);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义常量：const\"><a href=\"#自定义常量：const\" class=\"headerlink\" title=\"自定义常量：const\"></a>自定义常量：const</h3><p>自定义常量是ES6中新增的语法。它的语法格式是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 常量名称 = 常量取值;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;壹号&#x27;</span>; <span class=\"comment\">// 定义常量name，它的取值是 壹号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// name =  &#x27;许嵩&#x27;; // 既然 name 是常量，所以这一行是错误的写法，因为 name 无法被修改为其他的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 打印结果：壹号</span></span><br></pre></td></tr></table></figure>\n\n<p>后续ES6的时候，会深入学习 const 用法。</p>\n<h3 id=\"开发技巧：用变量定义常量\"><a href=\"#开发技巧：用变量定义常量\" class=\"headerlink\" title=\"开发技巧：用变量定义常量\"></a>开发技巧：用变量定义常量</h3><p>我们一般不会直接使用常量，否则会导致代码冗余、不易维护。如果多个地方要用到同一个常量，那就建议事先定义一个变量，用来保存这个常量；然后在需要的地方去引用这个变量就行了。另外，当我们学习了ES6中的 const 之后，还可以使用自定义常量达到目的。</p>\n<h2 id=\"变量的概念\"><a href=\"#变量的概念\" class=\"headerlink\" title=\"变量的概念\"></a>变量的概念</h2><p><strong>变量</strong>表示可以被修改的数据。我们通过「变量名」获取数据，甚至修改数据。</p>\n<p>变量还可以用来保存常量。</p>\n<p><strong>本质</strong>：变量是程序在内存中申请的一块用来存放数据的空间。打个比方，超市里的储物格就是变量, 在不同的时间段里, 储物格中存储的数据可以不一样。</p>\n<h2 id=\"变量的定义和赋值\"><a href=\"#变量的定义和赋值\" class=\"headerlink\" title=\"变量的定义和赋值\"></a>变量的定义和赋值</h2><p>定义变量是在告诉浏览器，我们需要一块内存空间，相当于生成超市里的储物格。</p>\n<p>给变量赋值就是往相当于往储物格里塞东西，可能今天上午塞的是面包🍞，下午就换成了蛋糕🍰。</p>\n<h3 id=\"变量的定义-x2F-声明（ES5）\"><a href=\"#变量的定义-x2F-声明（ES5）\" class=\"headerlink\" title=\"变量的定义&#x2F;声明（ES5）\"></a>变量的定义&#x2F;声明（ES5）</h3><p>在 ES6 语法之前，统一使用<code>var</code>关键字来声明一个变量。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name; <span class=\"comment\">// 定义一个名为 name 的变量。name是变量名。</span></span><br></pre></td></tr></table></figure>\n\n<p>var 是英语“variable”变量的缩写。后面要加一个空格，空格后面的东西就是“变量名”。</p>\n<p>PS：<strong>在 JavaScript 中，永远都是用 var 来定义变量</strong>（在 ES6 之前），这和 C、Java 等语言不同。</p>\n<h3 id=\"变量的定义-x2F-声明（ES6）\"><a href=\"#变量的定义-x2F-声明（ES6）\" class=\"headerlink\" title=\"变量的定义&#x2F;声明（ES6）\"></a>变量的定义&#x2F;声明（ES6）</h3><p>在 ES6 语法及之后的版本里，可以使用 <code>const</code>、<code>let</code>关键字来定义一个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name; <span class=\"comment\">// 定义一个常量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age; <span class=\"comment\">// 定义一个变量</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你想定义一个常量，就用 const；如果你想定义一个变量，就用 let。</p>\n<h3 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h3><p>变量赋值举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;千古壹号&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>综合起来，变量的定义、赋值、取值，举例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义：声明一个变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num;</span><br><span class=\"line\"><span class=\"comment\">// 赋值：往变量中存储数据</span></span><br><span class=\"line\">num = <span class=\"number\">996</span>;</span><br><span class=\"line\"><span class=\"comment\">// 取值：从变量中获取存储的数据</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并写法\"><a href=\"#合并写法\" class=\"headerlink\" title=\"合并写法\"></a>合并写法</h3><p>变量的定义和赋值，还可以合并写在一起，是实战中常用的写法。举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>; <span class=\"comment\">// ES5语法</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = hello; <span class=\"comment\">// ES6 语法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = world; <span class=\"comment\">// ES6 语法</span></span><br><span class=\"line\">c = qianguyihao; <span class=\"comment\">// 修改 变量 C 的值</span></span><br></pre></td></tr></table></figure>\n\n<p>定义一个变量并赋值， 我们称之为<strong>变量的初始化</strong>。如下图所示：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2020.png\"></p>\n<ul>\n<li>定义变量：var 就是一个<strong>关键字</strong>，用来定义变量。所谓关键字，就是有特殊功能的单词。</li>\n<li>变量赋值：等号表示<strong>赋值</strong>，将等号右边的值，赋给左边的变量。</li>\n<li>变量名：我们可以给变量起个名字。</li>\n</ul>\n<h3 id=\"变量的初始化【重要】\"><a href=\"#变量的初始化【重要】\" class=\"headerlink\" title=\"变量的初始化【重要】\"></a>变量的初始化【重要】</h3><p>第一次给变量赋值，称之为“<strong>变量的初始化</strong>”，这个概念非常重要。第二次给这个变量赋值（也就是修改这个变量的值）就不叫初始化了。</p>\n<p>一个变量如果没有进行初始化（只声明，不赋值），那么这个变量中存储的值是<code>undefined</code>，这个知识点必须知道。</p>\n<p>变量的初始化，可以有两种形式，如下。</p>\n<p>形式1：先定义，在赋值。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\">name = <span class=\"string\">&#x27;qianguyhihao&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>形式2：在定义的同时进行初始化。也就是上一小段讲的“合并写法”。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量定义和赋值的补充\"><a href=\"#变量定义和赋值的补充\" class=\"headerlink\" title=\"变量定义和赋值的补充\"></a>变量定义和赋值的补充</h2><h3 id=\"修改变量的值\"><a href=\"#修改变量的值\" class=\"headerlink\" title=\"修改变量的值\"></a>修改变量的值</h3><p>一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">a = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：110。因为 110 覆盖了 100</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同时定义多个变量\"><a href=\"#同时定义多个变量\" class=\"headerlink\" title=\"同时定义多个变量\"></a>同时定义多个变量</h3><p>1、同时定义多个变量时，只需要写一个 var， 多个变量名之间用英文逗号隔开。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同时定义多个变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1, num2;</span><br></pre></td></tr></table></figure>\n\n<p>2、定义多个变量的同时，分别进行初始化。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义多个变量的同时，进行初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">10</span>, num2 = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果多个变量初始化的初始化值都是一样的，则可以这样简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1, num2;</span><br><span class=\"line\">num1 = num2 = <span class=\"number\">10</span>; <span class=\"comment\">// 重点在这一行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1); <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的写法和下面的写法是有区别的：（注意看打印结果）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1, num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"变量之间可以相互赋值\"><a href=\"#变量之间可以相互赋值\" class=\"headerlink\" title=\"变量之间可以相互赋值\"></a>变量之间可以相互赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1, num2;</span><br><span class=\"line\">num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">num2 = num1; <span class=\"comment\">// 把 num1 的值拷贝一份，赋值给 num2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量如果重复定义\"><a href=\"#变量如果重复定义\" class=\"headerlink\" title=\"变量如果重复定义\"></a>变量如果重复定义</h3><p>在ES5中，如果用 var 定义了同名变量，那么，后定义的变量，会覆盖先定义的变量。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;许嵩&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;千古壹号&#x27;</span>; <span class=\"comment\">// 这里会重新定义一个新的变量 name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 千古壹号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量声明和赋值的特殊情况\"><a href=\"#变量声明和赋值的特殊情况\" class=\"headerlink\" title=\"变量声明和赋值的特殊情况\"></a>变量声明和赋值的特殊情况</h3><p>变量建议先声明，再使用；否则可能会产生意想不到的结果。具体如下。</p>\n<p><strong>写法 1</strong>、先声明，再赋值：（正常）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法 2</strong>、不声明，直接赋值：（正常）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法 3</strong>、只声明，不赋值：（注意，打印 undefined）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法 4</strong>、不声明，不赋值，直接使用：（会报错）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 会报错</span></span><br></pre></td></tr></table></figure>\n\n<p>控制台会报错：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2040.png\"></p>\n<p><strong>补充</strong>：写法 1 和写法 2 虽然都正常，但这两种写法是有区别的，等以后学习了「变量提升」的概念就明白了。大多数情况下，我们都是采用的写法 1。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p><strong>举例</strong>：交换两个变量的值</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp;</span><br><span class=\"line\"></span><br><span class=\"line\">temp = a1;</span><br><span class=\"line\">a1 = a2;</span><br><span class=\"line\">a2 = temp;</span><br></pre></td></tr></table></figure>\n\n","text":"常量（字面量）：数字和字符串常量也称之为“字面量”，是固定值，不可改变。看见什么，它就是什么。常量有下面这几种：数字常量（数值常量）字符串常量布尔常量自定义常量数字常量数字常量非常简单，直接写数字就行，不需要任何其他的符号。既可以是整数，也可以是浮点数。例如：1<br>2<br>","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"02-JavaScript：hello world","slug":"JavaScript/02-开始写JavaScript：hello world","date":"2023-02-15T12:06:59.438Z","updated":"2023-02-15T12:12:38.715Z","comments":true,"path":"api/articles/JavaScript/02-开始写JavaScript：hello world.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180116_1735.gif","content":"<h2 id=\"开始写第一行-JavaScript：hello-world\"><a href=\"#开始写第一行-JavaScript：hello-world\" class=\"headerlink\" title=\"开始写第一行 JavaScript：hello world\"></a>开始写第一行 JavaScript：hello world</h2><p>JS 代码的书写位置在哪里呢？引入 JS 代码，有哪几种方式？有三种方式：（和 CSS 的引入方式类似）</p>\n<ol>\n<li><p><strong>行内式</strong>：写在标签内部。</p>\n</li>\n<li><p><strong>内嵌式</strong>（内联式）：写在 head 标签中。</p>\n</li>\n<li><p><strong>外链式</strong>：引入外部 JS 文件。</p>\n</li>\n</ol>\n<h3 id=\"方式-1：行内式\"><a href=\"#方式-1：行内式\" class=\"headerlink\" title=\"方式 1：行内式\"></a>方式 1：行内式</h3><p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;button&quot;</span> value=<span class=\"string\">&quot;点我点我&quot;</span> onclick=<span class=\"string\">&quot;alert(&#x27; Hello 方式1&#x27;)&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>完整的可执行代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;点我点我&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;alert(&#x27; Hello 方式1&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析</strong>：</p>\n<ul>\n<li><p>可以将单行或少量 JS 代码写在 HTML 标签的事件属性中（以 on 开头的属性），比如放在上面的 <code>onclick</code>点击事件中。</p>\n</li>\n<li><p>这种书写方式，不推荐使用，原因是：可读性差，尤其是需要编写大量 JS 代码时，很难维护；引号多层嵌套时，也容易出错。</p>\n</li>\n<li><p>关于代码中的「引号」，在 HTML 标签中，推荐使用双引号，JS 中我们推荐使用单引号。</p>\n</li>\n</ul>\n<h3 id=\"方式-2、内嵌式（内联式）\"><a href=\"#方式-2、内嵌式（内联式）\" class=\"headerlink\" title=\"方式 2、内嵌式（内联式）\"></a>方式 2、内嵌式（内联式）</h3><p>我们可以在 HTML 页面的 <code>&lt;body&gt;</code> 标签里放入<code>&lt;script type=”text/javascript”&gt;&lt;/script&gt;</code>标签对，并在<code>&lt;script&gt;</code>里书写 JavaScript 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 在这里写 js 代码</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;千古壹号 hello 方式2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao hello 方式2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析</strong>：</p>\n<ul>\n<li><p>text 表示纯文本，因为 JavaScript 代码本身就是纯文本。</p>\n</li>\n<li><p>可以将多行 JS 代码写到 <code>&lt;script&gt;</code> 标签中。</p>\n</li>\n<li><p>内嵌式 JS 是学习时常用的方式。</p>\n</li>\n</ul>\n<h3 id=\"方式-3：外链式\"><a href=\"#方式-3：外链式\" class=\"headerlink\" title=\"方式 3：外链式\"></a>方式 3：外链式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 外链式：引入外部的 js 文件：这个 utils.js 文件与当前的 html 文件，处于同一级目录 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;utils.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析</strong>：</p>\n<ul>\n<li>上面这段代码，依然是放到 body 标签里，可以和内嵌的 JS 代码并列。</li>\n<li>上方代码的 script 标签已经引入了外部 JS 文件，所以这个标签里面，不可以再写 JS 代码。</li>\n</ul>\n<p><strong>总结</strong>：</p>\n<p>我们在实战开发中，基本都是采用方式 3，因为将 html 文件和 js 文件分开的方式，有利于代码的结构化和复用，符合高内聚、低耦合的思想。很少会有人把一大堆 JS 代码塞到 html 文件里。</p>\n<h3 id=\"关于-window-onload：先加载，最后执行\"><a href=\"#关于-window-onload：先加载，最后执行\" class=\"headerlink\" title=\"关于 window.onload：先加载，最后执行\"></a>关于 window.onload：先加载，最后执行</h3><p>上面的三种方式，有个共同的地方是：JS 代码都是写在<code>&lt;/body&gt;</code>中的，准确来说，是在页面标签元素的后面，在 body<strong>结束标签</strong>的前面。</p>\n<p>为什么一般是按这样的顺序来写呢？这是因为：浏览器默认会<strong>从上至下</strong>解析网页（这句话很重要）。当你<strong>需要通过 JS 来操作界面上的标签元素</strong>的时候，假如将 JS 代码、<code>&lt;script&gt;</code>标签写到<code>&lt;head&gt;</code>标签中，或者写在页面标签元素的前面，那么这样的 JS 是无效的，因为标签元素在此时都还没来得及加载，自然无法操作这个元素。</p>\n<p><strong>重点：</strong></p>\n<p>当你<strong>需要通过 JS 来操作界面上的标签元素</strong>的时候，如果实在想把 JS 写到<code>&lt;head&gt;</code>标签中，那么就必须用 window.onload 将 JS 代码进行包裹。代码格式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  window.onload = function()&#123;</span><br><span class=\"line\">    // 这里可以写操作界面元素的JS代码，等页面加载完毕后再执行</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>window.onload</strong>的含义是：等界面上所有内容都加载完毕后（不仅要等文本加载完毕，而且要等图片也要加载完毕），再执行<code>&#123;&#125;</code>中的代码。做到了<strong>先加载，最后执行</strong>，也就是：<strong>等页面加载完毕后再执行</strong>。</p>\n<p>当然，我们可以根据具体需求，将 window.onload 写在 <code>&lt;head&gt;</code>标签中，或者写在<code>&lt;script&gt;</code>标签中。</p>\n<h2 id=\"JavaScript-一些简单的语法规则\"><a href=\"#JavaScript-一些简单的语法规则\" class=\"headerlink\" title=\"JavaScript 一些简单的语法规则\"></a>JavaScript 一些简单的语法规则</h2><p>学习程序，是有规律可循的，程序会有有相同的部分，这些部分就是一种规定，不能更改，我们称之为：语法。我们先来了解一个简单的语法规则。</p>\n<p>1、JS 对换行、缩进、空格不敏感。每一条语句以分号结尾。</p>\n<p>也就是说：</p>\n<p>代码一：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;今天蓝天白云&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;我很高兴&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>等价于代码二：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;今天蓝天白云&#x27;</span>);<span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;我很高兴&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、每一条语句末尾要加上<strong>分号</strong>。虽然分号不是必须加的，但如果不写分号，浏览器会自动添加分号，导致消耗一些系统资源和性能，甚至有可能<strong>添加错误</strong>。</p>\n<p>3、所有的符号，都是英文的。比如<strong>括号</strong>、引号、分号。</p>\n<p>如果你用的是搜狗拼音，<strong>建议不要用 shift 切换中英文</strong>（可以在搜狗软件里进行设置），不然很容易输入中文的分号；建议用 ctrl+space 切换中英文输入法。</p>\n<p>4、JS 严格区分大小写。</p>\n<h2 id=\"前端代码的注释\"><a href=\"#前端代码的注释\" class=\"headerlink\" title=\"前端代码的注释\"></a>前端代码的注释</h2><p>注释：即解释、注解。注释有利于提高代码的可读性，且有利于程序员之间的沟通。</p>\n<p>注释可以用来解释某一段代码的功能和作用；通过注释，还可以补充代码中未体现出来的部分。</p>\n<p>注释可以是任何文字，可以写中文。</p>\n<p><strong>我们不要把 HTML、CSS、JavaScript 三者的注释格式搞混淆了</strong>。</p>\n<h3 id=\"HTML-的注释\"><a href=\"#HTML-的注释\" class=\"headerlink\" title=\"HTML 的注释\"></a>HTML 的注释</h3><p>格式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 我是 HTML 注释  --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--头部开始--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--头部结束--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--内容开始--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--内容结束--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--底部开始--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--底部结束--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS-的注释\"><a href=\"#CSS-的注释\" class=\"headerlink\" title=\"CSS 的注释\"></a>CSS 的注释</h3><p>举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"comment\">/* 我是 CSS 注释 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">font-weight</span>: bold;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">font-style</span>: italic;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：CSS 只有<code>/* */</code>这种注释，没有<code>//</code>这种注释。而且注释要写在<code>&lt;style&gt;</code>标签里面才算生效。</p>\n<h3 id=\"JavaScript-的注释\"><a href=\"#JavaScript-的注释\" class=\"headerlink\" title=\"JavaScript 的注释\"></a>JavaScript 的注释</h3><p>单行注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我是注释</span></span><br></pre></td></tr></table></figure>\n\n<p>多行注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t多行注释1</span></span><br><span class=\"line\"><span class=\"comment\">\t多行注释2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：VS Code 中，单行注释的快捷键是「Ctrl + &#x2F;」，多行注释的默认快捷键是「Alt + Shift + A」。</p>\n<p>当然，如果你觉得多行注释的默认快捷键不方便，我们还可以修改默认快捷键。操作如下：</p>\n<p>VS Code –&gt; 首选项 –&gt; 键盘快捷方式 –&gt; 查找“注释”这两个字 –&gt; 将原来的快捷键修改为其他的快捷键，比如「Ctrl + Shift + &#x2F;」。</p>\n<h3 id=\"对注释的认知\"><a href=\"#对注释的认知\" class=\"headerlink\" title=\"对注释的认知\"></a>对注释的认知</h3><p>为什么要写注释：</p>\n<ol>\n<li><p>所有注释都是必要的吗？当然不是。注释不应该用来解释某些代码正在做什么。如果代码无法清楚到去解释自己时，那么代码需要变得更简单。有一些例外，比如正则表达式和复杂算法通常会从解释他们正在做什么事情的注释中获益很多。</p>\n</li>\n<li><p>注释用于解释为什么某些代码存在时很有用。大多数注释都是针对代码本身无法包含的信息，例如决策背后的推理、业务流程、业务逻辑、注意事项、防踩坑指南、参考链接。</p>\n</li>\n<li><p>注释即文档，需要持续更新维护，新陈代谢。文档也会过期，但不能因噎废食。即便文档过期，至少它记载了曾经的开发记录。</p>\n</li>\n</ol>\n<p>推荐阅读：</p>\n<ul>\n<li>开发者代码审查 review 指南：<a href=\"https://jimmysong.io/eng-practices/docs/review/\">https://jimmysong.io/eng-practices/docs/review/</a></li>\n</ul>\n<h2 id=\"JavaScript-输出语句\"><a href=\"#JavaScript-输出语句\" class=\"headerlink\" title=\"JavaScript 输出语句\"></a>JavaScript 输出语句</h2><h3 id=\"弹窗：alert-语句\"><a href=\"#弹窗：alert-语句\" class=\"headerlink\" title=\"弹窗：alert()语句\"></a>弹窗：alert()语句</h3><p>我们要学习的第一个语句，就是 alert 语句。</p>\n<p>代码举例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;千古壹号&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>alert</strong>（英文翻译为“警报”）的用途：<strong>弹出“警告框”</strong>。它会在弹窗中显示一条信息，并等待用户按下 “OK”。</p>\n<p><code>alert(&quot;&quot;)</code>弹窗的效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_1735.gif\"></p>\n<p>这个弹窗，在 IE 浏览器中长这样：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_1906.png\"></p>\n<p>上面的代码中，如果写了两个 alert()语句，则网页的效果是：弹出第一个警告框，点击确定后，继续弹出第二个警告框。</p>\n<h3 id=\"弹窗：confirm-语句（含确认-x2F-取消）\"><a href=\"#弹窗：confirm-语句（含确认-x2F-取消）\" class=\"headerlink\" title=\"弹窗：confirm()语句（含确认&#x2F;取消）\"></a>弹窗：confirm()语句（含确认&#x2F;取消）</h3><p>代码举例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = confirm(&#x27;你听说过千古壹号吗？&#x27;);</span><br><span class=\"line\">console.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>代码运行后，页面上会显示一个弹窗。弹窗上有“确认”和“取消”两个按钮，点击“确定”返回 <code>true</code>，点击“取消”返回 <code>false</code>。</p>\n<p>效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20211031-1537.gif\" alt=\"20211031-1537\"></p>\n<h3 id=\"弹出输入框：prompt-语句\"><a href=\"#弹出输入框：prompt-语句\" class=\"headerlink\" title=\"弹出输入框：prompt()语句\"></a>弹出输入框：prompt()语句</h3><p><code>prompt()</code>就是专门弹出能够让用户输入的对话框。用得少，测试的时候偶尔会用。</p>\n<p>JS 代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请随便输入点什么东西吧&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，用户输入的内容，将被传递到变量 a 里面，并在控制台打印出来。</p>\n<p>效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2230.gif\"></p>\n<p><strong>alert()和 prompt()的区别：</strong></p>\n<ul>\n<li>alert() 语句中可以输出数字和字符串，如果要输出字符串，则必须用引号括起来；prompt()语句中，用户不管输入什么内容，都是字符串。</li>\n<li>prompt() 会返回用户输入的内容。我们可以用一个变量，来接收用户输入的内容。</li>\n</ul>\n<h3 id=\"网页内容区域输出：document-write-语句\"><a href=\"#网页内容区域输出：document-write-语句\" class=\"headerlink\" title=\"网页内容区域输出：document.write()语句\"></a>网页内容区域输出：document.write()语句</h3><p>代码举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.write(&#x27;千古前端图文教程&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<p><img src=\"http://img.smyhvae.com/20211031_1543.png\" alt=\"20211031_1543\"></p>\n<h3 id=\"控制台输出：console-log-打印日志\"><a href=\"#控制台输出：console-log-打印日志\" class=\"headerlink\" title=\"控制台输出：console.log() 打印日志\"></a>控制台输出：console.log() 打印日志</h3><p><code>console.log()</code>表示在控制台中输出。console 表示“控制台”，log 表示“输出”。括号里可以写字符串、数字、变量。</p>\n<p>控制台是程序员调试程序的地方，比如使用 console 语句打印日志，测试程序是否运行正常。</p>\n<p>在 Chrome 浏览器中，按 F12 即可打开控制台，选择「console」栏，即可看到打印的内容。</p>\n<p><code>console.log(&quot;&quot;)</code>效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2008.gif\"></p>\n<p>console 语句可以设置不同的打印等级：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;千古壹号1&#x27;</span>); <span class=\"comment\">//普通打印</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;千古壹号2&#x27;</span>); <span class=\"comment\">//警告打印</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;千古壹号3&#x27;</span>); <span class=\"comment\">//错误打印</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"https://img.smyhvae.com/20211031_1552.png\" alt=\"20211031_1552\"></p>\n<p>上图中，不同的打印等级，区别不大，只是颜色背景上的区别，方便肉眼区分、过滤信息。</p>\n<p>普通人是不会在意控制台的，但是有些网站另藏玄机。比如百度首页的控制台，悄悄地放了一段招聘信息的彩蛋，挺有意思：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2010.png\"></p>\n<p>做前端开发时需要经常使用控制台做调试，我们甚至可以直接在控制台输入 JS 语句，然后打印执行结果。</p>\n<p><strong>总结</strong>：alert() 主要用来显示消息给用户，console.log() 用来给程序员做调试用。</p>\n","text":"开始写第一行 JavaScript：hello worldJS 代码的书写位置在哪里呢？引入 JS 代码，有哪几种方式？有三种方式：（和 CSS 的引入方式类似）行内式：写在标签内部。内嵌式（内联式）：写在 head 标签中。外链式：引入外部 JS 文件。方式 1：行内式代码举例","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]},{"title":"01-JavaScript简介","slug":"JavaScript/01-JavaScript简介","date":"2023-02-15T12:06:59.436Z","updated":"2023-02-15T12:10:20.552Z","comments":true,"path":"api/articles/JavaScript/01-JavaScript简介.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"JavaScript-历史和发展\"><a href=\"#JavaScript-历史和发展\" class=\"headerlink\" title=\"JavaScript 历史和发展\"></a>JavaScript 历史和发展</h2><p>Web 前端有三层：</p>\n<ul>\n<li><p>HTML：从语义的角度，描述页面<strong>结构</strong></p>\n</li>\n<li><p>CSS：从审美的角度，描述<strong>样式</strong>（美化页面）</p>\n</li>\n<li><p>JavaScript（简称 JS）：从交互的角度，描述<strong>行为</strong>（实现业务逻辑和页面控制）</p>\n</li>\n</ul>\n<h2 id=\"JavaScript-介绍\"><a href=\"#JavaScript-介绍\" class=\"headerlink\" title=\"JavaScript 介绍\"></a>JavaScript 介绍</h2><h3 id=\"JavaScript-入门易学性\"><a href=\"#JavaScript-入门易学性\" class=\"headerlink\" title=\"JavaScript 入门易学性\"></a>JavaScript 入门易学性</h3><ul>\n<li><p>JavaScript 对初学者比较友好。可以使用任何文本编辑工具编写，只需要浏览器就可以执行程序。</p>\n</li>\n<li><p>JavaScript 是有界面效果的（相比之下，C 语言只有白底黑字）。</p>\n</li>\n<li><p>JavaScript 的入门较简单（进阶不易）。比如，JS 是<strong>弱变量类型</strong>的语言，变量只需要用 var&#x2F;let&#x2F;const 来声明。而 Java 中变量的声明，要根据变量的类型来定义。</p>\n</li>\n</ul>\n<p>Java 中需要这样定义变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a;</span><br><span class=\"line\"><span class=\"type\">float</span> a;</span><br><span class=\"line\"><span class=\"type\">double</span> a;</span><br><span class=\"line\">String a;</span><br><span class=\"line\"><span class=\"type\">boolean</span> a;</span><br></pre></td></tr></table></figure>\n\n<p>而 JS 中，只需要用一种方式来定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6 写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaScript-既是前端语言，又是后端语言\"><a href=\"#JavaScript-既是前端语言，又是后端语言\" class=\"headerlink\" title=\"JavaScript 既是前端语言，又是后端语言\"></a>JavaScript 既是前端语言，又是后端语言</h3><p>当 JavaScript 运行在用户的终端网页，而不是运行在服务器上的时候，我们称之为“<strong>前端语言</strong>”。前端语言是服务于页面的显示和交互，不能直接操作数据库。</p>\n<p><strong>后端语言</strong>是运行在服务器上的，比如 Java、C++、PHP 等等，这些语言都能够操作数据库（对数据库进行“增删改查”），并在后台执行各种任务。</p>\n<p>另外，Node.js 是用 JavaScript 开发的，我们也可以用 Node.js 技术进行服务器端编程。</p>\n<h3 id=\"JavaScript-的组成\"><a href=\"#JavaScript-的组成\" class=\"headerlink\" title=\"JavaScript 的组成\"></a>JavaScript 的组成</h3><p>JavaScript 基础分为三个部分：</p>\n<ul>\n<li><p><strong>ECMAScript</strong>：JavaScript 的<strong>语法标准</strong>。包括变量、表达式、运算符、函数、if 语句、for 语句等。</p>\n</li>\n<li><p><strong>DOM</strong>：Document Object Model（文档对象模型），JS 操作<strong>页面上的元素</strong>（标签）的 API。比如让盒子移动、变色、改变大小、轮播图等等。</p>\n</li>\n<li><p><strong>BOM</strong>：Browser Object Model（浏览器对象模型），JS 操作<strong>浏览器部分功能</strong>的 API。通过 BOM 可以操作浏览器窗口，比如弹框、控制浏览器跳转、获取浏览器分辨率等等。</p>\n</li>\n</ul>\n<p>通俗理解就是：ECMAScript 是 JS 的语法；DOM 和 BOM 是浏览器运行环境为 JS 提供的 API。</p>\n<h2 id=\"JavaScript-的特点\"><a href=\"#JavaScript-的特点\" class=\"headerlink\" title=\"JavaScript 的特点\"></a>JavaScript 的特点</h2><h3 id=\"特点-1：解释型语言\"><a href=\"#特点-1：解释型语言\" class=\"headerlink\" title=\"特点 1：解释型语言\"></a>特点 1：解释型语言</h3><p>JavaScript 简称 JS，是前端开发的一门脚本语言（解释型语言）。</p>\n<p><strong>解释型语言</strong>的意思是：程序执行之前，不需要事先被翻译为机器码；而是在运行时，边翻译边执行（翻译一行，执行一行）。关于解释型语言的详细介绍，上一篇文章有介绍。</p>\n<p>为什么 JS 是解释型语言呢？这和浏览器的工作原理有关。浏览器中有一个专门的“JS 解析器”可以让 JS 边解析边执行。</p>\n<p>由于少了事先编译这一步骤，所以解释型语言开发起来尤为方便，但是解释型语言运行较慢也是它的劣势。不过解释型语言中使用了 JIT 技术，使得运行速度得以改善。</p>\n<h3 id=\"特点-2：单线程\"><a href=\"#特点-2：单线程\" class=\"headerlink\" title=\"特点 2：单线程\"></a>特点 2：单线程</h3><h3 id=\"特点-3：ECMAScript-标准\"><a href=\"#特点-3：ECMAScript-标准\" class=\"headerlink\" title=\"特点 3：ECMAScript 标准\"></a>特点 3：ECMAScript 标准</h3><p>ECMAScript 是一种由 ECMA 国际（前身为欧洲计算机制造商协会,英文名称是 European Computer Manufacturers Association）制定和发布的脚本语言规范。</p>\n<p>JavaScript 是由公司开发而成的，问题是不便于其他的公司拓展和使用。所以欧洲的这个 ECMA 的组织，牵头制定 JavaScript 的标准，取名为 ECMAScript。</p>\n<p>简单来说，<strong>ECMAScript 不是一门语言，而是一个标准</strong>。ECMAScript 规定了 JS 的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套 JS 语法工业标准。</p>\n<p>ECMAScript 在 2015 年 6 月，发布了 ECMAScript 6 版本（ES6），语言的能力更强，包含了很多新特性），但也要考虑它的浏览器兼容性问题。</p>\n<p>ECMA 赋予了 JavaScript 新的能力和活力。</p>\n","text":"JavaScript 历史和发展Web 前端有三层：HTML：从语义的角度，描述页面结构CSS：从审美的角度，描述样式（美化页面）JavaScript（简称 JS）：从交互的角度，描述行为（实现业务逻辑和页面控制）JavaScript 介绍JavaScript 入门易学性Java","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":52,"path":"api/tags/JavaScript.json"}]}]}