{"total":75,"pageSize":10,"pageCount":8,"data":[{"title":"24-预编译","slug":"JavaScript/24-预编译","date":"2023-02-16T07:30:25.438Z","updated":"2023-02-16T07:49:46.975Z","comments":true,"path":"api/articles/JavaScript/24-预编译.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<blockquote>\n<p>我们在上一篇文章《作用域》中简单讲过“变量提升”，今天来讲一下预编译，这对我们深入理解变量提升会有帮助。</p>\n</blockquote>\n<h2 id=\"JavaScript-运行三部曲\"><a href=\"#JavaScript-运行三部曲\" class=\"headerlink\" title=\"JavaScript 运行三部曲\"></a>JavaScript 运行三部曲</h2><ul>\n<li><p>语法分析</p>\n</li>\n<li><p>预编译</p>\n</li>\n<li><p>解释执行</p>\n</li>\n</ul>\n<h2 id=\"预编译前奏\"><a href=\"#预编译前奏\" class=\"headerlink\" title=\"预编译前奏\"></a>预编译前奏</h2><blockquote>\n<p>在讲预编译前，我们先来普及下面两个规律。</p>\n</blockquote>\n<h3 id=\"两个规律\"><a href=\"#两个规律\" class=\"headerlink\" title=\"两个规律\"></a>两个规律</h3><p><strong>规律1：任何变量，如果未经声明就赋值，此变量是属于 window 的属性</strong>，而且不会做变量提升。（注意，无论在哪个作用域内赋值）</p>\n<p>比如说，如果我们直接在代码里写 <code>console.log(a)</code>，这肯定会报错的，提示找不到 <code>a</code>。但如果我直接写 <code>a = 100</code>，这就不会报错，此时，这个 <code>a</code> 就是 <code>window.a</code>。</p>\n<p><strong>规律2：一切声明的全局变量，全是window的属性</strong>。（注意，这里说的是在全局作用域内声明的全局变量，不是说局部变量）</p>\n<p>比如，当定义 <code>var a = 200</code> 时，这个 <code>a</code> 就是 <code>window.a</code>。</p>\n<p>由此，我们可以看出：<strong>window 代表了全局作用域</strong>（是说「代表」，没说「等于」）。</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>掌握了上面两句话之后，我们再来看看下面的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = b = <span class=\"number\">100</span>; <span class=\"comment\">// 连续赋值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">b</span>); <span class=\"comment\">// 在全局范围内访问 b</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 在全局范围内访问 b，但是前面没有加 window 这个关键字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>); <span class=\"comment\">// 在全局范围内访问 a</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 在全局范围内访问 a，但是前面没有加 window 这个关键字</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上方代码的打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\"></span><br><span class=\"line\">100</span><br><span class=\"line\"></span><br><span class=\"line\">undefined</span><br><span class=\"line\"></span><br><span class=\"line\">（会报错，提示 Uncaught ReferenceError: a is not defined）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：</p>\n<p>当执行了<code>foo()</code>函数之后， <code>var a = b = 100</code> 这行<strong>连续赋值</strong>的代码等价于 <code>var a = (b = 100)</code>，其执行顺序是：</p>\n<p>（1）先把 100 赋值给 b；</p>\n<p>（2）再声明变量 a；</p>\n<p>（3）再把 b 的值赋值给 a。</p>\n<p>我们可以看到，b 是未经声明的变量就被赋值了，此时，根据规律1，这个 b 是属于 <code>window.b</code>；而 a 的作用域仅限于 foo() 函数内部，不属于 window。所以也就有了这样的打印结果。</p>\n<h2 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h2><h3 id=\"函数预编译的步骤\"><a href=\"#函数预编译的步骤\" class=\"headerlink\" title=\"函数预编译的步骤\"></a>函数预编译的步骤</h3><blockquote>\n<p>函数预编译，发生在函数执行的前一刻。</p>\n</blockquote>\n<p>（1）创建AO对象。AO即 Activation Object 活跃对象，其实就是「执行期上下文」。</p>\n<p>（2）找形参和变量声明，将形参名和变量作为 AO 的属性名，值为undefined。</p>\n<p>（3）将实参值和形参统一，实参的值赋给形参。</p>\n<p>（4）查找函数声明，函数名作为 AO 对象的属性名，值为整个函数体。</p>\n<p>这个地方比较难理解。但只有了解了函数的预编译，才能理解明白函数的执行顺序。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">666</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ƒ a() &#123;&#125;</span><br><span class=\"line\">666</span><br><span class=\"line\">666</span><br><span class=\"line\">ƒ () &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><p>JavaScript预编译原理分析：<a href=\"https://blog.csdn.net/q1056843325/article/details/52951114\">https://blog.csdn.net/q1056843325/article/details/52951114</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000018001871\">https://segmentfault.com/a/1190000018001871</a></p>\n</li>\n<li><p>预编译及变量提升：<a href=\"https://juejin.im/post/5aa6693df265da23884cb571\">https://juejin.im/post/5aa6693df265da23884cb571</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5adaf8215188256712781830\">https://juejin.im/post/5adaf8215188256712781830</a></p>\n</li>\n<li><p><a href=\"https://www.qqzmly.com/archives/1521\">https://www.qqzmly.com/archives/1521</a></p>\n</li>\n<li><p>宏任务&amp;微任务相关：<a href=\"https://segmentfault.com/a/1190000018134157\">https://segmentfault.com/a/1190000018134157</a></p>\n</li>\n</ul>\n","text":"我们在上一篇文章《作用域》中简单讲过“变量提升”，今天来讲一下预编译，这对我们深入理解变量提升会有帮助。JavaScript 运行三部曲语法分析预编译解释执行预编译前奏在讲预编译前，我们先来普及下面两个规律。两个规律规律1：任何变量，如果未经声明就赋值，此变量是属于 window","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"23-作用域、变量提升、函数提升","slug":"JavaScript/23-作用域、变量提升、函数提升","date":"2023-02-16T07:30:25.435Z","updated":"2023-02-16T07:49:36.202Z","comments":true,"path":"api/articles/JavaScript/23-作用域、变量提升、函数提升.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><h3 id=\"作用域（Scope）的概念和分类\"><a href=\"#作用域（Scope）的概念和分类\" class=\"headerlink\" title=\"作用域（Scope）的概念和分类\"></a>作用域（Scope）的概念和分类</h3><ul>\n<li><p><strong>概念</strong>：作用域是一个变量或函数的作用范围。作用域在<strong>函数定义</strong>时，就已经确定了。</p>\n</li>\n<li><p><strong>目的</strong>：为了提高程序的可靠性，同时减少命名冲突。</p>\n</li>\n</ul>\n<p>在 JS 中，一共有两种作用域：（ES5 中）</p>\n<ul>\n<li><strong>全局作用域</strong>：作用于整个 script 标签内部，或者作用于一个独立的 JS 文件。</li>\n<li><strong>函数作用域</strong>（局部作用域）：作用于函数内的代码环境。</li>\n</ul>\n<h3 id=\"全局作用域-和-window-对象\"><a href=\"#全局作用域-和-window-对象\" class=\"headerlink\" title=\"全局作用域 和 window 对象\"></a>全局作用域 和 window 对象</h3><p>直接编写在 script 标签中的 JS 代码，都在全局作用域。全局作用域在页面打开时创建，在页面关闭时销毁。</p>\n<p>在全局作用域中有一个全局对象 window，它代表的是浏览器的窗口，由浏览器创建，我们可以直接使用。相关知识点如下：</p>\n<ul>\n<li>创建的<strong>变量</strong>都会作为 window 对象的属性保存。比如在全局作用域内写 <code>const a = 100</code>，这里的 <code>a</code> 等价于 <code>window.a</code>。</li>\n<li>创建的<strong>函数</strong>都会作为 window 对象的方法保存。</li>\n</ul>\n<h3 id=\"作用域的访问关系\"><a href=\"#作用域的访问关系\" class=\"headerlink\" title=\"作用域的访问关系\"></a>作用域的访问关系</h3><p>在内部作用域中可以访问外部作用域的变量，在外部作用域中无法访问到内部作用域的变量。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"string\">&#x27;bbb&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：aaa。说明 内层作用域 可以访问 外层作用域 里的变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 报错：Uncaught ReferenceError: b is not defined。说明 外层作用域 无法访问 内层作用域 里的变量</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h3><p>根据作用域的不同，变量可以分为两类：全局变量、局部变量。</p>\n<p><strong>全局变量</strong>：</p>\n<ul>\n<li>在全局作用域下声明的变量，叫「全局变量」。在全局作用域的任何一地方，都可以访问这个变量。</li>\n<li>在全局作用域下声明的变量是全局变量。</li>\n</ul>\n<p><strong>局部变量</strong>：</p>\n<ul>\n<li>定义在函数作用域的变量，叫「局部变量」。仅限函数内部访问这个变量。</li>\n<li>函数的<strong>形参</strong>也是属于局部变量。</li>\n</ul>\n<p>从执行效率来看全局变量和局部变量：</p>\n<ul>\n<li><p>全局变量：只有浏览器关闭时才会被销毁，比较占内存。</p>\n</li>\n<li><p>局部变量：当其所在的代码块运行结束后，就会被销毁，比较节约内存。</p>\n</li>\n</ul>\n<p><strong>特殊情况：</strong></p>\n<p>（1）无论是在函数外还是函数内，变量如果未经声明就赋值（意思是，如果不加var&#x2F;let&#x2F;const），这个变量是<strong>全局变量</strong>。</p>\n<p>比如：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明变量时如果不加var/let/const，这个变量是全局变量。且可以被修改。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(); <span class=\"comment\">// 这行代码必须要写，否则下一行代码执行时会报错：Uncaught ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：1</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，我们不建议这么用。</p>\n<p>（2）如果局部变量和全局变量重名，则在函数内部，变量是以局部变量为准。</p>\n<h3 id=\"作用域的上下级关系\"><a href=\"#作用域的上下级关系\" class=\"headerlink\" title=\"作用域的上下级关系\"></a>作用域的上下级关系</h3><p>当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用（<strong>就近原则</strong>）。如果没有则向上一级作用域中寻找，直到找到全局作用域；如果全局作用域中依然没有找到，则会报错 ReferenceError。</p>\n<p>在函数中要访问全局变量可以使用 window 对象。（比如说，全局作用域和函数作用域都定义了变量 a，如果想访问全局变量，可以使用<code>window.a</code>）</p>\n<h2 id=\"全局作用域的预处理\"><a href=\"#全局作用域的预处理\" class=\"headerlink\" title=\"全局作用域的预处理\"></a>全局作用域的预处理</h2><p><strong>预处理（预解析）</strong>的概念：JS在解析代码之前，有一个“预处理（预解析）”阶段，将当前 JS 代码中所有变量的定义和函数的定义，放到所有代码的最前面。</p>\n<p>（打个比方，学生在学习文言文之前，会扫读整篇文章，做简单的预习。）</p>\n<p>这种预解析，也称之为声明提前。</p>\n<h3 id=\"变量的声明提前（变量提升）\"><a href=\"#变量的声明提前（变量提升）\" class=\"headerlink\" title=\"变量的声明提前（变量提升）\"></a>变量的声明提前（变量提升）</h3><p>使用 var 关键字声明的变量（ 比如 <code>var a = 1</code>），<strong>会在所有的代码执行之前被声明</strong>（但是不会赋值）。但是如果声明变量时不是用 var 关键字（比如直接写<code>a = 1</code>），则变量不会被声明提前。</p>\n<p><strong>举例 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：undefined。注意，打印结果并没有报错，而是 undefined，说明变量 a 被提前声明了，只是尚未被赋值。</p>\n<p><strong>举例 2</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">a = <span class=\"number\">123</span>; <span class=\"comment\">//此时a相当于window.a</span></span><br></pre></td></tr></table></figure>\n\n<p>程序会报错：<code>Uncaught ReferenceError: a is not defined</code>。</p>\n<p><strong>举例 3</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">123</span>; <span class=\"comment\">//此时a相当于window.a</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：123。</p>\n<p><strong>举例 4</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：undefined。注意，打印结果并没有报错，而是 undefined。这个例子，再次说明了：变量 i 在函数执行前，就被提前声明了，只是尚未被赋值。</p>\n<p>例 4 中， <code>if(false)</code>里面的代码虽然不会被执行，但是整个代码有<strong>解析</strong>的环节，解析的时候就已经把 变量 i 给提前声明了。</p>\n<p><strong>总结</strong>：</p>\n<p>既然在ES5 中存在变量提升的现象，那么，在实战开发中，为了避免出错，建议先声明一个变量，然后再使用这个变量。</p>\n<h3 id=\"函数的声明提前（函数提升）\"><a href=\"#函数的声明提前（函数提升）\" class=\"headerlink\" title=\"函数的声明提前（函数提升）\"></a>函数的声明提前（函数提升）</h3><p><strong>函数声明</strong>：</p>\n<p>使用<code>函数声明</code>的形式创建的函数<code>function foo()&#123;&#125;</code>，<strong>会被声明提前</strong>。</p>\n<p>也就是说，整个函数会在所有的代码执行之前就被<strong>创建完成</strong>。所以，在代码顺序上，我们可以先调用函数，再定义函数。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fn1</span>(); <span class=\"comment\">// 虽然 函数 fn1 的定义是在后面，但是因为被提前声明了， 所以此处可以调用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是函数 fn1&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数表达式</strong>：</p>\n<p>使用<code>函数表达式</code>创建的函数<code>const foo = function()&#123;&#125;</code>，<strong>不会被声明提前</strong>，所以不能在声明前调用。</p>\n<p>很好理解，因为此时只是变量 foo 被提升了，且值为 undefined，并没有把 <code>function()&#123;&#125;</code> 赋值给 foo。</p>\n<p>所以，下面的例子会报错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不会报错，可以正常执行函数，正常打印结果</span></span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时 fun2 相当于 undefined。执行时会报错：Uncaught ReferenceError: Cannot access &#x27;fun2&#x27; before initialization</span></span><br><span class=\"line\"><span class=\"title function_\">fun2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数声明，会被提前声明</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是 fun1 函数&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数表达式，不会被提前声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fun2 = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是 fun12 函数&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数提升优先于变量提升\"><a href=\"#函数提升优先于变量提升\" class=\"headerlink\" title=\"函数提升优先于变量提升\"></a>函数提升优先于变量提升</h3><p>在JS的规则中，函数提升优先于变量提升。来看看下面这段代码，你认为打印结果应该如何：（这是一道经典面试题）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">// 打印 B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量提升</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数提升</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">// 打印 A</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B</span><br><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n\n<p>当声明被提前后，上方代码的实际顺序可以这样理解：（把它当成伪代码理解即可）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*伪代码*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数提升</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">// 打印 B</span></span><br><span class=\"line\"></span><br><span class=\"line\">fun = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">// 打印A</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，上方代码是ES5写法，如果把 var 改成ES6中的 let&#x2F;const，代码会报错<code>Uncaught SyntaxError: Identifier &#39;fun&#39; has already been declared</code>。也就是说，ES6中不需要关心谁优先提升的问题了。</p>\n<h2 id=\"函数作用域的预处理\"><a href=\"#函数作用域的预处理\" class=\"headerlink\" title=\"函数作用域的预处理\"></a>函数作用域的预处理</h2><p>上一段讲的是全局作用域中的声明提前。在函数作用域中，也有声明提前的现象：</p>\n<ul>\n<li><p>函数中，使用 var 关键字声明的变量，会在函数中所有代码执行之前被提前声明。</p>\n</li>\n<li><p>函数中，没有 var 声明的变量都是<strong>全局变量</strong>，且并不会被提前声明。</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    a = <span class=\"number\">2</span>; <span class=\"comment\">// 此处的a相当于window.a</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//打印结果是2</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，执行 foo() 后，函数里面的打印结果是<code>1</code>。如果去掉第一行代码，执行 foo() 后，函数里面的打印结果是<code>Uncaught ReferenceError: a is not defined</code>。</p>\n<p><strong>补充</strong>：定义形参就相当于在函数作用域中声明了变量。举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个函数中，因为有了形参 e，此时相当于在函数内部的第一行代码里，写了 var e;</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">//打印结果为 undefined</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"number\">123</span>); <span class=\"comment\">//打印结果为123</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES5中没有块级作用域\"><a href=\"#ES5中没有块级作用域\" class=\"headerlink\" title=\"ES5中没有块级作用域\"></a>ES5中没有块级作用域</h2><p>在其他编程语言中（如 Java、C#等），存在块级作用域，由<code>&#123;&#125;</code>包括起来。比如在 Java 语言中，if 语句里创建的变量，只能在 if 语句内部使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    system.out.print(num); <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">system.out.print(num); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>但是，在 ES5 中没有块级作用域。举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">//123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">//123（可以正常打印）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>先来认识函数的嵌套：</p>\n<ul>\n<li><p>只要是代码，就至少有一个作用域</p>\n</li>\n<li><p>函数内部有局部作用域</p>\n</li>\n<li><p>如果函数内部还嵌套了函数，那么在这个作用域中就又诞生了另一个作用域。</p>\n</li>\n</ul>\n<p>基于上面几条内容，我们可以得出作用域链的概念。</p>\n<p><strong>作用域链</strong>：在嵌套函数中，变量会从内到外逐层寻找它的定义（查找时，采用<strong>就近原则</strong>）。也就是说，采用的是链式查找的方式来决定取哪个值，这种结构称之为作用域链。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 外部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">fun</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：20。</p>\n","text":"作用域作用域（Scope）的概念和分类概念：作用域是一个变量或函数的作用范围。作用域在函数定义时，就已经确定了。目的：为了提高程序的可靠性，同时减少命名冲突。在 JS 中，一共有两种作用域：（ES5 中）全局作用域：作用于整个 script 标签内部，或者作用于一个独立的 JS ","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"22-立即执行函数","slug":"JavaScript/22-立即执行函数","date":"2023-02-16T07:30:25.432Z","updated":"2023-02-16T07:48:47.871Z","comments":true,"path":"api/articles/JavaScript/22-立即执行函数.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"立即执行函数-IIFE\"><a href=\"#立即执行函数-IIFE\" class=\"headerlink\" title=\"立即执行函数 IIFE\"></a>立即执行函数 IIFE</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>函数定义完，就立即被调用，这种函数叫做立即执行函数。英文是 IIFE（Immediately-invoked function expression），立即调用函数表达式。</p>\n<h3 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h3><p>语法1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>语法2：（立即执行函数也可以传参）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">&#125;)(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>语法解释：</p>\n<ul>\n<li><code>function()&#123;&#125;</code>这种写法，需要再加一对圆括号，变成&#96;&#96;</li>\n</ul>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>现有匿名函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a = &quot;</span> + a);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;b = &quot;</span> + b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>立即执行函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a = &quot;</span> + a);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;b = &quot;</span> + b);</span><br><span class=\"line\">&#125;)(<span class=\"number\">123</span>, <span class=\"number\">456</span>);</span><br></pre></td></tr></table></figure>\n\n<p>立即执行函数往往只会执行一次。为什么呢？因为没有变量保存它，执行完了之后，就找不到它了。</p>\n<h2 id=\"IIFE的作用\"><a href=\"#IIFE的作用\" class=\"headerlink\" title=\"IIFE的作用\"></a>IIFE的作用</h2><h3 id=\"为变量赋值\"><a href=\"#为变量赋值\" class=\"headerlink\" title=\"为变量赋值\"></a>为变量赋值</h3><p>当给变量赋值需要一些较复杂的计算时，使用IIFE显得语法更紧凑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"string\">&#x27;male&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> nickName = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sex == <span class=\"string\">&#x27;male&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;帅哥&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;美女&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nickName);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将全局变量变为局部变量\"><a href=\"#将全局变量变为局部变量\" class=\"headerlink\" title=\"将全局变量变为局部变量\"></a>将全局变量变为局部变量</h3><p>现有如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  arr.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr[<span class=\"number\">2</span>](); <span class=\"comment\">// 打印5</span></span><br></pre></td></tr></table></figure>\n\n<p>我们知道，上方代码中，i 是全局变量，所有函数共享内存中的同一个变量i。</p>\n<p>现在，我们通过立即执行函数进行改造：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span> (<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr[<span class=\"number\">2</span>](); <span class=\"comment\">// 打印2</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，i作为传递给了IIFE的形参，让 i 得以成为 IIFE 的局部变量；并让 IIFE 并形成了闭包（<code>arr[2]()</code>打印出了IIFE内部变量 i 的值，说明形成了闭包）。</p>\n","text":"立即执行函数 IIFE概念函数定义完，就立即被调用，这种函数叫做立即执行函数。英文是 IIFE（Immediately-invoked function expression），立即调用函数表达式。语法格式语法1：1<br>2<br>3<br>(function() &#123;","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"21-递归函数","slug":"JavaScript/21-递归函数","date":"2023-02-16T07:30:25.430Z","updated":"2023-02-16T07:49:10.595Z","comments":true,"path":"api/articles/JavaScript/21-递归函数.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>如果一个函数在内部调用这个函数自身，这个函数就是递归函数。</p>\n<p>递归在数据结构和算法中经常用到，可以将很多复杂的数据模型拆解为简单问题进行求解。一定要掌握。</p>\n<h3 id=\"递归的要素\"><a href=\"#递归的要素\" class=\"headerlink\" title=\"递归的要素\"></a>递归的要素</h3><ul>\n<li>递归模式：把大问题拆解为小问题进行分析。也称为递归体。</li>\n<li>边界条件：需要确定递归到何时结束。也称为递归出口。</li>\n</ul>\n<h3 id=\"代码演示：计算阶乘\"><a href=\"#代码演示：计算阶乘\" class=\"headerlink\" title=\"代码演示：计算阶乘\"></a>代码演示：计算阶乘</h3><p>提问：求一个正整数的阶乘。</p>\n<p><strong>普通写法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数：计算一个正整数的阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    result *= i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">factorial</span>(<span class=\"number\">5</span>)); <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n\n<p>现在，我们学习了递归函数之后，会有更简洁的写法。</p>\n<p><strong>递归写法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归函数：计算一个正整数的阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 递归出口：如果计算1的阶乘，就不用递归了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 开始递归：如果当前这个 n 不是1，就返回 n * (n-1)!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * <span class=\"title function_\">factorial</span>(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">factorial</span>(<span class=\"number\">5</span>)); <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"递归函数的案例\"><a href=\"#递归函数的案例\" class=\"headerlink\" title=\"递归函数的案例\"></a>递归函数的案例</h2><h3 id=\"寻找所有的喇叭花数\"><a href=\"#寻找所有的喇叭花数\" class=\"headerlink\" title=\"寻找所有的喇叭花数\"></a>寻找所有的喇叭花数</h3><p>题目：喇叭花数是一个<strong>三位数</strong>，其每一位数字的阶乘之和恰好等于它本身，即<code>abc＝a! + b! + c!</code>，其中abc表示一个三位数。请找出所有的喇叭花数。</p>\n<p>思路：将计算某个数字的阶乘封装成函数。</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归函数：计算一个数的阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 递归出口：如果计算1的阶乘，就不用递归了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 开始递归：如果当前这个 n 不是1，就返回 n * (n-1)!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * <span class=\"title function_\">factorial</span>(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 穷举法，从100到999遍历，寻找喇叭花数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">100</span>; i &lt;= <span class=\"number\">999</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将数字i转为字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> i_str = i.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  <span class=\"comment\">// abc分别表示百位、十位、个位</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"title class_\">Number</span>(i_str[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"title class_\">Number</span>(i_str[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"title class_\">Number</span>(i_str[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据喇叭花数的条件进行判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">factorial</span>(a) + <span class=\"title function_\">factorial</span>(b) + <span class=\"title function_\">factorial</span>(c) == i) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">145</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><p>斐波那契数列是这样一个数列：1、1、2、3、5、8、13、21、34……最早是由意大利数学家斐波那契开始研究的。它的规律是：下标为0和1的项，值为1；从下标为2的项开始，每一项等于前面两项之和。</p>\n<p>提问：请找出斐波那契数列的前10项。</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归函数：返回斐波那契数列中下标为n的那一项的值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 下标为0和1的项，值为1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 从下标为2的项开始，每一项等于前面两项之和</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">fib</span>(n - <span class=\"number\">1</span>) + <span class=\"title function_\">fib</span>(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环语句：打印斐波那契数列的前10项</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">15</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fib</span>(i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>关于递归的案例，后面还会有更多的应用场景。比如<strong>深拷贝</strong>就会用到递归。</p>\n","text":"递归函数概念如果一个函数在内部调用这个函数自身，这个函数就是递归函数。递归在数据结构和算法中经常用到，可以将很多复杂的数据模型拆解为简单问题进行求解。一定要掌握。递归的要素递归模式：把大问题拆解为小问题进行分析。也称为递归体。边界条件：需要确定递归到何时结束。也称为递归出口。代码","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"20-函数简介","slug":"JavaScript/20-函数简介","date":"2023-02-16T07:30:25.428Z","updated":"2023-02-16T07:31:56.791Z","comments":true,"path":"api/articles/JavaScript/20-函数简介.json","excerpt":"","keywords":null,"cover":"https://img.smyhvae.com/20220725_2000.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"函数的介绍\"><a href=\"#函数的介绍\" class=\"headerlink\" title=\"函数的介绍\"></a>函数的介绍</h2><p>函数：就是一些功能或语句的<strong>封装</strong>。在需要的时候，通过<strong>调用</strong>的形式，执行这些语句。</p>\n<p>补充：</p>\n<ul>\n<li><p><strong>函数也是一个对象</strong></p>\n</li>\n<li><p>使用<code>typeof</code>检查一个函数对象时，会返回 function</p>\n</li>\n</ul>\n<p><strong>函数的作用</strong>：</p>\n<ul>\n<li><p>一次定义，多次调用。将大量重复的语句抽取出来，写在函数里，以后需要这些语句时，可以直接调用函数，避免重复劳动。</p>\n</li>\n<li><p>简化代码，可读性更强，让编程模块化。高内聚、低耦合。</p>\n</li>\n</ul>\n<p>来看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你好&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>();\t<span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>();\t<span class=\"comment\">// 再调用一次函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;欢迎&quot;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;welcome&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的定义-x2F-声明\"><a href=\"#函数的定义-x2F-声明\" class=\"headerlink\" title=\"函数的定义&#x2F;声明\"></a>函数的定义&#x2F;声明</h2><p>我们使用<code>function</code>关键字定义函数，中文含义是“函数”、“功能”。可以使用如下方式进行定义。</p>\n<h3 id=\"方式一：函数声明（命名函数）\"><a href=\"#方式一：函数声明（命名函数）\" class=\"headerlink\" title=\"方式一：函数声明（命名函数）\"></a>方式一：函数声明（命名函数）</h3><p>使用<code>函数声明</code>来创建一个函数。语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 函数名([形参<span class=\"number\">1</span>,形参<span class=\"number\">2.</span>..形参N])&#123;  <span class=\"comment\">// 备注：语法中的中括号，表示“可选”</span></span><br><span class=\"line\">\t<span class=\"comment\">// 函数体语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释如下：</p>\n<ul>\n<li><p>函数名：命名规定和变量的命名规定一样，必须符合JS标识符的命名规则。只能是字母、数字、下划线、美元符号，不能以数字开头。</p>\n</li>\n<li><p>圆括号里，是形参列表，可选。即使没有形参，也必须书写圆括号。</p>\n</li>\n<li><p>大括号里，是函数体语句。</p>\n</li>\n</ul>\n<p>PS：在有些编辑器中，方法写完之后，我们在方法的前面输入<code>/**</code>，然后回车，会发现，注释的格式会自动补齐。</p>\n<h3 id=\"方式二：函数表达式（匿名函数）\"><a href=\"#方式二：函数表达式（匿名函数）\" class=\"headerlink\" title=\"方式二：函数表达式（匿名函数）\"></a>方式二：函数表达式（匿名函数）</h3><p>使用<code>函数表达式</code>来创建一个函数。语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 变量名  = <span class=\"keyword\">function</span>(<span class=\"params\">[形参<span class=\"number\">1</span>,形参<span class=\"number\">2.</span>..形参N]</span>)&#123;</span><br><span class=\"line\">\t语句....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fun2 = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是匿名函数中封装的代码&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>解释如下：</p>\n<ul>\n<li><p>上面的 fun2 是变量名，不是函数名。</p>\n</li>\n<li><p>函数表达式的声明方式跟声明变量类似，只不过变量里存的是值，而函数表达式里存的是函数。</p>\n</li>\n<li><p>函数表达式也可以传递参数。</p>\n</li>\n</ul>\n<p>从方式二的举例中可以看出：所谓的“函数表达式”，其实就是将匿名函数赋值给一个变量。因为，一个匿名函数终究还是要给它一个接收对象，进而方便地调用这个函数。</p>\n<h3 id=\"方式三：使用构造函数-new-Function\"><a href=\"#方式三：使用构造函数-new-Function\" class=\"headerlink\" title=\"方式三：使用构造函数 new Function()\"></a>方式三：使用构造函数 new Function()</h3><p>使用构造函数<code>new Function()</code>来创建一个对象。这种方式，用的少。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 变量名/函数名  = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;形参1&#x27;</span>, <span class=\"string\">&#x27;形参2&#x27;</span>, <span class=\"string\">&#x27;函数体&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意，Function 里面的参数都必须是<strong>字符串</strong>格式。也就是说，形参也必须放在<strong>字符串</strong>里；函数体也是放在<strong>字符串</strong>里包裹起来，放在 Function 的最后一个参数的位置。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fun3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;console.log(&quot;我是函数内部的内容&quot;);  console.log(a + b);&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun3</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 调用函数</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是函数内部的内容</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<p><strong>分析</strong>：</p>\n<p>方式3的写法很少用，原因如下：</p>\n<ul>\n<li><p>不方便书写：写法过于啰嗦和麻烦。</p>\n</li>\n<li><p>执行效率较低：首先需要把字符串转换为 js 代码，然后再执行。</p>\n</li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>1、<strong>所有的函数，都是 <code>Fuction</code> 的“实例”</strong>（或者说是“实例对象”）。函数本质上都是通过 new Function 得到的。</p>\n<p>2、函数既然是实例对象，那么，<strong>函数也属于“对象”</strong>。还可以通过如下特征，来佐证函数属于对象：</p>\n<p>（1）我们直接打印某一个函数，比如 <code>console.log(fun2)</code>，发现它的里面有<code>__proto__</code>。（这个是属于原型的知识，后续再讲）</p>\n<p>（2）我们还可以打印 <code>console.log(fun2 instanceof Object)</code>，发现打印结果为 <code>true</code>。这说明 fun2 函数就是属于 Object。</p>\n<h2 id=\"函数的调用\"><a href=\"#函数的调用\" class=\"headerlink\" title=\"函数的调用\"></a>函数的调用</h2><p>调用函数即：执行函数体中的语句。函数必须要等到被调用时才执行。</p>\n<h3 id=\"方式1：普通函数的调用\"><a href=\"#方式1：普通函数的调用\" class=\"headerlink\" title=\"方式1：普通函数的调用\"></a>方式1：普通函数的调用</h3><p>函数调用的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法1（最常用）</span></span><br><span class=\"line\">函数名();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法2</span></span><br><span class=\"line\">函数名.<span class=\"title function_\">call</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是函数体里面的内容1&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是函数体里面的内容2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>(); <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">fn2.<span class=\"title function_\">call</span>(); <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式2：通过对象的方法来调用\"><a href=\"#方式2：通过对象的方法来调用\" class=\"headerlink\" title=\"方式2：通过对象的方法来调用\"></a>方式2：通过对象的方法来调用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">fn2</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;千古壹号，永不止步!&#x27;</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">fn2</span>(); <span class=\"comment\">// 调用函数</span></span><br></pre></td></tr></table></figure>\n\n<p>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的<strong>方法</strong>。</p>\n<p>PS：关于函数和方法的区别，本文的后续内容里有讲到，可以往下面翻。</p>\n<h3 id=\"方式3：立即执行函数\"><a href=\"#方式3：立即执行函数\" class=\"headerlink\" title=\"方式3：立即执行函数\"></a>方式3：立即执行函数</h3><p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是立即执行函数&#x27;</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>立即执行函数在定义后，会自动调用。</p>\n<p>PS：关于立即执行函数，本文的后续内容里有讲到，可以往下面翻。</p>\n<p>上面讲到的这三种方式，是用得最多的。接下来讲到的三种方式，暂时看不懂也没关系，可以等学完其他的知识点，再回过头来看。</p>\n<h3 id=\"方式4：通过构造函数来调用\"><a href=\"#方式4：通过构造函数来调用\" class=\"headerlink\" title=\"方式4：通过构造函数来调用\"></a>方式4：通过构造函数来调用</h3><p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fun3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;千古壹号，永不止步~&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Fun3</span>();</span><br></pre></td></tr></table></figure>\n\n<p>这种方式用得不多。</p>\n<h3 id=\"方式5：绑定事件函数\"><a href=\"#方式5：绑定事件函数\" class=\"headerlink\" title=\"方式5：绑定事件函数\"></a>方式5：绑定事件函数</h3><p>代码举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>我是按钮，请点击我<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//2.绑定事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;点击按钮后，要做的事情&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里涉及到DOM操作和事件的知识点，后续再讲。</p>\n<h3 id=\"方式6：定时器函数\"><a href=\"#方式6：定时器函数\" class=\"headerlink\" title=\"方式6：定时器函数\"></a>方式6：定时器函数</h3><p>代码举例：（每间隔一秒，将 数字 加1）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    num ++;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这里涉及到定时器的知识点。</p>\n<h2 id=\"函数的参数：形参和实参\"><a href=\"#函数的参数：形参和实参\" class=\"headerlink\" title=\"函数的参数：形参和实参\"></a>函数的参数：形参和实参</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>函数的参数包括形参和实参。形参是函数内的一些<strong>待定值</strong>。在调用函数时，需传入这些参数的具体值（即实参）。</p>\n<p>可以在函数的<code>()</code>中指定一个或多个参数，也可以不指定参数。多个参数之间用英文逗号隔开。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a, b 是形参，表示待定值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = a + b;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1, 2 是实参，表示传入的具体值。调用函数时，传入实参</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>形参：</strong></p>\n<ul>\n<li>概念：形式上的参数。定义函数时传递的待定值（此时并不知道是什么值）。</li>\n<li>声明形参相当于在函数内部声明了变量，但并不赋值。也可以说，<strong>形参的默认值是 undefined</strong>。</li>\n</ul>\n<p><strong>实参</strong>：</p>\n<ul>\n<li>概念：实际上的参数。调用函数时传递的具体值。实参将传递给函数中对应的形参。</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"string\">&quot;3&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;World&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义函数：求和</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7</span><br><span class=\"line\">34</span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"形参和实参的个数\"><a href=\"#形参和实参的个数\" class=\"headerlink\" title=\"形参和实参的个数\"></a>形参和实参的个数</h3><p>实际参数和形式参数的个数，可以不同。调用函数时，解析器不会检查实参的数量。</p>\n<ul>\n<li>如果实参个数 &gt; 形参个数，则末尾的实参是多余的，不会被赋值，因为没有形参能接收它。</li>\n<li>如果实参个数 &lt; 形参个数，则末尾的形参是多余的，值是 undefined，因为它没有接收到实参。（undefined参与运算时，表达式的运算结果为NaN）</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">NaN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实参的数据类型\"><a href=\"#实参的数据类型\" class=\"headerlink\" title=\"实参的数据类型\"></a>实参的数据类型</h3><p>函数的实参可以是任意的数据类型。调用函数时，解析器不会检查实参类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型检查。</p>\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><h3 id=\"return-关键字\"><a href=\"#return-关键字\" class=\"headerlink\" title=\"return 关键字\"></a>return 关键字</h3><p>函数体内可以没有返回值，也可以根据需要加返回值。语法格式：<code>return 函数的返回值</code>。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>)); <span class=\"comment\">// 将函数的返回值打印出来</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数：求和</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>return关键字的作用既可以是<strong>终止函数</strong>，也可以给函数添加返回值。</p>\n<p>解释：</p>\n<p>（1）return 后的返回值将会作为函数的执行结果返回，可以定义一个变量，来接收该返回值。</p>\n<p>（2）在函数中，return后的语句都不会执行。也就是说，函数在执行完 return 语句之后，会立即退出函数。</p>\n<p>（3）如果return语句后不跟任何值，就相当于返回一个undefined</p>\n<p>（4）如果函数中不写return，则也会返回undefined</p>\n<p>（5）返回值可以是任意的数据类型，可以是对象，也可以是函数。</p>\n<p>（6）return 只能返回一个值。如果用逗号隔开多个值，则以最后一个为准。</p>\n<h3 id=\"break、continue、return-的区别\"><a href=\"#break、continue、return-的区别\" class=\"headerlink\" title=\"break、continue、return 的区别\"></a>break、continue、return 的区别</h3><ul>\n<li><p>break ：结束当前的循环体（如 for、while）</p>\n</li>\n<li><p>continue ：跳出本次循环，继续执行下次循环（如 for、while）</p>\n</li>\n<li><p>return ：1、退出循环。2、返回 return 语句中的值，同时结束当前的函数体内的代码，退出当前函数。</p>\n</li>\n</ul>\n<h2 id=\"函数名、函数体和函数加载问题（重要，请记住）\"><a href=\"#函数名、函数体和函数加载问题（重要，请记住）\" class=\"headerlink\" title=\"函数名、函数体和函数加载问题（重要，请记住）\"></a>函数名、函数体和函数加载问题（重要，请记住）</h2><p>我们要记住：<strong>函数名 &#x3D;&#x3D; 整个函数</strong>。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn) == <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">alert</span>(<span class=\"number\">1</span>)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义fn方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">alert</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们知道，当我们在调用一个函数时，通常使用<code>函数()</code>这种格式；可如果，我们是直接使用<code>函数</code>这种格式，它的作用相当于整个函数。</p>\n<p><strong>函数的加载问题</strong>：JS加载的时候，只加载函数名，不加载函数体。所以如果想使用内部的成员变量，需要调用函数。</p>\n<h3 id=\"fn-和-fn-的区别【重要】\"><a href=\"#fn-和-fn-的区别【重要】\" class=\"headerlink\" title=\"fn()  和 fn 的区别【重要】\"></a>fn()  和 fn 的区别【重要】</h3><ul>\n<li><p><code>fn()</code>：调用函数。调用之后，还获取了函数的返回值。</p>\n</li>\n<li><p><code>fn</code>：函数对象。相当于直接获取了整个函数对象。</p>\n</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>函数也可以成为对象的属性。<strong>如果一个函数是作为一个对象的属性保存，那么，我们称这个函数是这个对象的方法</strong>。</p>\n<p>调用这个函数就说调用对象的方法（method）。函数和方法，有什么本质的区别吗？它只是名称上的区别，并没有其他的区别。</p>\n<p>函数举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>方法举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">obj.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>我们可以这样说，如果直接是<code>fn()</code>，那就说明是函数调用。如果是<code>XX.fn()</code>的这种形式，那就说明是<strong>方法</strong>调用。</p>\n<h2 id=\"类数组对象-arguments\"><a href=\"#类数组对象-arguments\" class=\"headerlink\" title=\"类数组对象 arguments\"></a>类数组对象 arguments</h2><blockquote>\n<p>这部分，初学者可能看不懂，可以以后再来看。</p>\n</blockquote>\n<p>在调用函数时，浏览器每次都会传递进两个隐含的参数：</p>\n<ul>\n<li><p>1.函数的上下文对象 this</p>\n</li>\n<li><p>2.<strong>封装实参的对象</strong> arguments</p>\n</li>\n</ul>\n<p>这一段，我们来讲一下 arguments。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"https://img.smyhvae.com/20220725_2000.png\"></p>\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>函数内的 arguments 是一个<strong>类数组对象</strong>，里面存储的是它接收到的<strong>实参列表</strong>。所有函数都内置了一个 arguments 对象，有个讲究的地方是：只有函数才有arguments。</p>\n<p>具体来说，在调用函数时，我们所传递的实参都会在 arguments 中保存。<strong>arguments 代表的是所有实参</strong>。</p>\n<p>arguments 的展示形式是一个<strong>伪数组</strong>。意思是，它和数组有点像，但它并不是数组。它具有以下特点：</p>\n<ul>\n<li><p>可以进行遍历；具有数组的 length 属性，可以获取长度。</p>\n</li>\n<li><p>可以通过索引（从0开始计数）存储数据、获取和操作数据。比如，我们可以通过索引访问某个实参。</p>\n</li>\n<li><p>不能调用数组的方法。比如push()、pop() 等方法都没有。</p>\n</li>\n</ul>\n<p>我们看一下 arguments 的使用。</p>\n<h3 id=\"arguments-length-返回函数实参的个数\"><a href=\"#arguments-length-返回函数实参的个数\" class=\"headerlink\" title=\"arguments.length 返回函数实参的个数\"></a>arguments.length 返回函数实参的个数</h3><p>arguments.length 可以用来获取<strong>实参的个数</strong>。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn.<span class=\"property\">length</span>); <span class=\"comment\">//获取形参的个数</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>); <span class=\"comment\">//获取实参的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;----------------&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180125_2140.png\"></p>\n<p>此外，即使我们不定义形参，也可以通过 arguments 来获取实参：arguments[0] 表示第一个实参、arguments[1] 表示第二个实参，以此类推。</p>\n<p>举例：将传入的实参进行求和，无论实参的个数有多少。代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    sum += <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">foo</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"arguments-callee-返回正在执行的函数\"><a href=\"#arguments-callee-返回正在执行的函数\" class=\"headerlink\" title=\"arguments.callee 返回正在执行的函数\"></a>arguments.callee 返回正在执行的函数</h3><p>arguments 里边有一个属性叫做 callee，这个属性对应一个函数对象，就是当前正在指向的函数对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">callee</span> == fun); <span class=\"comment\">// 打印结果为true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在使用函数<strong>递归</strong>调用时，推荐使用 arguments.callee 代替函数名本身。</p>\n<h3 id=\"arguments-可以修改元素\"><a href=\"#arguments-可以修改元素\" class=\"headerlink\" title=\"arguments 可以修改元素\"></a>arguments 可以修改元素</h3><p>arguments 还可以<strong>修改元素，但不能改变数组的长度</strong>。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">99</span>; <span class=\"comment\">// 将实参的第一个数改为99</span></span><br><span class=\"line\">    <span class=\"variable language_\">arguments</span>.<span class=\"title function_\">push</span>(<span class=\"number\">8</span>); <span class=\"comment\">// 此方法不通过，因为无法增加元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用场景举例\"><a href=\"#使用场景举例\" class=\"headerlink\" title=\"使用场景举例\"></a>使用场景举例</h3><p>当我们不确定有多少个参数传递的时候，可以用 <strong>arguments</strong> 来获取。</p>\n<p><strong>举例</strong>：利用 arguments 求函数实参中的最大值。</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMaxValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> max = <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// 通过 arguments 遍历实参</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (max &lt; <span class=\"variable language_\">arguments</span>[i]) &#123;</span><br><span class=\"line\">\t\t\tmax = <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMaxValue</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","text":"函数的介绍函数：就是一些功能或语句的封装。在需要的时候，通过调用的形式，执行这些语句。补充：函数也是一个对象使用typeof检查一个函数对象时，会返回 function函数的作用：一次定义，多次调用。将大量重复的语句抽取出来，写在函数里，以后需要这些语句时，可以直接调用函数，避免","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"40-client（可视区）相关属性","slug":"JavaScript/40-client（可视区）相关属性","date":"2023-02-16T07:30:25.425Z","updated":"2023-02-16T07:54:46.077Z","comments":true,"path":"api/articles/JavaScript/40-client（可视区）相关属性.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180203_2155.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"client-家族的组成\"><a href=\"#client-家族的组成\" class=\"headerlink\" title=\"client 家族的组成\"></a>client 家族的组成</h2><h3 id=\"clientWidth-和-clientHeight\"><a href=\"#clientWidth-和-clientHeight\" class=\"headerlink\" title=\"clientWidth 和 clientHeight\"></a>clientWidth 和 clientHeight</h3><p>元素调用时：</p>\n<ul>\n<li><p>clientWidth：获取元素的可见宽度（width + padding）。</p>\n</li>\n<li><p>clientHeight：获取元素的可见高度（height + padding）。</p>\n</li>\n</ul>\n<p>body&#x2F;html 调用时：</p>\n<ul>\n<li><p>clientWidth：获取网页可视区域宽度。</p>\n</li>\n<li><p>clientHeight：获取网页可视区域高度。</p>\n</li>\n</ul>\n<p><strong>声明</strong>：</p>\n<ul>\n<li><p><code>clientWidth</code> 和 <code>clientHeight</code> 属性是只读的，不可修改。</p>\n</li>\n<li><p><code>clientWidth</code> 和 <code>clientHeight</code> 的值都是不带 px 的，返回的都是一个数字，可以直接进行计算。</p>\n</li>\n</ul>\n<h3 id=\"clientX-和-clientY\"><a href=\"#clientX-和-clientY\" class=\"headerlink\" title=\"clientX 和 clientY\"></a>clientX 和 clientY</h3><p>event调用：</p>\n<ul>\n<li><p>clientX：鼠标距离可视区域左侧距离。</p>\n</li>\n<li><p>clientY：鼠标距离可视区域上侧距离。</p>\n</li>\n</ul>\n<h3 id=\"clientTop-和-clientLeft\"><a href=\"#clientTop-和-clientLeft\" class=\"headerlink\" title=\"clientTop 和 clientLeft\"></a>clientTop 和 clientLeft</h3><ul>\n<li><p>clientTop：盒子的上border。</p>\n</li>\n<li><p>clientLeft：盒子的左border。</p>\n</li>\n</ul>\n<h2 id=\"三大家族-offset-x2F-scroll-x2F-client-的区别\"><a href=\"#三大家族-offset-x2F-scroll-x2F-client-的区别\" class=\"headerlink\" title=\"三大家族 offset&#x2F;scroll&#x2F;client 的区别\"></a>三大家族 offset&#x2F;scroll&#x2F;client 的区别</h2><h3 id=\"区别1：宽高\"><a href=\"#区别1：宽高\" class=\"headerlink\" title=\"区别1：宽高\"></a>区别1：宽高</h3><ul>\n<li><p>offsetWidth  &#x3D; width  + padding + border</p>\n</li>\n<li><p>offsetHeight &#x3D; height + padding + border</p>\n</li>\n<li><p>scrollWidth   &#x3D; 内容宽度（不包含border）</p>\n</li>\n<li><p>scrollHeight  &#x3D; 内容高度（不包含border）</p>\n</li>\n<li><p>clientWidth  &#x3D; width  + padding</p>\n</li>\n<li><p>clientHeight &#x3D; height + padding</p>\n</li>\n</ul>\n<h3 id=\"区别2：上左\"><a href=\"#区别2：上左\" class=\"headerlink\" title=\"区别2：上左\"></a>区别2：上左</h3><p>offsetTop&#x2F;offsetLeft：</p>\n<ul>\n<li>调用者：任意元素。(盒子为主)</li>\n<li>作用：距离父系盒子中带有定位的距离。</li>\n</ul>\n<p>scrollTop&#x2F;scrollLeft：</p>\n<ul>\n<li>调用者：document.body.scrollTop（window调用）(盒子也可以调用，但必须有滚动条)</li>\n<li>作用：浏览器无法显示的部分（被卷去的部分）。</li>\n</ul>\n<p>clientY&#x2F;clientX：</p>\n<ul>\n<li>调用者：event</li>\n<li>作用：鼠标距离浏览器可视区域的距离（左、上）。</li>\n</ul>\n<h2 id=\"函数封装：获取浏览器的宽高（可视区域）\"><a href=\"#函数封装：获取浏览器的宽高（可视区域）\" class=\"headerlink\" title=\"函数封装：获取浏览器的宽高（可视区域）\"></a>函数封装：获取浏览器的宽高（可视区域）</h2><p>函数封装如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数封装：获取屏幕可视区域的宽高</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">client</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//ie9及其以上的版本的写法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;width&quot;</span>: <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;height&quot;</span>: <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">compatMode</span> === <span class=\"string\">&quot;CSS1Compat&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//标准模式的写法（有DTD时）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;width&quot;</span>: <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;height&quot;</span>: <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有DTD时的写法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;width&quot;</span>: <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;height&quot;</span>: <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientHeight</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><strong>案例：根据浏览器的可视宽度，给定不同的背景的色。</strong></p>\n<blockquote>\n<p>PS：这个可以用来做响应式。</p>\n</blockquote>\n<p>代码如下：（需要用到上面的封装好的方法）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;tools.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//需求：浏览器每次更改大小，判断是否符合某一标准然后给背景上色。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//  // &gt;960红色，大于640小于960蓝色，小于640绿色。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = fn;  <span class=\"comment\">//页面大小发生变化时，执行该函数。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//页面加载的时候直接执行一次函数，确定浏览器可视区域的宽，给背景上色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">fn</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//封装成函数，然后指定的时候去调用和绑定函数名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">client</span>().<span class=\"property\">width</span> &gt; <span class=\"number\">960</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&quot;red&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">client</span>().<span class=\"property\">width</span> &gt; <span class=\"number\">640</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&quot;blue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&quot;green&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>上当代码中，<code>window.onresize</code>事件指的是：在窗口或框架被调整大小时发生。各个事件的解释如下：</p>\n<ul>\n<li><p>window.onscroll        屏幕滑动</p>\n</li>\n<li><p>window.onresize       浏览器大小变化</p>\n</li>\n<li><p>window.onload\t        页面加载完毕</p>\n</li>\n<li><p>div.onmousemove    鼠标在盒子上移动（注意：不是盒子移动）</p>\n</li>\n</ul>\n<h2 id=\"获取显示器的分辨率\"><a href=\"#获取显示器的分辨率\" class=\"headerlink\" title=\"获取显示器的分辨率\"></a>获取显示器的分辨率</h2><p>比如，我的电脑的显示器分辨率是：1920*1080。</p>\n<p>获取显示器的分辨率：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">screen</span>.<span class=\"property\">width</span> + <span class=\"string\">&quot;    &quot;</span> + <span class=\"variable language_\">window</span>.<span class=\"property\">screen</span>.<span class=\"property\">height</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<p><img src=\"http://img.smyhvae.com/20180203_2155.png\"></p>\n<p>上图中，不管我如何改变浏览器的窗口大小，title栏显示的值永远都是我的显示器分辨率：1920*1080。</p>\n","text":"client 家族的组成clientWidth 和 clientHeight元素调用时：clientWidth：获取元素的可见宽度（width + padding）。clientHeight：获取元素的可见高度（height + padding）。body&#x2F;html 调","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"18-数组简介","slug":"JavaScript/18-数组简介","date":"2023-02-15T12:06:59.477Z","updated":"2023-02-15T12:26:30.049Z","comments":true,"path":"api/articles/JavaScript/18-数组简介.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20200612_1707.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<blockquote>\n<p>之前学习的数据类型，只能存储一个值（字符串也为一个值）。如果我们想存储多个值，就可以使用数组。</p>\n</blockquote>\n<h2 id=\"数组简介\"><a href=\"#数组简介\" class=\"headerlink\" title=\"数组简介\"></a>数组简介</h2><p>数组（Array）是属于<strong>内置对象</strong>，数组和普通对象的功能类似，都可以用来存储一些值。不同的是：</p>\n<ul>\n<li>普通对象是使用字符串作为属性名，而数组是使用数字作为<strong>索引</strong>来操作元素。索引：从 0 开始的整数就是索引。</li>\n</ul>\n<p>数组的存储性能比普通对象要好。在实际开发中我们经常使用数组存储一些数据（尤其是<strong>列表数据</strong>），使用频率非常高。</p>\n<p><img src=\"http://img.smyhvae.com/20200612_1707.png\"></p>\n<p>比如说，上面这个页面的列表数据，它的数据结构就是一个数组。</p>\n<p>数组中的元素可以是任意的数据类型，可以是对象，可以是函数，也可以是数组。数组的元素中，如果存放的是数组，我们就称这种数组为二维数组。</p>\n<p>接下来，我们讲一讲数组的基本操作。</p>\n<h2 id=\"创建数组对象\"><a href=\"#创建数组对象\" class=\"headerlink\" title=\"创建数组对象\"></a>创建数组对象</h2><h3 id=\"方式一：使用字面量创建数组\"><a href=\"#方式一：使用字面量创建数组\" class=\"headerlink\" title=\"方式一：使用字面量创建数组\"></a>方式一：使用字面量创建数组</h3><p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = []; <span class=\"comment\">// 创建一个空的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">// 创建带初始值的数组</span></span><br></pre></td></tr></table></figure>\n\n<p>方式一最简单，也用得最多。</p>\n<h3 id=\"方式二：使用构造函数创建数组\"><a href=\"#方式二：使用构造函数创建数组\" class=\"headerlink\" title=\"方式二：使用构造函数创建数组\"></a>方式二：使用构造函数创建数组</h3><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(参数);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"title class_\">Array</span>(参数);</span><br></pre></td></tr></table></figure>\n\n<p>如果<strong>参数为空</strong>，表示创建一个空数组；如果参数是<strong>一个数值</strong>，表示数组的长度；如果<strong>有多个参数</strong>，表示数组中的元素内容。</p>\n<p>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(); <span class=\"comment\">// 参数为空：创建空数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 参数为 size</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>); <span class=\"comment\">// 参数为多个数值：创建一个带数据的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> arr1); <span class=\"comment\">// 打印结果：object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr1 = &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr2 = &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr3 = &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr3));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr4 = &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr4));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object;</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>];</span><br><span class=\"line\">arr2 = [];</span><br><span class=\"line\">arr3 = [<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>];</span><br><span class=\"line\">arr4 = [<span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>];</span><br></pre></td></tr></table></figure>\n\n<p>从上方打印结果的第一行可以看出，数组的类型是属于<strong>对象</strong>。</p>\n<h3 id=\"数组中的元素的类型\"><a href=\"#数组中的元素的类型\" class=\"headerlink\" title=\"数组中的元素的类型\"></a>数组中的元素的类型</h3><p>数组中可以存放<strong>任意类型</strong>的数据，例如字符串、数字、布尔值、对象等。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;qianguyihao&#x27;</span>, <span class=\"number\">28</span>, <span class=\"literal\">true</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span> &#125;];</span><br></pre></td></tr></table></figure>\n\n<p>我们甚至可以在数组里存放数组。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [</span><br><span class=\"line\">    [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">    [<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>],</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组的基本操作\"><a href=\"#数组的基本操作\" class=\"headerlink\" title=\"数组的基本操作\"></a>数组的基本操作</h2><h3 id=\"数组的索引\"><a href=\"#数组的索引\" class=\"headerlink\" title=\"数组的索引\"></a>数组的索引</h3><p><strong>索引</strong> (下标) ：用来访问数组元素的序号，代表的是数组中的元素在数组中的位置（下标从 0 开始算起）。</p>\n<p>数组可以通过索引来访问、修改对应的数组元素。我们继续看看。</p>\n<h3 id=\"向数组中添加元素\"><a href=\"#向数组中添加元素\" class=\"headerlink\" title=\"向数组中添加元素\"></a>向数组中添加元素</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组[索引] = 值;</span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向数组中添加元素</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">20</span>;</span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"number\">30</span>;</span><br><span class=\"line\">arr[<span class=\"number\">3</span>] = <span class=\"number\">40</span>;</span><br><span class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[10,20,30,40,null,50]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取数组中的元素\"><a href=\"#获取数组中的元素\" class=\"headerlink\" title=\"获取数组中的元素\"></a>获取数组中的元素</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组[索引];</span><br></pre></td></tr></table></figure>\n\n<p>如果读取不存在的索引（比如元素没那么多），系统不会报错，而是返回 undefined。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[<span class=\"number\">0</span>]); <span class=\"comment\">// 打印结果：21</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[<span class=\"number\">5</span>]); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取数组的长度\"><a href=\"#获取数组的长度\" class=\"headerlink\" title=\"获取数组的长度\"></a>获取数组的长度</h3><p>可以使用<code>length</code>属性来获取数组的长度(即“元素的个数”)。</p>\n<p>数组的长度是元素个数，不要跟索引号混淆。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组的长度 = 数组名.<span class=\"property\">length</span>；</span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"property\">length</span>); <span class=\"comment\">// 打印结果：3</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：</p>\n<p>对于连续的数组，使用 length 可以获取到数组的长度（元素的个数）；对于非连续的数组（即“稀疏数组”，本文稍后会讲），length 的值会大于元素的个数。因此，尽量不要创建非连续的数组。</p>\n<h3 id=\"修改数组的长度\"><a href=\"#修改数组的长度\" class=\"headerlink\" title=\"修改数组的长度\"></a>修改数组的长度</h3><p>可以通过修改length属性修改数组的长度。</p>\n<ul>\n<li><p>如果修改的 length 大于原长度，则多出部分会空出来，置为 null。</p>\n</li>\n<li><p>如果修改的 length 小于原长度，则多出的元素会被删除，数组将从后面删除元素。</p>\n</li>\n<li><p>（特例：伪数组 arguments 的长度可以修改，但是不能修改里面的元素，以后单独讲。）</p>\n</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改数组 arr1 的 length</span></span><br><span class=\"line\">arr1.<span class=\"property\">length</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改数组 arr2 的 length</span></span><br><span class=\"line\">arr2.<span class=\"property\">length</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">11</span>]</span><br><span class=\"line\">[<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><p><strong>遍历</strong>: 就是把数组中的每个元素从头到尾都访问一次。</p>\n<p>最简单的做法是通过 for 循环，遍历数组中的每一项。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i]); <span class=\"comment\">// 打印出数组中的每一项</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下一篇文章，会学习数组的各种方法，到时候，会有更多的做法去遍历数组。</p>\n<h2 id=\"JS语言中，数组的注意点\"><a href=\"#JS语言中，数组的注意点\" class=\"headerlink\" title=\"JS语言中，数组的注意点\"></a>JS语言中，数组的注意点</h2><blockquote>\n<p>和其他编程语言相比，JS语言中的数组比较灵活，有许多与众不同的地方。</p>\n</blockquote>\n<p>1、如果访问数组中不存在的索引时，不会报错，会返回undefined。</p>\n<p>2、当数组的存储空间不够时，数组会自动扩容。其它编程语言中数组的大小是固定的，不会自动扩容。</p>\n<p>3、数组可以存储不同类型数据，其它编程语言中数组只能存储相同类型数据。</p>\n<p>4、数组分配的存储空间不一定是连续的。其它语言数组分配的存储空间是连续的。</p>\n<p>JS中的数组采用”哈希映射”的方式分配存储空间，我们可以通过索引找到对应空间。各大浏览器也对数组分配的存储空间进行了优化：如果存储的都是相同类型的数据，则会尽量分配连续的存储空间；如果存储的不是相同的数据类型，则不会分配连续的存储空间。</p>\n<h2 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h2><p>解构赋值是ES6中新增的一种赋值方式。</p>\n<p>ES5中，如果想把数组中的元素赋值给其他变量，是这样做的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>,<span class=\"number\">4</span>]];</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = arr[<span class=\"number\">0</span>]; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = arr[<span class=\"number\">1</span>]; <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = arr[<span class=\"number\">2</span>]; <span class=\"comment\">// [3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这种写法比较啰嗦。通过ES6中的结构复制，我们可以像下面这样做。</p>\n<p>1、数组解构赋值，代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">// [3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p>注意点：</p>\n<p>（1）等号左边的个数和格式，必须和右边的一模一样，才能完全解构。</p>\n<p>（2）当然，左边的个数和右边的个数，可以不一样。</p>\n<p>2、默认值。在赋值之前，我们可以给左边的变量指定<strong>默认值</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b = <span class=\"number\">3</span>, c = <span class=\"number\">4</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 2。默认值被覆盖。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">// 4。继续保持默认值。</span></span><br></pre></td></tr></table></figure>\n\n<p>3、我们可以使用ES6中新增的<strong>扩展运算符</strong>打包剩余的数据。如果使用了扩展运算符, 那么扩展运算符只能写在最后。代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, ...b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"稀疏数组与密集数组\"><a href=\"#稀疏数组与密集数组\" class=\"headerlink\" title=\"稀疏数组与密集数组\"></a>稀疏数组与密集数组</h2><blockquote>\n<p> 这个知识点，简单了解即可。</p>\n</blockquote>\n<ul>\n<li><p>稀疏数组：索引不连续、数组长度大于元素个数的数组，可以简单理解为有 <code>empty</code>（有空隙）的数组。</p>\n</li>\n<li><p>密集数组：索引连续、数组长度等于元素个数的数组。</p>\n</li>\n</ul>\n<p>参考链接：</p>\n<ul>\n<li><p><a href=\"https://juejin.cn/post/6975531514444562462\">JavaScript 之稀疏数组与密集数组</a></p>\n</li>\n<li><p><a href=\"https://github.com/JunreyCen/blog/issues/10\">JS 稀疏数组</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6844904050152964109\">JS 中的稀疏数组和密集数组</a></p>\n</li>\n<li><p>[译]JavaScript中的稀疏数组与密集数组：<a href=\"https://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687165.html\">https://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687165.html</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000008533942\">JavaScript || 数组</a></p>\n</li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"例-1：翻转数组\"><a href=\"#例-1：翻转数组\" class=\"headerlink\" title=\"例 1：翻转数组\"></a>例 1：翻转数组</h3><p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]; <span class=\"comment\">// 原始数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = []; <span class=\"comment\">// 翻转后的数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    newArr[i] = arr[arr.<span class=\"property\">length</span> - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(newArr));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[50,40,30,20,10]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例-2：冒泡排序\"><a href=\"#例-2：冒泡排序\" class=\"headerlink\" title=\"例 2：冒泡排序\"></a>例 2：冒泡排序</h3><p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">20</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.<span class=\"property\">length</span> - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[10,20,30,40,50]</span><br></pre></td></tr></table></figure>\n\n","text":"之前学习的数据类型，只能存储一个值（字符串也为一个值）。如果我们想存储多个值，就可以使用数组。数组简介数组（Array）是属于内置对象，数组和普通对象的功能类似，都可以用来存储一些值。不同的是：普通对象是使用字符串作为属性名，而数组是使用数字作为索引来操作元素。索引：从 0 开始","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"17-内置对象：Date","slug":"JavaScript/17-内置对象：Date","date":"2023-02-15T12:06:59.475Z","updated":"2023-02-15T12:26:01.669Z","comments":true,"path":"api/articles/JavaScript/17-内置对象：Date.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180202_1110.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"内置对象：Date\"><a href=\"#内置对象：Date\" class=\"headerlink\" title=\"内置对象：Date\"></a>内置对象：Date</h2><blockquote>\n<p>Date 对象在实际开发中，使用得很频繁，且容易在细节地方出错，需要引起重视。</p>\n</blockquote>\n<p>内置对象 Date 用来处理日期和时间。</p>\n<p><strong>需要注意的是</strong>：与 Math 对象不同，Date 对象是一个<strong>构造函数</strong> ，需要<strong>先实例化</strong>后才能使用。</p>\n<h2 id=\"创建Date对象\"><a href=\"#创建Date对象\" class=\"headerlink\" title=\"创建Date对象\"></a>创建Date对象</h2><p>创建Date对象有两种写法：</p>\n<ul>\n<li><p>写法一：如果Date()不写参数，就返回当前时间对象</p>\n</li>\n<li><p>写法二：如果Date()里面写参数，就返回括号里输入的时间对象</p>\n</li>\n</ul>\n<p>针对这两种写法，我们来具体讲一讲。</p>\n<h3 id=\"写法一：不传递参数时，则获取系统的当前时间对象\"><a href=\"#写法一：不传递参数时，则获取系统的当前时间对象\" class=\"headerlink\" title=\"写法一：不传递参数时，则获取系统的当前时间对象\"></a>写法一：不传递参数时，则获取系统的当前时间对象</h3><p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> date1);</span><br></pre></td></tr></table></figure>\n\n<p>代码解释：不传递参数时，表示的是获取系统的当前时间对象。也可以理解成是：获取当前代码执行的时间。</p>\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mon Feb 17 2020 21:57:22 GMT+0800 (中国标准时间)</span><br><span class=\"line\">object</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写法二：传递参数\"><a href=\"#写法二：传递参数\" class=\"headerlink\" title=\"写法二：传递参数\"></a>写法二：传递参数</h3><p>传递参数时，表示获取指定时间的时间对象。参数中既可以传递字符串，也可以传递数字，也可以传递时间戳。</p>\n<p>通过传参的这种写法，我们可以把时间字符串&#x2F;时间数字&#x2F;时间戳，按照指定的格式，转换为时间对象。</p>\n<p>举例1：（参数是字符串）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> date11 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020/02/17 21:00:00&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date11); <span class=\"comment\">// Mon Feb 17 2020 21:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date12 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020/04/19&#x27;</span>); <span class=\"comment\">// 返回的就是四月</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date12); <span class=\"comment\">// Sun Apr 19 2020 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date13 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020-05-20&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date13); <span class=\"comment\">// Wed May 20 2020 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date14 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;Wed Jan 27 2017 12:00:00 GMT+0800 (中国标准时间)&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date14); <span class=\"comment\">// Fri Jan 27 2017 12:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n\n\n<p>举例2：（参数是多个数字）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> date21 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">2</span>, <span class=\"number\">18</span>); <span class=\"comment\">// 注意，第二个参数返回的是三月，不是二月</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date21); <span class=\"comment\">// Wed Mar 18 2020 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date22 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">3</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">59</span>, <span class=\"number\">58</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date22); <span class=\"comment\">// Sat Apr 18 2020 22:59:58 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> params = [<span class=\"number\">2020</span>, <span class=\"number\">06</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>, <span class=\"number\">20</span>, <span class=\"number\">59</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> date23 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(...params);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date23); <span class=\"comment\">// Sun Jul 12 2020 16:20:59 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n\n\n<p>举例3：（参数是时间戳）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> date31 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">1591950413388</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date31); <span class=\"comment\">// Fri Jun 12 2020 16:26:53 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先把时间对象转换成时间戳，然后把时间戳转换成时间对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> date32 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(timestamp);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date32); <span class=\"comment\">// Fri Jun 12 2020 16:28:21 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"日期的格式化\"><a href=\"#日期的格式化\" class=\"headerlink\" title=\"日期的格式化\"></a>日期的格式化</h2><p>上一段内容里，我们获取到了 Date <strong>对象</strong>，但这个对象，打印出来的结果并不是特别直观。</p>\n<p>如果我们需要获取日期的<strong>指定部分</strong>，就需要用到 Date对象自带的方法。</p>\n<p>获取了日期指定的部分之后，我们就可以让日期按照指定的格式，进行展示（即日期的格式化）。比如说，我期望能以 <code>2020-02-02 19:30:59</code> 这种格式进行展示。</p>\n<p>在这之前，我们先来看看 Date 对象有哪些方法。</p>\n<h3 id=\"Date对象的方法\"><a href=\"#Date对象的方法\" class=\"headerlink\" title=\"Date对象的方法\"></a>Date对象的方法</h3><p>Date对象 有如下方法，可以获取日期和时间的<strong>指定部分</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getFullYear()</td>\n<td>获取年份</td>\n<td></td>\n</tr>\n<tr>\n<td>getMonth()</td>\n<td><strong>获取月： 0-11</strong></td>\n<td>0代表一月</td>\n</tr>\n<tr>\n<td>getDate()</td>\n<td><strong>获取日：1-31</strong></td>\n<td>获取的是几号</td>\n</tr>\n<tr>\n<td>getDay()</td>\n<td><strong>获取星期：0-6</strong></td>\n<td>0代表周日，1代表周一</td>\n</tr>\n<tr>\n<td>getHours()</td>\n<td>获取小时：0-23</td>\n<td></td>\n</tr>\n<tr>\n<td>getMinutes()</td>\n<td>获取分钟：0-59</td>\n<td></td>\n</tr>\n<tr>\n<td>getSeconds()</td>\n<td>获取秒：0-59</td>\n<td></td>\n</tr>\n<tr>\n<td>getMilliseconds()</td>\n<td>获取毫秒</td>\n<td>1s &#x3D; 1000ms</td>\n</tr>\n</tbody></table>\n<p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我在执行这行代码时，当前时间为 2019年2月4日，周一，13:23:52</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate); <span class=\"comment\">// 打印结果：Mon Feb 04 2019 13:23:52 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getFullYear</span>()); <span class=\"comment\">// 打印结果：2019</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>); <span class=\"comment\">// 打印结果：2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getDate</span>()); <span class=\"comment\">// 打印结果：4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dayArr  = [<span class=\"string\">&#x27;星期日&#x27;</span>, <span class=\"string\">&#x27;星期一&#x27;</span>, <span class=\"string\">&#x27;星期二&#x27;</span>, <span class=\"string\">&#x27;星期三&#x27;</span>, <span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>, <span class=\"string\">&#x27;星期六&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getDay</span>()); <span class=\"comment\">// 打印结果：1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dayArr[myDate.<span class=\"title function_\">getDay</span>()]); <span class=\"comment\">// 打印结果：星期一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getHours</span>()); <span class=\"comment\">// 打印结果：13</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getMinutes</span>()); <span class=\"comment\">// 打印结果：23</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getSeconds</span>()); <span class=\"comment\">// 打印结果：52</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getMilliseconds</span>()); <span class=\"comment\">// 打印结果：393</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getTime</span>()); <span class=\"comment\">// 获取时间戳。打印结果：1549257832393</span></span><br></pre></td></tr></table></figure>\n\n<p>获取了日期和时间的指定部分之后，我们把它们用字符串拼接起来，就可以按照自己想要的格式，来展示日期。</p>\n<h3 id=\"举例：年月日的格式化\"><a href=\"#举例：年月日的格式化\" class=\"headerlink\" title=\"举例：年月日的格式化\"></a>举例：年月日的格式化</h3><p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">formatDate</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    方法：日期格式化。</span></span><br><span class=\"line\"><span class=\"comment\">    格式要求：今年是：2020年02月02日 08:57:09 星期日</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatDate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = date.<span class=\"title function_\">getFullYear</span>(); <span class=\"comment\">// 年</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>; <span class=\"comment\">// 月</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> day = date.<span class=\"title function_\">getDate</span>(); <span class=\"comment\">// 日</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> week = date.<span class=\"title function_\">getDay</span>(); <span class=\"comment\">// 星期几</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> weekArr = [<span class=\"string\">&#x27;星期日&#x27;</span>, <span class=\"string\">&#x27;星期一&#x27;</span>, <span class=\"string\">&#x27;星期二&#x27;</span>, <span class=\"string\">&#x27;星期三&#x27;</span>, <span class=\"string\">&#x27;星期四&#x27;</span>, <span class=\"string\">&#x27;星期五&#x27;</span>, <span class=\"string\">&#x27;星期六&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hour = date.<span class=\"title function_\">getHours</span>(); <span class=\"comment\">// 时</span></span><br><span class=\"line\">    hour = hour &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + hour : hour; <span class=\"comment\">// 如果只有一位，则前面补零</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = date.<span class=\"title function_\">getMinutes</span>(); <span class=\"comment\">// 分</span></span><br><span class=\"line\">    minute = minute &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + minute : minute; <span class=\"comment\">// 如果只有一位，则前面补零</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = date.<span class=\"title function_\">getSeconds</span>(); <span class=\"comment\">// 秒</span></span><br><span class=\"line\">    second = second &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + second : second; <span class=\"comment\">// 如果只有一位，则前面补零</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;今天是：&#x27;</span> + year + <span class=\"string\">&#x27;年&#x27;</span> + month + <span class=\"string\">&#x27;月&#x27;</span> + day + <span class=\"string\">&#x27;日 &#x27;</span> + hour + <span class=\"string\">&#x27;:&#x27;</span> + minute + <span class=\"string\">&#x27;:&#x27;</span> + second + <span class=\"string\">&#x27; &#x27;</span> + weekArr[week];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"获取时间戳\"><a href=\"#获取时间戳\" class=\"headerlink\" title=\"获取时间戳\"></a>获取时间戳</h2><h3 id=\"时间戳的定义和作用\"><a href=\"#时间戳的定义和作用\" class=\"headerlink\" title=\"时间戳的定义和作用\"></a>时间戳的定义和作用</h3><p><strong>时间戳</strong>：指的是从格林威治标准时间的<code>1970年1月1日，0时0分0秒</code>到当前日期所花费的<strong>毫秒数</strong>（1秒 &#x3D; 1000毫秒）。</p>\n<p>计算机底层在保存时间时，使用的都是时间戳。时间戳的存在，就是为了<strong>统一</strong>时间的单位。</p>\n<p>我们经常会利用时间戳来计算时间，因为它更精确。而且，在实战开发中，接口返回给前端的日期数据，都是以时间戳的形式。</p>\n<p>我们再来看下面这样的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;1970/01/01 0:0:0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getTime</span>()); <span class=\"comment\">// 获取时间戳</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果（可能会让你感到惊讶）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"number\">28800000</span></span><br></pre></td></tr></table></figure>\n\n<p>为啥打印结果是<code>-28800000</code>，而不是<code>0</code>呢？这是因为，我们的当前代码，是在中文环境下运行的，与英文时间会存在<strong>8个小时的时差</strong>（中文时间比英文时间早了八个小时）。如果代码是在英文环境下运行，打印结果就是<code>0</code>。</p>\n<h3 id=\"getTime-：获取时间戳\"><a href=\"#getTime-：获取时间戳\" class=\"headerlink\" title=\"getTime()：获取时间戳\"></a>getTime()：获取时间戳</h3><p><code>getTime()</code>  获取日期对象的<strong>时间戳</strong>（单位：毫秒）。这个方法在实战开发中，用得比较多。但还有比它更常用的写法，我们往下看。</p>\n<h3 id=\"获取-Date-对象的时间戳\"><a href=\"#获取-Date-对象的时间戳\" class=\"headerlink\" title=\"获取 Date 对象的时间戳\"></a>获取 Date 对象的时间戳</h3><p>代码演示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一：获取 Date 对象的时间戳（最常用的写法）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp1 = +<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp1); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二：获取 Date 对象的时间戳（较常用的写法）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp2); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式三：获取 Date 对象的时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">valueOf</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp3); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式4：获取 Date 对象的时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() * <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp4); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式5：获取 Date 对象的时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp5 = <span class=\"title class_\">Number</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp5); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这五种写法都可以获取任意 Date 对象的时间戳，最常见的写法是<strong>方式一</strong>，其次是方式二。</p>\n<p>根据前面所讲的关于「时间戳」的概念，上方代码获取到的时间戳指的是：从 <code>1970年1月1日，0时0分0秒</code> 到现在所花费的总毫秒数。</p>\n<h3 id=\"获取当前时间的时间戳\"><a href=\"#获取当前时间的时间戳\" class=\"headerlink\" title=\"获取当前时间的时间戳\"></a>获取当前时间的时间戳</h3><p>如果我们要获取<strong>当前时间</strong>的时间戳，除了上面的几种方式之外，还有另一种方式。代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式六：获取当前时间的时间戳（很常用的写法）</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这种方式六，用得也很多。只不过，<code>Date.now()</code>是H5标准中新增的特性，如果你的项目需要兼容低版本的IE浏览器，就不要用了。这年头，谁还用IE呢？</p>\n<h3 id=\"利用时间戳检测代码的执行时间\"><a href=\"#利用时间戳检测代码的执行时间\" class=\"headerlink\" title=\"利用时间戳检测代码的执行时间\"></a>利用时间戳检测代码的执行时间</h3><p>我们可以在业务代码的前面定义 <code>时间戳1</code>，在业务代码的后面定义 <code>时间戳2</code>。把这两个时间戳相减，就能得出业务代码的执行时间。</p>\n<h3 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format()\"></a>format()</h3><p>将时间对象转换为指定格式。</p>\n<p>参考链接：<a href=\"https://www.cnblogs.com/tugenhua0707/p/3776808.html\">https://www.cnblogs.com/tugenhua0707/p/3776808.html</a></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><h3 id=\"举例1：模拟日历\"><a href=\"#举例1：模拟日历\" class=\"headerlink\" title=\"举例1：模拟日历\"></a>举例1：模拟日历</h3><p>要求每天打开这个页面，都能定时显示当前的日期。</p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">font</span>: <span class=\"number\">600</span> <span class=\"number\">30px</span>/<span class=\"number\">30px</span> <span class=\"string\">&#x27;simsun&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//模拟日历</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//需求：每天打开这个页面都能定时显示年月日和星期几</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">function</span> <span class=\"title function_\">getCurrentDate</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//1.创建一个当前日期的日期对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//2.然后获取其中的年、月、日和星期</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> year = date.<span class=\"title function_\">getFullYear</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> month = date.<span class=\"title function_\">getMonth</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> hao = date.<span class=\"title function_\">getDate</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> week = date.<span class=\"title function_\">getDay</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//        console.log(year+&quot; &quot;+month+&quot; &quot;+hao+&quot; &quot;+week);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//3.赋值给div</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;星期日&#x27;</span>, <span class=\"string\">&#x27;星期一&#x27;</span>, <span class=\"string\">&#x27;星期二&#x27;</span>, <span class=\"string\">&#x27;星期三&#x27;</span>, <span class=\"string\">&#x27;星期四&#x27;</span>, <span class=\"string\">&#x27;星期五&#x27;</span>, <span class=\"string\">&#x27;星期六&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;今天是：&#x27;</span> + year + <span class=\"string\">&#x27;年&#x27;</span> + (month + <span class=\"number\">1</span>) + <span class=\"string\">&#x27;月&#x27;</span> + hao + <span class=\"string\">&#x27;日 &#x27;</span> + arr[week];</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">            div.<span class=\"property\">innerText</span> = <span class=\"title function_\">getCurrentDate</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>实现效果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1110.png\"></p>\n<h3 id=\"举例2：发布会倒计时\"><a href=\"#举例2：发布会倒计时\" class=\"headerlink\" title=\"举例2：发布会倒计时\"></a>举例2：发布会倒计时</h3><p>实现思路：</p>\n<ul>\n<li><p>设置一个定时器，每间隔1毫秒就自动刷新一次div的内容。</p>\n</li>\n<li><p>核心算法：输入的时间戳减去当前的时间戳，就是剩余时间（即倒计时），然后转换成时分秒。</p>\n</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">width</span>: <span class=\"number\">1210px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">font</span>: <span class=\"number\">600</span> <span class=\"number\">30px</span>/<span class=\"number\">30px</span> <span class=\"string\">&#x27;simsun&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">countDown</span>(<span class=\"string\">&#x27;2022/02/03 11:20:00&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">function</span> <span class=\"title function_\">countDown</span>(<span class=\"params\">myTime</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> nowTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> future = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(myTime);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> timeSum = future.<span class=\"title function_\">getTime</span>() - nowTime.<span class=\"title function_\">getTime</span>(); <span class=\"comment\">//获取时间差：发布会时间减去此刻的毫秒值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> day = <span class=\"built_in\">parseInt</span>(timeSum / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>); <span class=\"comment\">// 天</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> hour = <span class=\"built_in\">parseInt</span>((timeSum / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span>) % <span class=\"number\">24</span>); <span class=\"comment\">// 时</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> minu = <span class=\"built_in\">parseInt</span>((timeSum / <span class=\"number\">1000</span> / <span class=\"number\">60</span>) % <span class=\"number\">60</span>); <span class=\"comment\">// 分</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> sec = <span class=\"built_in\">parseInt</span>((timeSum / <span class=\"number\">1000</span>) % <span class=\"number\">60</span>); <span class=\"comment\">// 秒</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> millsec = <span class=\"built_in\">parseInt</span>(timeSum % <span class=\"number\">1000</span>); <span class=\"comment\">// 毫秒</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//细节处理：所有的时间小于10的时候，在前面自动补0，毫秒值要补双0（比如如，把 8 秒改成 08 秒）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                day = day &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + day : day; <span class=\"comment\">//day小于10吗？如果小于，就补0；如果不小于，就是day本身</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                hour = hour &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + hour : hour;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                minu = minu &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + minu : minu;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                sec = sec &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + sec : sec;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (millsec &lt; <span class=\"number\">10</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    millsec = <span class=\"string\">&#x27;00&#x27;</span> + millsec;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (millsec &lt; <span class=\"number\">100</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    millsec = <span class=\"string\">&#x27;0&#x27;</span> + millsec;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 兜底处理</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (timeSum &lt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    div.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;距离苹果发布会还有00天00小时00分00秒000毫秒&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"built_in\">clearInterval</span>(timer);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 前端要显示的文案</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                div.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;距离苹果发布会还有&#x27;</span> + day + <span class=\"string\">&#x27;天&#x27;</span> + hour + <span class=\"string\">&#x27;小时&#x27;</span> + minu + <span class=\"string\">&#x27;分&#x27;</span> + sec + <span class=\"string\">&#x27;秒&#x27;</span> + millsec + <span class=\"string\">&#x27;毫秒&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现效果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1130.gif\"></p>\n<h2 id=\"Moment-js\"><a href=\"#Moment-js\" class=\"headerlink\" title=\"Moment.js\"></a>Moment.js</h2><p>Moment.js 是一个轻量级的JavaScript时间库，我们可以利用它很方便地进行时间操作，提升开发效率。</p>\n<ul>\n<li>中文官网：<a href=\"http://momentjs.cn/\">http://momentjs.cn/</a></li>\n</ul>\n<p>使用举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/moment.js/2.26.0/moment.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 按照指定的格式，格式化当前时间</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">moment</span>().<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)); <span class=\"comment\">// 打印结果举例：2020-06-12 16:38:38</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title function_\">moment</span>().<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)); <span class=\"comment\">// 打印结果：string</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 按照指定的格式，格式化指定的时间</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">moment</span>(<span class=\"string\">&#x27;2020/06/12 18:01:59&#x27;</span>).<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)); <span class=\"comment\">// 打印结果：2020-06-12 18:01:59</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 按照指定的格式，获取七天后的时间</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">moment</span>().<span class=\"title function_\">add</span>(<span class=\"number\">7</span>, <span class=\"string\">&#x27;days&#x27;</span>).<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>)); <span class=\"comment\">// 打印结果举例：2020-06-19 04:43:56</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","text":"内置对象：DateDate 对象在实际开发中，使用得很频繁，且容易在细节地方出错，需要引起重视。内置对象 Date 用来处理日期和时间。需要注意的是：与 Math 对象不同，Date 对象是一个构造函数 ，需要先实例化后才能使用。创建Date对象创建Date对象有两种写法：写法一","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"16-内置对象：Number和Math","slug":"JavaScript/16-内置对象：Number和Math","date":"2023-02-15T12:06:59.472Z","updated":"2023-02-15T12:25:20.472Z","comments":true,"path":"api/articles/JavaScript/16-内置对象：Number和Math.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180117_1730.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"内置对象-Number-的常见方法\"><a href=\"#内置对象-Number-的常见方法\" class=\"headerlink\" title=\"内置对象 Number 的常见方法\"></a>内置对象 Number 的常见方法</h2><h3 id=\"Number-isInteger-判断是否为整数\"><a href=\"#Number-isInteger-判断是否为整数\" class=\"headerlink\" title=\"Number.isInteger() 判断是否为整数\"></a>Number.isInteger() 判断是否为整数</h3><p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = Number.isInteger(数字);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"toFixed-小数点后面保留多少位\"><a href=\"#toFixed-小数点后面保留多少位\" class=\"headerlink\" title=\"toFixed() 小数点后面保留多少位\"></a>toFixed() 小数点后面保留多少位</h3><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 = myNum.<span class=\"title function_\">toFixed</span>(num);</span><br></pre></td></tr></table></figure>\n\n<p>解释：将数字 myNum 的小数点后面保留 num 位小数（四舍五入），并返回。不会改变原数字。注意，<strong>返回结果是字符串</strong>。</p>\n<p>参数 num：指定了小数点后面的位数。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">3.456</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = num.<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">// 打印结果：3.456</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2); <span class=\"comment\">// 打印结果：3.46</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> num); <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> num2); <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，<code>num2</code>的结果是3.46，但是请注意，<code>num</code>的类型Number型，而<code>num2</code>的类型却是String型。</p>\n<h2 id=\"内置对象-Math-的常见方法\"><a href=\"#内置对象-Math-的常见方法\" class=\"headerlink\" title=\"内置对象 Math 的常见方法\"></a>内置对象 Math 的常见方法</h2><p>Math 和其他的对象不同，它不是一个构造函数，不需要创建对象。所以我们不需要 通过 new 来调用，而是直接使用里面的属性和方法即可。</p>\n<p>Math属于一个工具类，里面封装了数学运算相关的属性和方法。如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Math.PI</td>\n<td align=\"left\">圆周率</td>\n<td align=\"left\">Math对象的属性</td>\n</tr>\n<tr>\n<td align=\"left\">Math.abs()</td>\n<td align=\"left\"><strong>返回绝对值</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.random()</td>\n<td align=\"left\">生成0-1之间的<strong>随机浮点数</strong></td>\n<td align=\"left\">取值范围是 [0，1)</td>\n</tr>\n<tr>\n<td align=\"left\">Math.floor()</td>\n<td align=\"left\"><strong>向下取整</strong>（往小取值）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.ceil()</td>\n<td align=\"left\"><strong>向上取整</strong>（往大取值）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.round()</td>\n<td align=\"left\">四舍五入取整（正数四舍五入，负数五舍六入）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.max(x, y, z)</td>\n<td align=\"left\">返回多个数中的最大值</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.min(x, y, z)</td>\n<td align=\"left\">返回多个数中的最小值</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.pow(x,y)</td>\n<td align=\"left\">乘方：返回 x 的 y 次幂</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.sqrt()</td>\n<td align=\"left\">开方：对一个数进行开方运算</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p><strong>举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = -<span class=\"number\">0.6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(num));        <span class=\"comment\">//取绝对值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(num));      <span class=\"comment\">//向下取整，向小取</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(num));       <span class=\"comment\">//向上取整，向大取</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(num));      <span class=\"comment\">//四舍五入取整（正数四舍五入，负数五舍六入）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());        <span class=\"comment\">//生成0-1之间的随机数</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.6</span><br><span class=\"line\"></span><br><span class=\"line\">-1</span><br><span class=\"line\"></span><br><span class=\"line\">-0</span><br><span class=\"line\"></span><br><span class=\"line\">-1</span><br><span class=\"line\"></span><br><span class=\"line\">0.6453756205275165</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-abs-：获绝对值\"><a href=\"#Math-abs-：获绝对值\" class=\"headerlink\" title=\"Math.abs()：获绝对值\"></a>Math.abs()：获绝对值</h2><p>方法定义：返回绝对值。</p>\n<p>注意：</p>\n<ul>\n<li>参数中可以接收字符串类型的数字，此时会将字符串做隐式类型转换，然后再调用 Math.abs() 方法。</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(-<span class=\"number\">2</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先做隐式类型转换，将 &#x27;-2&#x27;转换为数字类型 -2，然后再调用 Math.abs()</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(<span class=\"string\">&#x27;-2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(<span class=\"string\">&#x27;hello&#x27;</span>)); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-random-方法：生成随机数\"><a href=\"#Math-random-方法：生成随机数\" class=\"headerlink\" title=\"Math.random() 方法：生成随机数\"></a>Math.random() 方法：生成随机数</h2><p>方法定义：生成 [0, 1) 之间的<strong>随机浮点数</strong>。</p>\n<p>我们来看几个例子。</p>\n<h3 id=\"生成-0-x-之间的随机数\"><a href=\"#生成-0-x-之间的随机数\" class=\"headerlink\" title=\"生成 [0, x) 之间的随机数\"></a>生成 [0, x) 之间的随机数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*x)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"生成-x-y-之间的随机数\"><a href=\"#生成-x-y-之间的随机数\" class=\"headerlink\" title=\"生成 [x, y) 之间的随机数\"></a>生成 [x, y) 之间的随机数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*(y-x)+x)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"【重要】生成-x-y-之间的随机整数\"><a href=\"#【重要】生成-x-y-之间的随机整数\" class=\"headerlink\" title=\"【重要】生成 [x, y]之间的随机整数\"></a>【重要】生成 [x, y]之间的随机整数</h3><p>也就是说：生成两个整数之间的随机整数，<strong>并且要包含这两个整数</strong>。</p>\n<p>这个功能很常用，我们可以将其封装成一个方法，代码实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 生成两个整数之间的随机整数，并且要包含这两个整数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getRandom</span>(<span class=\"params\">min, max</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getRandom</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"举例：随机点名\"><a href=\"#举例：随机点名\" class=\"headerlink\" title=\"举例：随机点名\"></a>举例：随机点名</h3><p>根据上面的例子，我们还可以再延伸一下，来看看随机点名的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 生成两个整数之间的随机整数，并且要包含这两个整数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getRandom</span>(<span class=\"params\">min, max</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"string\">&#x27;邓紫棋&#x27;</span>, <span class=\"string\">&#x27;毛不易&#x27;</span>, <span class=\"string\">&#x27;解忧邵帅&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = <span class=\"title function_\">getRandom</span>(<span class=\"number\">0</span>, arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>); <span class=\"comment\">// 生成随机的index</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[index]); <span class=\"comment\">// 随机点名</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"pow-：乘方\"><a href=\"#pow-：乘方\" class=\"headerlink\" title=\"pow()：乘方\"></a>pow()：乘方</h2><p>如果想计算 <code>a 的 b 次方</code>，可以使用如下函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.pow(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>Math的中文是“数学”，pow是“幂”。</p>\n<p><strong>举例1：</strong></p>\n<p><img src=\"http://img.smyhvae.com/20180117_1730.png\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Math.pow(3, Math.pow(2, 2));</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p><strong>举例2：</strong></p>\n<p><img src=\"http://img.smyhvae.com/20180117_1740.png\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Math.pow(Math.pow(3, 2), 4);</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sqrt-：开方\"><a href=\"#sqrt-：开方\" class=\"headerlink\" title=\"sqrt()：开方\"></a>sqrt()：开方</h2><p>如果想计算数值a的开二次方，可以使用如下函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.sqrt(a);</span><br></pre></td></tr></table></figure>\n\n<p>sqrt即“square 开方”。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Math.sqrt(36);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"url-编码和解码\"><a href=\"#url-编码和解码\" class=\"headerlink\" title=\"url 编码和解码\"></a>url 编码和解码</h2><p>URI (Uniform ResourceIdentifiers,通用资源标识符)进行编码，以便发送给浏览器。有效的URI中不能包含某些字符，例如空格。而这URI编码方法就可以对URI进行编码，它们用特殊的UTF-8编码替换所有无效的字符，从而让浏览器能够接受和理解。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">encodeURIComponent</span>();   <span class=\"comment\">//把字符串作为 URI 组件进行编码</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURIComponent</span>();   <span class=\"comment\">//把字符串作为 URI 组件进行解码</span></span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&quot;http://www.cnblogs.com/smyhvae/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">encodeURIComponent</span>(url);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);                           <span class=\"comment\">//打印url的编码</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">decodeURIComponent</span>(str));       <span class=\"comment\">//对url进行编码后，再解码，还原为url</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1432.png\"></p>\n","text":"内置对象 Number 的常见方法Number.isInteger() 判断是否为整数语法：1<br>布尔值 = Number.isInteger(数字);<br>toFixed() 小数点后面保留多少位语法：1<br>字符串 = myNum.toFixed(num);<br>解","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"15-内置对象 String：字符串的常见方法","slug":"JavaScript/15-内置对象 String：字符串的常见方法","date":"2023-02-15T12:06:59.470Z","updated":"2023-02-15T12:25:02.011Z","comments":true,"path":"api/articles/JavaScript/15-内置对象 String：字符串的常见方法.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180202_1420.png","content":"<h2 id=\"内置对象简介\"><a href=\"#内置对象简介\" class=\"headerlink\" title=\"内置对象简介\"></a>内置对象简介</h2><blockquote>\n<p>JavaScript 中的对象分为3种：自定义对象、内置对象、浏览器对象。</p>\n</blockquote>\n<blockquote>\n<p>前面两种对象：是JS的基础内容，属于 ECMAScript； 第三个浏览器对象：属于JS独有，即 JS 内置的API。</p>\n</blockquote>\n<p><strong>内置对象</strong>：就是指这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用或者基本而必要的功能（属性和方法）。</p>\n<p>内置对象最大的优点就是帮助我们快速开发。</p>\n<p><strong>JavaScript的内置对象</strong>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">内置对象</th>\n<th align=\"left\">对象说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Arguments</td>\n<td align=\"left\">函数参数集合</td>\n</tr>\n<tr>\n<td align=\"left\">Array</td>\n<td align=\"left\">数组</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean</td>\n<td align=\"left\">布尔对象</td>\n</tr>\n<tr>\n<td align=\"left\">Math</td>\n<td align=\"left\">数学对象</td>\n</tr>\n<tr>\n<td align=\"left\">Date</td>\n<td align=\"left\">日期时间</td>\n</tr>\n<tr>\n<td align=\"left\">Error</td>\n<td align=\"left\">异常对象</td>\n</tr>\n<tr>\n<td align=\"left\">Function</td>\n<td align=\"left\">函数构造器</td>\n</tr>\n<tr>\n<td align=\"left\">Number</td>\n<td align=\"left\">数值对象</td>\n</tr>\n<tr>\n<td align=\"left\">Object</td>\n<td align=\"left\">基础对象</td>\n</tr>\n<tr>\n<td align=\"left\">RegExp</td>\n<td align=\"left\">正则表达式对象</td>\n</tr>\n<tr>\n<td align=\"left\">String</td>\n<td align=\"left\">字符串对象</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串前言\"><a href=\"#字符串前言\" class=\"headerlink\" title=\"字符串前言\"></a>字符串前言</h2><blockquote>\n<p>在日常开发中，String 对象（字符串对象）的使用频率是非常高的。所以有必要详细介绍。</p>\n</blockquote>\n<p>需要注意的是：<strong>字符串的所有方法，都不会改变原字符串</strong>（字符串的不可变性），操作完成后会返回一个新的值。</p>\n<p>字符串的常见方法如下。</p>\n<h2 id=\"查找字符串\"><a href=\"#查找字符串\" class=\"headerlink\" title=\"查找字符串\"></a>查找字符串</h2><h3 id=\"1、indexOf-x2F-lastIndexOf-：获取字符串中指定内容的索引\"><a href=\"#1、indexOf-x2F-lastIndexOf-：获取字符串中指定内容的索引\" class=\"headerlink\" title=\"1、indexOf()&#x2F;lastIndexOf()：获取字符串中指定内容的索引\"></a>1、indexOf()&#x2F;lastIndexOf()：获取字符串中指定内容的索引</h3><blockquote>\n<p>这个方法，是使用频率最高的一个方法。</p>\n</blockquote>\n<p><strong>语法 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引值 = str.<span class=\"title function_\">indexOf</span>(想要查询的字符串);</span><br></pre></td></tr></table></figure>\n\n<p>备注：<code>indexOf()</code> 是从前向后查找字符串的位置。同理，<code>lastIndexOf()</code>是从后向前寻找。</p>\n<p><strong>解释</strong>：可以检索一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回其<strong>第一次出现</strong>的索引；如果没有找到指定的内容，则返回 -1。</p>\n<p>因此可以得出一个重要技巧：</p>\n<ul>\n<li><p><strong>如果获取的索引值为 0，说明字符串是以查询的参数为开头的</strong>。</p>\n</li>\n<li><p>如果获取的索引值为-1，说明这个字符串中没有指定的内容。</p>\n</li>\n</ul>\n<p>举例 1：(查找单个字符)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;abcdea&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给字符查索引(索引值为0,说明字符串以查询的参数为开头)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;c&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;c&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1420.png\"></p>\n<p>举例 2：（查找字符串）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;yi&#x27;</span>)); <span class=\"comment\">// 打印结果：6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>语法 2</strong>：</p>\n<p>这个方法还可以指定第二个参数，用来指定查找的<strong>起始位置</strong>。语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引值 = str.<span class=\"title function_\">indexOf</span>(想要查询的字符串, [起始位置]);</span><br></pre></td></tr></table></figure>\n\n<p>举例 3：（两个参数时，需要特别注意）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\">result = str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从下标为3的位置开始查找 &#x27;a&#x27;这个字符 【重要】</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 打印结果：9</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，<code>indexOf()</code>方法中携带了两个参数，具体解释请看注释。</p>\n<h3 id=\"indexOf-举例\"><a href=\"#indexOf-举例\" class=\"headerlink\" title=\"indexOf 举例\"></a>indexOf 举例</h3><p><strong>案例</strong>：查找字符串”qianguyihao”中，所有 <code>a</code> 出现的位置以及次数。</p>\n<p>思路：</p>\n<p>（1）先查找第一个 a 出现的位置。</p>\n<p>（2）只要 indexOf 返回的结果不是 -1 就继续往后查找。</p>\n<p>（3）因为 indexOf 只能查找到第一个，所以后面的查找，可以利用第二个参数，在当前索引加 1，从而继续查找。</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (index !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index);</span><br><span class=\"line\">    num++; <span class=\"comment\">// 每打印一次，就计数一次</span></span><br><span class=\"line\">    index = str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a 出现的次数是: &#x27;</span> + num);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、search-：获取字符串中指定内容的索引（参数里一般是正则）\"><a href=\"#2、search-：获取字符串中指定内容的索引（参数里一般是正则）\" class=\"headerlink\" title=\"2、search()：获取字符串中指定内容的索引（参数里一般是正则）\"></a>2、search()：获取字符串中指定内容的索引（参数里一般是正则）</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引值 = str.<span class=\"title function_\">search</span>(想要查找的字符串);</span><br><span class=\"line\">索引值 = str.<span class=\"title function_\">search</span>(正则表达式);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>备注：<code>search()</code> 方法里的参数，既可以传字符串，也可以传正则表达式。</p>\n<p><strong>解释</strong>：可以检索一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回其<strong>第一次出现</strong>的索引；如果没有找到指定的内容，则返回 -1。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">search</span>(<span class=\"string\">&#x27;yi&#x27;</span>)); <span class=\"comment\">// 打印结果：6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">search</span>(<span class=\"regexp\">/yi/i</span>)); <span class=\"comment\">// 打印结果：6</span></span><br></pre></td></tr></table></figure>\n\n<p>备注：上方的<code>/yi/i</code>采用的是正则表达式的写法，意思是，让 name去匹配字符<code>yi</code>，忽略大小写。我们在后面会专门介绍正则表达式。</p>\n<h3 id=\"3、includes-：字符串中是否包含指定的内容\"><a href=\"#3、includes-：字符串中是否包含指定的内容\" class=\"headerlink\" title=\"3、includes()：字符串中是否包含指定的内容\"></a>3、includes()：字符串中是否包含指定的内容</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = str.<span class=\"title function_\">includes</span>(想要查找的字符串, [position]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：判断一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回 true；否则返回 false。</p>\n<p>参数中的 <code>position</code>：如果不指定，则默认为0；如果指定，则规定了检索的起始位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;yi&#x27;</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;haha&#x27;</span>)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;yi&#x27;</span>,<span class=\"number\">7</span>)); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4、startsWith-：字符串是否以指定的内容开头\"><a href=\"#4、startsWith-：字符串是否以指定的内容开头\" class=\"headerlink\" title=\"4、startsWith()：字符串是否以指定的内容开头\"></a>4、startsWith()：字符串是否以指定的内容开头</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = str.<span class=\"title function_\">startsWith</span>(想要查找的内容, [position]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：判断一个字符串是否以指定的子字符串开头。如果是，则返回 true；否则返回 false。</p>\n<p><strong>参数中的position</strong>：</p>\n<ul>\n<li><p>如果不指定，则默认为0。</p>\n</li>\n<li><p>如果指定，则规定了<strong>检索的起始位置</strong>。检索的范围包括：这个指定位置开始，直到字符串的末尾。即：[position, str.length)</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;abcdefg&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;a&#x27;</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;b&#x27;</span>)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为指定了起始位置为3，所以是在 defg 这个字符串中检索。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、endsWith-：字符串是否以指定的内容结尾\"><a href=\"#5、endsWith-：字符串是否以指定的内容结尾\" class=\"headerlink\" title=\"5、endsWith()：字符串是否以指定的内容结尾\"></a>5、endsWith()：字符串是否以指定的内容结尾</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = str.<span class=\"title function_\">endsWith</span>(想要查找的内容, [position]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：判断一个字符串是否以指定的子字符串结尾。如果是，则返回 true；否则返回 false。</p>\n<p><strong>参数中的position</strong>：</p>\n<ul>\n<li><p>如果不指定，则默认为 str.length。</p>\n</li>\n<li><p>如果指定，则规定了<strong>检索的结束位置</strong>。检索的范围包括：从第一个字符串开始，直到这个指定的位置。即：[0, position)</p>\n</li>\n<li><p>或者你可以这样简单理解：endsWith() 方法里的position，表示<strong>检索的长度</strong>。</p>\n</li>\n</ul>\n<p>注意：startsWith() 和 endsWith()这两个方法，他们的 position 的含义是不同的，请仔细区分。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;abcdefg&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;g&#x27;</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;f&#x27;</span>)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为指定了截止位置为3，所以是在 abc 这个长度为3字符串中检索</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<p>注意看上方的注释。</p>\n<p>参考链接：<a href=\"https://www.softwhy.com/article-2885-1.html\">JavaScript endsWith()介绍</a></p>\n<h2 id=\"获取指定位置的字符\"><a href=\"#获取指定位置的字符\" class=\"headerlink\" title=\"获取指定位置的字符\"></a>获取指定位置的字符</h2><h3 id=\"1、charAt-index\"><a href=\"#1、charAt-index\" class=\"headerlink\" title=\"1、charAt(index)\"></a>1、charAt(index)</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符 = str.<span class=\"title function_\">charAt</span>(index);</span><br></pre></td></tr></table></figure>\n\n<p>解释：返回字符串指定位置的字符。这里的 <code>str.charAt(index)</code>和<code>str[index]</code>的效果是一样的。</p>\n<p>注意：字符串中第一个字符的下标是 0。如果参数 index 不在 [0, string.length) 之间，该方法将返回一个空字符串。</p>\n<p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;smyhvae&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charAt</span>(i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1401.png\"></p>\n<p>上面这个例子一般不用。一般打印数组和 json 的时候用索引，打印 String 不建议用索引。</p>\n<h3 id=\"2、str-index\"><a href=\"#2、str-index\" class=\"headerlink\" title=\"2、str[index]\"></a>2、str[index]</h3><p><code>str.charAt(index)</code>和<code>str[index]</code>的效果是一样的，不再赘述。区别在于：<code>str[index]</code>是 H5 标准里新增的特性。</p>\n<h3 id=\"3、charCodeAt-index\"><a href=\"#3、charCodeAt-index\" class=\"headerlink\" title=\"3、charCodeAt(index)\"></a>3、charCodeAt(index)</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符 = str.<span class=\"title function_\">charCodeAt</span>(index);</span><br></pre></td></tr></table></figure>\n\n<p>解释：返回字符串指定位置的字符的 Unicode 编码。不会修改原字符串。</p>\n<p>在实际应用中，通过这个方法，我们可以判断用户按下了哪个按键。</p>\n<p><strong>代码举例</strong>：打印字符串的<strong>占位长度</strong>。</p>\n<p>提示：一个英文占一个位置，一个中文占两个位置。</p>\n<p>思路：判断该字符是否在 0-127 之间（在的话是英文，不在是非英文）。</p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//    sort();   底层用到了charCodeAt();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;I love my country!我你爱中国！&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//需求：求一个字符串占有几个字符位。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//思路；如果是英文，站一个字符位，如果不是英文占两个字符位。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//技术点：判断该字符是否在0-127之间。（在的话是英文，不在是非英文）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"title function_\">getZFWlength</span>(str));</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(str.<span class=\"property\">length</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//定义方法：字符位</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">getZFWlength</span>(<span class=\"params\">string</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//定义一个计数器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; string.<span class=\"property\">length</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//对每一位字符串进行判断，如果Unicode编码在0-127，计数器+1；否则+2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (string.<span class=\"title function_\">charCodeAt</span>(i) &lt; <span class=\"number\">128</span> &amp;&amp; string.<span class=\"title function_\">charCodeAt</span>(i) &gt;= <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                count++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                count += <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> count;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30</span><br><span class=\"line\">24</span><br></pre></td></tr></table></figure>\n\n<p>从打印结果可以看出：字符串的长度是 24，但是却占了 30 个字符位（一个中文占两个字符位）。</p>\n<p>另外，sort()方法其实底层也是用到了 charCodeAt()，因为用到了 Unicode 编码。</p>\n<h2 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h2><h3 id=\"1、slice\"><a href=\"#1、slice\" class=\"headerlink\" title=\"1、slice()\"></a>1、slice()</h3><blockquote>\n<p>slice() 方法用的最多。</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新字符串 = str.<span class=\"title function_\">slice</span>(开始索引, 结束索引); <span class=\"comment\">//两个参数都是索引值。包左不包右。</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：从字符串中截取指定的内容。不会修改原字符串，而是将截取到的内容返回。</p>\n<p>注意：上面的参数，包左不包右。参数举例如下：</p>\n<ul>\n<li><p><code>(2, 5)</code> 截取时，包左不包右。</p>\n</li>\n<li><p><code>(2)</code> 表示<strong>从指定的索引位置开始，截取到最后</strong>。</p>\n</li>\n<li><p><code>(-3)</code> 表示从倒数第三个开始，截取到最后。</p>\n</li>\n<li><p><code>(1, -1)</code> 表示从第一个截取到倒数第一个。</p>\n</li>\n<li><p><code>(5, 2)</code> 表示前面的大，后面的小，返回值为空。</p>\n</li>\n</ul>\n<h3 id=\"2、substring\"><a href=\"#2、substring\" class=\"headerlink\" title=\"2、substring()\"></a>2、substring()</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新字符串 = str.<span class=\"title function_\">substring</span>(开始索引, 结束索引); <span class=\"comment\">//两个参数都是索引值。包左不包右。</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：从字符串中截取指定的内容。和<code>slice()</code>类似。</p>\n<p><code>substring()</code>和<code>slice()</code>是类似的。但不同之处在于：</p>\n<ul>\n<li><p><code>substring()</code>不能接受负值作为参数。如果传递了一个<strong>负值</strong>，则默认使用 0。</p>\n</li>\n<li><p><code>substring()</code>还会自动调整参数的位置，如果第二个参数小于第一个，则自动交换。比如说， <code>substring(1, 0)</code>相当于截取的是第一个字符。</p>\n</li>\n</ul>\n<h3 id=\"3、substr\"><a href=\"#3、substr\" class=\"headerlink\" title=\"3、substr()\"></a>3、substr()</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 = str.<span class=\"title function_\">substr</span>(开始索引, 截取的长度);</span><br></pre></td></tr></table></figure>\n\n<p>解释：从字符串中截取指定的内容。不会修改原字符串，而是将截取到的内容返回。</p>\n<p>注意，这个方法的第二个参数<strong>截取的长度</strong>，不是结束索引。</p>\n<p>参数举例：</p>\n<ul>\n<li><p><code>(2,4)</code> 从索引值为 2 的字符开始，截取 4 个字符。</p>\n</li>\n<li><p><code>(1)</code> 从指定位置开始，截取到最后。</p>\n</li>\n<li><p><code>(-3)</code> 从倒数第几个开始，截取到最后。</p>\n</li>\n</ul>\n<p>备注：ECMAscript 没有对 <code>substr()</code> 方法进行标准化，因此不建议使用它。</p>\n<h2 id=\"String-fromCharCode\"><a href=\"#String-fromCharCode\" class=\"headerlink\" title=\"String.fromCharCode()\"></a>String.fromCharCode()</h2><p><code>String.fromCharCode()</code>：根据字符的 Unicode 编码获取字符。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result1 = <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(<span class=\"number\">72</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(<span class=\"number\">20013</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 打印结果：H</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 打印结果：中</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h2><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新字符串 = str1.<span class=\"title function_\">concat</span>(str2)； <span class=\"comment\">//连接两个字符串</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：字符串的连接。</p>\n<p>这种方法基本不用，直接把两个字符串相加就好。</p>\n<p>是的，你会发现，数组中也有<code>concat()</code>方法，用于数组的连接。这个方法在数组中用得挺多的。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;qiangu&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;yihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = str1.<span class=\"title function_\">concat</span>(str2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 打印结果：qianguyihao</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"split-：字符串转换为数组-【重要】\"><a href=\"#split-：字符串转换为数组-【重要】\" class=\"headerlink\" title=\"split()：字符串转换为数组 【重要】\"></a>split()：字符串转换为数组 【重要】</h2><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的数组 = str.<span class=\"title function_\">split</span>(分隔符);</span><br></pre></td></tr></table></figure>\n\n<p>解释：通过指定的分隔符，将一个字符串拆分成一个<strong>数组</strong>。不会改变原字符串。</p>\n<p>备注：<code>split()</code>这个方法在实际开发中用得非常多。一般来说，从接口拿到的 json 数据中，经常会收到类似于<code>&quot;q, i, a, n&quot;</code>这样的字符串，前端需要将这个字符串拆分成<code>[&#39;q&#39;, &#39;i&#39;, &#39;a&#39;, &#39;n&#39;]</code>数组，这个时候<code>split()</code>方法就派上用场了。</p>\n<p><strong>代码举例 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qian, gu, yi, hao&#x27;</span>; <span class=\"comment\">// 用逗号隔开的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = str.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>); <span class=\"comment\">// 将字符串 str 拆分成数组，通过逗号来拆分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array); <span class=\"comment\">// 打印结果是数组：[&quot;qian&quot;, &quot; gu&quot;, &quot; yi&quot;, &quot; hao&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码举例 2</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//split()方法：字符串变数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;千古壹号|qianguyihao|许嵩&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;结果1：&#x27;</span> +str3.<span class=\"title function_\">split</span>()); <span class=\"comment\">// 无参数，表示：把整个字符串作为一个元素添加到数组中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>)); <span class=\"comment\">// 参数为空字符串，则表示：分隔字符串中每一个字符，分别添加到数组中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;|&#x27;</span>)); <span class=\"comment\">// 参数为指定字符，表示：用 &#x27;|&#x27; 分隔字符串。此分隔符将不会出现在数组的任意一个元素中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;许&#x27;</span>)); <span class=\"comment\">// 同上</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：（都是数组）</p>\n<p><img src=\"http://img.smyhvae.com/20200611_2050.png\"></p>\n<h2 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h2><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的字符串 = str.<span class=\"title function_\">replace</span>(被替换的子串，新的子串);</span><br></pre></td></tr></table></figure>\n\n<p>解释：将字符串中的指定内容，替换为新的内容并返回。不会修改原字符串。</p>\n<p>注意：这个方法，默认只会替换第一个被匹配到的字符。如果要全局替换，需要使用正则。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//replace()方法：替换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;Today is fine day,today is fine day !&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;today&#x27;</span>, <span class=\"string\">&#x27;tomorrow&#x27;</span>)); <span class=\"comment\">//只能替换第一个today</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/today/gi</span>, <span class=\"string\">&#x27;tomorrow&#x27;</span>)); <span class=\"comment\">//这里用到了正则，才能替换所有的today</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"repeat-：重复字符串\"><a href=\"#repeat-：重复字符串\" class=\"headerlink\" title=\"repeat()：重复字符串\"></a>repeat()：重复字符串</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newStr = str.<span class=\"title function_\">repeat</span>(重复的次数);</span><br></pre></td></tr></table></figure>\n\n<p>解释：将字符串重复指定的次数。会返回新的值，不会修改原字符串。</p>\n<p>举例1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">repeat</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// 打印内容：qianguyihaoqianguyihao</span></span><br></pre></td></tr></table></figure>\n\n<p>举例2：（模糊字符串的后四位）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> telephone = <span class=\"string\">&#x27;13088889999&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mix_telephone = telephone.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, -<span class=\"number\">4</span>) + <span class=\"string\">&#x27;*&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 模糊电话号码的后四位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(telephone); <span class=\"comment\">// 打印结果：13088889999</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mix_telephone); <span class=\"comment\">// 打印结果：1308888****</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h2 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"trim()\"></a>trim()</h2><p><code>trim()</code>：去除字符串前后的空白。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//去除字符串前后的空格，trim();</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;   a   b   c   &#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">trim</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">trim</span>().<span class=\"property\">length</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20200607_2132.png\"></p>\n<h2 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h2><p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcdEFG&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转换成小写</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">toLowerCase</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转换成大写</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">toUpperCase</span>());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"html-方法\"><a href=\"#html-方法\" class=\"headerlink\" title=\"html 方法\"></a>html 方法</h2><ul>\n<li><p>anchor() 创建 a 链接</p>\n</li>\n<li><p>big()</p>\n</li>\n<li><p>sub()</p>\n</li>\n<li><p>sup()</p>\n</li>\n<li><p>link()</p>\n</li>\n<li><p>bold()</p>\n</li>\n</ul>\n<p>注意，str.link() 返回值是字符串。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;你好&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">anchor</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">big</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">sub</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">sup</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">link</span>(<span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">bold</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.smyhvae.com/20180202_1536.png\"></p>\n<h2 id=\"字符串练习\"><a href=\"#字符串练习\" class=\"headerlink\" title=\"字符串练习\"></a>字符串练习</h2><p><strong>练习 1</strong>：”smyhvaevaesmyh”查找字符串中所有 m 出现的位置。</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;smyhvaevaesmyh&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str2.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果指定位置的符号=== &quot;o&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//str2[i]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str2.<span class=\"title function_\">charAt</span>(i) === <span class=\"string\">&#x27;m&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>练习 2</strong>：判断一个字符串中出现次数最多的字符，统计这个次数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;smyhvaevaesmyhvae&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//定义一个json，然后判断json中是够有该属性，如果有该属性，那么值+1;否则创建一个该属性，并赋值为1；</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> json = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str2.<span class=\"property\">length</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//判断：如果有该属性，那么值+1;否则创建一个该属性，并赋值为1；</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> key = str2.<span class=\"title function_\">charAt</span>(i);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (json[key] === <span class=\"literal\">undefined</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            json[key] = <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            json[key] += <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(json);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;----------------&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//获取json中属性值最大的选项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> maxKey = <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> maxValue = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> json) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//        if(maxKey == &quot;&quot;)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//            maxKey = k;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//            maxValue = json[k];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//        &#125;else&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (json[k] &gt; maxValue) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            maxKey = k;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            maxValue = json[k];</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(maxKey);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(maxValue);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1540.png\"></p>\n","text":"内置对象简介JavaScript 中的对象分为3种：自定义对象、内置对象、浏览器对象。前面两种对象：是JS的基础内容，属于 ECMAScript； 第三个浏览器对象：属于JS独有，即 JS 内置的API。内置对象：就是指这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]}]}