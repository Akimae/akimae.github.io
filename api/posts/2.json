{"total":75,"pageSize":10,"pageCount":8,"data":[{"title":"34-正则表达式","slug":"JavaScript/34-正则表达式","date":"2023-02-16T07:30:25.460Z","updated":"2023-02-16T07:52:45.622Z","comments":true,"path":"api/articles/JavaScript/34-正则表达式.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"正则表达式简介\"><a href=\"#正则表达式简介\" class=\"headerlink\" title=\"正则表达式简介\"></a>正则表达式简介</h2><p><strong>定义</strong>：正则表达式用于定义一些字符串的规则。</p>\n<p><strong>作用</strong>：计算机可以根据正则表达式，来检查一个字符串是否符合指定的规则；或者将字符串中符合规则的内容提取出来。</p>\n<p>如果你想查看正则更多的内容，可以查阅官方文档关于 RegExp 这个内置对象的用法。</p>\n<h2 id=\"创建正则表达式的对象\"><a href=\"#创建正则表达式的对象\" class=\"headerlink\" title=\"创建正则表达式的对象\"></a>创建正则表达式的对象</h2><h3 id=\"方式一：使用构造函数创建正则表达式的对象\"><a href=\"#方式一：使用构造函数创建正则表达式的对象\" class=\"headerlink\" title=\"方式一：使用构造函数创建正则表达式的对象\"></a>方式一：使用构造函数创建正则表达式的对象</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量 = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;正则表达式&quot;</span>); <span class=\"comment\">// 注意，参数是字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> 变量 = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;正则表达式&quot;</span>, <span class=\"string\">&quot;匹配模式&quot;</span>); <span class=\"comment\">// 注意，两个参数都是字符串</span></span><br></pre></td></tr></table></figure>\n\n<p>备注：<code>RegExp</code>的意思是 <strong>Regular expression</strong>。使用typeof检查正则对象，会返回object。</p>\n<p>上面的语法中，既可以传一个参数，也可以传两个参数。</p>\n<p>创建了正则表达式的对象后，该怎么使用呢？大致分为两个步骤：</p>\n<ul>\n<li><p>（1）创建正则表达式的对象 reg。</p>\n</li>\n<li><p>（2）使用 reg 的test() 方法，判断指定字符串是否符合规则。</p>\n</li>\n</ul>\n<p><strong>正则表达式的<code>test()</code>方法</strong>：【重要】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myReg.<span class=\"title function_\">test</span>(str); <span class=\"comment\">// 判断字符串 str 是否符合 指定的 myReg 这个正则表达式的规则</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：使用<code>test()</code>这个方法可以用来检查一个字符串是否符合正则表达式的规则，<strong>如果符合则返回true，否则返回false</strong>。</p>\n<p>我们来看看下面的例子。</p>\n<p><strong>1、传一个参数时</strong>：</p>\n<p>构造函数 RegExp 中，可以只传一个参数。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// 定义一个正则表达式：检查一个字符串中是否含有 a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;qianguyihao&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;smyh&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过 test()方法，判断字符串是否符合 上面定义的 reg 规则</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str1)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str2)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意，上面的例子中，我们是先定义了一个正则表达式的规则，然后通过正则表达式的<code>test()</code>方法来判断字符串是否符合之前定义的规则。</p>\n<p><strong>2、传两个参数时</strong>：匹配模式 【重要】</p>\n<p>构造函数 RegExp 中，也可以传两个参数。我们可以传递一个<strong>匹配模式</strong>作为第二个参数。这个参数可以是：</p>\n<ul>\n<li><p><code>i</code> 忽略大小写。这里的 i 指的是 ignore。</p>\n</li>\n<li><p><code>g</code> 全局匹配模式。这里的 g 指的是 global。</p>\n</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qiangu&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// 打印结果：true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式二：使用字面量创建正则表达式\"><a href=\"#方式二：使用字面量创建正则表达式\" class=\"headerlink\" title=\"方式二：使用字面量创建正则表达式\"></a>方式二：使用字面量创建正则表达式</h3><p>我们可以使用字面量来创建正则表达式。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量 = <span class=\"regexp\">/正则表达式/</span>;  <span class=\"comment\">// 注意，这个语法里没有引号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> 变量 = <span class=\"regexp\">/正则表达式/</span>匹配模式;  <span class=\"comment\">// 注意，这个语法里没有引号</span></span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/A/i</span>; <span class=\"comment\">// 定义正则表达式的规则：检查一个字符串中是否含有 a。忽略大小写。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;qiangu&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> reg);  <span class=\"comment\">// 打印结果：object</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// 打印结果：true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以上两种方式的对比\"><a href=\"#以上两种方式的对比\" class=\"headerlink\" title=\"以上两种方式的对比\"></a>以上两种方式的对比</h3><ul>\n<li><p>方式一：使用构造函数创建时，更加灵活，因为参数中还可以传递变量。</p>\n</li>\n<li><p>方式二：使用字面量的方式创建，更加简单。</p>\n</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;i&quot;</span>); <span class=\"comment\">// 方式一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a/i</span>; <span class=\"comment\">// 方式二</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这两行代码的作用是等价的。</p>\n<h3 id=\"避坑指南：全局匹配-g-慎用test-方法\"><a href=\"#避坑指南：全局匹配-g-慎用test-方法\" class=\"headerlink\" title=\"避坑指南：全局匹配 g 慎用test()方法\"></a>避坑指南：全局匹配 g 慎用test()方法</h3><p>对于非全局匹配的正则表达式，<code>test()</code>只会检测<strong>是否存在某个目标字符串</strong>（只要存在就为 true），多次检测的结果都相同。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/test/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_test_test&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">reg.<span class=\"title function_\">test</span>(str) <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.<span class=\"title function_\">test</span>(str) <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.<span class=\"title function_\">test</span>(str) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>重点来了。</p>\n<p>当设置全局标志 <code>/g</code> 时，一旦字符串中还存在匹配，test() 方法都将返回 true，同时匹配成功后将把 <code>lastIndex</code> 属性的值<strong>设置为上次匹配成功结果之后的第一个字符所在的位置</strong>，下次匹配将从 <code>lastIndex</code> 指示的位置开始；匹配不成功时返回 false，同时将 lastIndex 属性的值重置为 0。</p>\n<p>举例：（很重要的例子，看仔细）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/test/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_test_test&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"property\">lastIndex</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"property\">lastIndex</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"property\">lastIndex</span>); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：</p>\n<p>全局匹配模式<code>g</code>一般用于 <code>exec()</code>、<code>match()</code>、<code>replace()</code>等方法。</p>\n<p>全局匹配模式<code>g</code>如果用于test()方法会有问题。因为g模式会生成一个<code>lastindex</code>参数来存储匹配最后一次的位置。</p>\n<p>参考链接：</p>\n<ul>\n<li><p><a href=\"https://juejin.im/post/5de9bd5fe51d45582c27b6f3\">JS正则表达式全局匹配的那些坑</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/Leolu007/article/details/8576490\">javascript正则全局匹配g慎用test方法</a></p>\n</li>\n<li><p><a href=\"https://github.com/qianguyihao/Web/issues/69\">issues</a></p>\n</li>\n</ul>\n<h2 id=\"正则表达式的简单语法\"><a href=\"#正则表达式的简单语法\" class=\"headerlink\" title=\"正则表达式的简单语法\"></a>正则表达式的简单语法</h2><h3 id=\"检查一个字符串中是否包含-a或b\"><a href=\"#检查一个字符串中是否包含-a或b\" class=\"headerlink\" title=\"检查一个字符串中是否包含 a或b\"></a>检查一个字符串中是否包含 a或b</h3><p><strong>写法1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a|b/</span>;</span><br></pre></td></tr></table></figure>\n\n<p>解释：使用 <code>|</code> 表示<code>或</code>的意思。</p>\n<p><strong>写法2</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[ab]/</span>;  <span class=\"comment\">// 跟上面的那行语法，是等价的</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：这里的<code>[]</code>也是表示<code>或</code>的意思。</p>\n<p><code>[]</code>这个符号在正则还是比较常用的。我们接下来看几个例子。</p>\n<h3 id=\"表示：或\"><a href=\"#表示：或\" class=\"headerlink\" title=\"[]表示：或\"></a>[]表示：或</h3><p>一些规则：</p>\n<ul>\n<li><p><code>/[ab]/</code> 等价于 <code>/a|b/</code>：检查一个字符串中是否包含 <strong>a或b</strong></p>\n</li>\n<li><p><code>/[a-z]/</code>：检查一个字符串那种是否包含<strong>任意小写字母</strong></p>\n</li>\n<li><p><code>/[A-Z]/</code>：任意大写字母</p>\n</li>\n<li><p><code>/[A-z]/</code>：任意字母</p>\n</li>\n<li><p><code>/[0-9]/</code>：任意数字</p>\n</li>\n<li><p><code>/a[bde]c/</code>：检查一个字符串中是否包含 abc 或 adc 或 aec</p>\n</li>\n</ul>\n<h3 id=\"表示：除了\"><a href=\"#表示：除了\" class=\"headerlink\" title=\"[^ ] 表示：除了\"></a>[^ ] 表示：除了</h3><p>举例1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^ab]/</span>; <span class=\"comment\">// 规则：字符串中，除了a、b之外，还有没有其他的字符内容？</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;acb&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str)); <span class=\"comment\">// 打印结果：true</span></span><br></pre></td></tr></table></figure>\n\n<p>举例2：（可以用来验证某字符串是否为 纯数字）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^0-9]/</span>;  <span class=\"comment\">// 规则：字符串中，除了数字之外，还有没有其他的内容？</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&quot;1991&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;199a1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str1)); <span class=\"comment\">// 打印结果：false （如果字符串是 纯数字，则返回 false）</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg.<span class=\"title function_\">test</span>(str2)); <span class=\"comment\">// 打印结果：true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持正则表达式的-String-对象的方法\"><a href=\"#支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"支持正则表达式的 String 对象的方法\"></a>支持正则表达式的 String 对象的方法</h2><p> String对象的如下方法，是支持正则表达式的：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">split()</td>\n<td align=\"left\">将字符串拆分成数组</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">search()</td>\n<td align=\"left\">搜索字符串中是否含有指定内容，返回索引 index</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">match()</td>\n<td align=\"left\">根据正则表达式，从一个字符串中将符合条件的内容提取出来</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">replace()</td>\n<td align=\"left\">将字符串中的指定内容，替换为新的内容并返回</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>下面来分别介绍和举例。</p>\n<h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h3><p><code>split()</code>：将一个字符串拆分成一个数组。可以接受一个正则表达式作为参数。</p>\n<p>备注：关于<code>split()</code>更详细的用法，可以看之前的关于《内置对象：String》这篇文章。</p>\n<p><strong>正则相关的举例</strong>：根据任意字母，将字符串拆分成数组。</p>\n<p>代码实现：（通过正则）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;1a2b3c4d5e6f7g&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = str.<span class=\"title function_\">split</span>(<span class=\"regexp\">/[A-z]/</span>); <span class=\"comment\">// 参数是一个正则表达式：表示所有字母</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;2&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;3&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;4&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;5&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;6&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;7&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search()\"></a>search()</h3><p><code>search()</code>：搜索字符串中是否含有指定内容。如果搜索到指定内容，则会返回第一次出现的索引；否则返回-1。</p>\n<p><code>search()</code>方法可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串。<code>serach()</code>只会查找第一个，即使设置全局匹配也没用。</p>\n<p><strong>举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;hello abc hello aec afc&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 搜索字符串中是否含有abc 或 aec 或 afc</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">result = str.<span class=\"title function_\">search</span>(<span class=\"regexp\">/a[bef]c/</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 打印结果：6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h3><p><code>match()</code>：根据正则表达式，从一个字符串中将符合条件的内容提取出来，封装到一个数组中返回（即使只查询到一个结果）。</p>\n<p><strong>注意</strong>：默认情况下，<code>match()</code>方法只会找到<strong>第一个</strong>符合要求的内容，找到以后就停止检索。我们可以设置正则表达式为<strong>全局匹配</strong>模式，这样就会匹配到所有的内容，并以<strong>数组</strong>的形式返回。</p>\n<p>另外，我们可以为一个正则表达式设置多个匹配模式，且匹配模式的顺序无所谓。</p>\n<p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/[a-z]/</span>);   <span class=\"comment\">// 找到符合要求的第一个内容，然后返回</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/[a-z]/g</span>);  <span class=\"comment\">// 设置为“全局匹配”模式，匹配字符串中 所有的小写字母</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result3 = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/[a-z]/gi</span>); <span class=\"comment\">// 设置多个匹配模式，匹配字符串中 所有的字母（忽略大小写）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 打印结果：[&quot;a&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 打印结果：[&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result3); <span class=\"comment\">// 打印结果：[&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;e&quot;, &quot;f&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：</p>\n<p>match()这个方法还是很实用的，可以在一个很长的字符串中，提取出<strong>有规则</strong>的内容。这不就是爬虫的时候经常会遇到的场景么？</p>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><p><code>replace()</code>：将字符串中的指定内容，替换为新的内容并返回。不会修改原字符串。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的字符串 = str.<span class=\"title function_\">replace</span>(被替换的内容，新的内容);</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：</p>\n<ul>\n<li><p>被替换的内容：可以接受一个正则表达式作为参数。</p>\n</li>\n<li><p>新的内容：默认只会替换第一个。如果需要替换全部符合条件的内容，可以设置正则表达式为<strong>全局匹配</strong>模式。</p>\n</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//replace()方法：替换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;Today is fine day,today is fine day !!!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;today&quot;</span>,<span class=\"string\">&quot;tomorrow&quot;</span>));  <span class=\"comment\">//只能替换第一个today</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/today/gi</span>,<span class=\"string\">&quot;tomorrow&quot;</span>)); <span class=\"comment\">//这里用到了正则，且为“全局匹配”模式，才能替换所有的today</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见正则表达式举例\"><a href=\"#常见正则表达式举例\" class=\"headerlink\" title=\"常见正则表达式举例\"></a>常见正则表达式举例</h2><h3 id=\"检查一个字符串是否是一个合法手机号\"><a href=\"#检查一个字符串是否是一个合法手机号\" class=\"headerlink\" title=\"检查一个字符串是否是一个合法手机号\"></a>检查一个字符串是否是一个合法手机号</h3><p>手机号的规则：</p>\n<ul>\n<li><p>以1开头（<code>^1</code> 表示1开头 , <code>[^1]</code>表示非1或除了1）</p>\n</li>\n<li><p>第二位是3~9之间任意数字</p>\n</li>\n<li><p>三位以后任意9位数字</p>\n</li>\n</ul>\n<p>正则实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> phoneStr = <span class=\"string\">&quot;13067890123&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> phoneReg = <span class=\"regexp\">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(phoneReg.<span class=\"title function_\">test</span>(phoneStr));</span><br></pre></td></tr></table></figure>\n\n<p><strong>备注</strong>：如果在正则表达式中同时使用<code>^</code>和<code>$</code>符号，则要求字符串必须完全符合正则表达式。</p>\n<h3 id=\"去掉字符串开头和结尾的空格\"><a href=\"#去掉字符串开头和结尾的空格\" class=\"headerlink\" title=\"去掉字符串开头和结尾的空格\"></a>去掉字符串开头和结尾的空格</h3><p>正则实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s*|\\s*$/g</span>,<span class=\"string\">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>解释如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\s*/</span>, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">//去除开头的空格</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s*$/</span>, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">//去除结尾的空格</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断字符串是否为电子邮件\"><a href=\"#判断字符串是否为电子邮件\" class=\"headerlink\" title=\"判断字符串是否为电子邮件\"></a>判断字符串是否为电子邮件</h3><p>正则实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> emailReg = <span class=\"regexp\">/^\\w&#123;3,&#125;(\\.\\w+)*@[A-z0-9]+(\\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> email = <span class=\"string\">&quot;abchello@163.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(emailReg.<span class=\"title function_\">test</span>(email));</span><br></pre></td></tr></table></figure>\n\n\n\n","text":"正则表达式简介定义：正则表达式用于定义一些字符串的规则。作用：计算机可以根据正则表达式，来检查一个字符串是否符合指定的规则；或者将字符串中符合规则的内容提取出来。如果你想查看正则更多的内容，可以查阅官方文档关于 RegExp 这个内置对象的用法。创建正则表达式的对象方式一：使用构","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"31_3-类和构造继承（待更新）","slug":"JavaScript/33-类和构造继承（待更新）","date":"2023-02-16T07:30:25.458Z","updated":"2023-02-16T07:52:24.353Z","comments":true,"path":"api/articles/JavaScript/33-类和构造继承（待更新）.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n","text":"","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"31_2-原型链和原型继承（待更新）","slug":"JavaScript/32-原型链和原型继承（待更新）","date":"2023-02-16T07:30:25.456Z","updated":"2023-02-16T07:52:14.523Z","comments":true,"path":"api/articles/JavaScript/32-原型链和原型继承（待更新）.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在 ES6 中，我们可以通过 ES6 引入的<strong>类 Class</strong> 来实现面向对象的编程（下一篇文章会讲到）。但是<strong>在 ES6 之前，我们是通过构造函数和原型，来模拟类的实现机制</strong>。</p>\n<p>今天这篇文章，我们就来学习构造函数和原型。</p>\n","text":"前言在 ES6 中，我们可以通过 ES6 引入的类 Class 来实现面向对象的编程（下一篇文章会讲到）。但是在 ES6 之前，我们是通过构造函数和原型，来模拟类的实现机制。今天这篇文章，我们就来学习构造函数和原型。","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"31_1-对象的高级操作（待更新）","slug":"JavaScript/31-对象的高级操作（待更新）","date":"2023-02-16T07:30:25.454Z","updated":"2023-02-16T07:51:55.723Z","comments":true,"path":"api/articles/JavaScript/31-对象的高级操作（待更新）.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"Object-freeze-冻结对象\"><a href=\"#Object-freeze-冻结对象\" class=\"headerlink\" title=\"Object.freeze() 冻结对象\"></a>Object.freeze() 冻结对象</h2><p>Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> params = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"string\">&#x27;8899&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(params); <span class=\"comment\">// 冻结对象 params</span></span><br><span class=\"line\"></span><br><span class=\"line\">params.<span class=\"property\">port</span> = <span class=\"string\">&#x27;8080&#x27;</span>;<span class=\"comment\">// 修改无效</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，把 params 对象冻结后，如果想再改变 params 里面的属性值，是无效的。</p>\n","text":"Object.freeze() 冻结对象Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"30-浅拷贝和深拷贝","slug":"JavaScript/30-浅拷贝和深拷贝","date":"2023-02-16T07:30:25.451Z","updated":"2023-02-16T07:51:34.285Z","comments":true,"path":"api/articles/JavaScript/30-浅拷贝和深拷贝.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li><p>浅拷贝：只拷贝最外面一层的数据；更深层次的对象，只拷贝引用。</p>\n</li>\n<li><p>深拷贝：拷贝多层数据；每一层级别的数据都会拷贝。</p>\n</li>\n</ul>\n<p><strong>总结</strong>：</p>\n<p>拷贝引用的时候，是属于<strong>传址</strong>，而非<strong>传值</strong>。关于传值和传址的区别，是很基础的内容，详见《JavaScript 基础&#x2F;对象简介.md》这篇文章。</p>\n<p>深拷贝会把对象里<strong>所有的数据</strong>重新复制到新的内存空间，是最彻底的拷贝。</p>\n<h2 id=\"浅拷贝的实现方式\"><a href=\"#浅拷贝的实现方式\" class=\"headerlink\" title=\"浅拷贝的实现方式\"></a>浅拷贝的实现方式</h2><h3 id=\"用-for-in-实现浅拷贝（比较繁琐）\"><a href=\"#用-for-in-实现浅拷贝（比较繁琐）\" class=\"headerlink\" title=\"用 for in 实现浅拷贝（比较繁琐）\"></a>用 for in 实现浅拷贝（比较繁琐）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;很厉害&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//  用 for in 将 obj1 的值拷贝给 obj2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">    obj2[key] = obj1[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj2:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj2));</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.<span class=\"property\">info</span>.<span class=\"property\">desc</span> = <span class=\"string\">&#x27;永不止步&#x27;</span>; <span class=\"comment\">// 当修改 obj1 的第二层数据时，obj2的值也会被改变。所以  for in 是浅拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj2:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj2));</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，用 for in 做拷贝时，只能做到浅拷贝。也就是说，在 obj2 中， name 和 age 这两个属性会单独存放在新的内存地址中，和 obj1 没有关系。但是，<code>obj2.info</code> 属性，跟 <code>obj1.info</code>属性，<strong>它俩指向的是同一个堆内存地址</strong>。所以，当我修改 <code>obj1.info</code> 里的值之后，<code>obj2.info</code>的值也会被修改。</p>\n<p>打印结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj2:&#123;&quot;name&quot;:&quot;qianguyihao&quot;,&quot;age&quot;:28,&quot;info&quot;:&#123;&quot;desc&quot;:&quot;很厉害&quot;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj2:&#123;&quot;name&quot;:&quot;qianguyihao&quot;,&quot;age&quot;:28,&quot;info&quot;:&#123;&quot;desc&quot;:&quot;永不止步&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用-Object-assgin-实现浅拷贝（推荐的方式）\"><a href=\"#用-Object-assgin-实现浅拷贝（推荐的方式）\" class=\"headerlink\" title=\"用 Object.assgin() 实现浅拷贝（推荐的方式）\"></a>用 Object.assgin() 实现浅拷贝（推荐的方式）</h3><p>上面的 for in 方法做浅拷贝过于繁琐。ES6 给我们提供了新的语法糖，通过 <code>Object.assgin()</code> 可以实现<strong>浅拷贝</strong>。</p>\n<p><code>Object.assgin()</code> 在日常开发中，使用得相当频繁，非掌握不可。</p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法1</span></span><br><span class=\"line\">obj2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assgin</span>(obj2, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语法2</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(目标对象, 源对象<span class=\"number\">1</span>, 源对象<span class=\"number\">2.</span>..);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：将<code>obj1</code> 拷贝给 <code>obj2</code>。执行完毕后，obj2 的值会被更新。</p>\n<p><strong>作用</strong>：将 obj1 的值追加到 obj2 中。如果对象里的属性名相同，会被覆盖。</p>\n<p>从语法2中可以看出，Object.assign() 可以将多个“源对象”拷贝到“目标对象”中。</p>\n<p><strong>例 1</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浅拷贝：把 obj1 拷贝给 obj2。如果 obj1 只有一层数据，那么，obj1 和 obj2 则互不影响</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, obj1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj2:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj2));</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.<span class=\"property\">info</span>.<span class=\"property\">desc</span> = <span class=\"string\">&#x27;永不止步&#x27;</span>; <span class=\"comment\">// 由于 Object.assign() 只是浅拷贝，所以当修改 obj1 的第二层数据时，obj2 对应的值也会被改变。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;obj2:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj2));</span><br></pre></td></tr></table></figure>\n\n<p>代码解释：由于 Object.assign() 只是浅拷贝，所以在当前这个案例中， obj2 中的 name 属性和 age 属性是单独存放在新的堆内存地址中的，和 obj1 没有关系；但是，<code>obj2.info</code> 属性，跟 <code>obj1.info</code>属性，<strong>它俩指向的是同一个堆内存地址</strong>。所以，当我修改 <code>obj1.info</code> 里的值之后，<code>obj2.info</code>的值也会被修改。</p>\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj2:&#123;&quot;name&quot;:&quot;qianguyihao&quot;,&quot;age&quot;:28,&quot;info&quot;:&#123;&quot;desc&quot;:&quot;hello&quot;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj2:&#123;&quot;name&quot;:&quot;qianguyihao&quot;,&quot;age&quot;:28,&quot;info&quot;:&#123;&quot;desc&quot;:&quot;永不止步&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例 2</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 【写法1】浅拷贝：把 myObj 拷贝给 obj1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(obj1, myObj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 【写法2】浅拷贝：把 myObj 拷贝给 obj2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, myObj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 【写法3】浅拷贝：把 myObj 拷贝给 obj31。注意，这里的 obj31 和 obj32 其实是等价的，他们指向了同一个内存地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj31 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj32 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(obj31, myObj);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面这三种写法，是等价的。所以，当我们需要将对象 A 复制（拷贝）给对象 B，不要直接使用 <code>B = A</code>，而是要使用 Object.assign(B, A)。</p>\n<p><strong>例 3</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123; <span class=\"attr\">city</span>: <span class=\"string\">&#x27;shenzhen&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">28</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj3 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(obj3, obj1, obj2); <span class=\"comment\">// 将 obj1、obj2的内容赋值给 obj3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj3); <span class=\"comment\">// &#123;name: &quot;qianguyihao&quot;, age: 28, city: &quot;shenzhen&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码，可以理解成：将多个对象（obj1和obj2）合并成一个对象 obj3。</p>\n<p><strong>例4</strong>：【重要】</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;hello world&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;许嵩&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浅拷贝：把 obj1 赋值给 obj2。这一行，是关键代码。这行代码的返回值也是 obj2</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(obj2, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj2));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;:&quot;qianguyihao&quot;,</span><br><span class=\"line\">    &quot;sex&quot;:&quot;男&quot;,</span><br><span class=\"line\">    &quot;age&quot;:28,</span><br><span class=\"line\">    &quot;desc&quot;:&quot;hello world&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，<strong>例 4 在实际开发中，会经常遇到，一定要掌握</strong>。它的作用是：将 obj1 的值追加到 obj2 中。如果两个对象里的属性名相同，则 obj2 中的值会被 obj1 中的值覆盖。</p>\n<h2 id=\"深拷贝的实现方式\"><a href=\"#深拷贝的实现方式\" class=\"headerlink\" title=\"深拷贝的实现方式\"></a>深拷贝的实现方式</h2><p>深拷贝其实就是将浅拷贝进行递归。</p>\n<h3 id=\"用-for-in-递归实现深拷贝\"><a href=\"#用-for-in-递归实现深拷贝\" class=\"headerlink\" title=\"用 for in 递归实现深拷贝\"></a>用 for in 递归实现深拷贝</h3><p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">color</span>: [<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;green&#x27;</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">deepCopy</span>(obj2, obj1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2);</span><br><span class=\"line\">obj1.<span class=\"property\">info</span>.<span class=\"property\">desc</span> = <span class=\"string\">&#x27;github&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法：深拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">newObj, oldObj</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> oldObj) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取属性值 oldObj[key]</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> item = oldObj[key];</span><br><span class=\"line\">        <span class=\"comment\">// 判断这个值是否是数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>) &#123;</span><br><span class=\"line\">            newObj[key] = [];</span><br><span class=\"line\">            <span class=\"title function_\">deepCopy</span>(newObj[key], item);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断这个值是否是对象</span></span><br><span class=\"line\">            newObj[key] = &#123;&#125;;</span><br><span class=\"line\">            <span class=\"title function_\">deepCopy</span>(newObj[key], item);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 简单数据类型，直接赋值</span></span><br><span class=\"line\">            newObj[key] = item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"概念浅拷贝：只拷贝最外面一层的数据；更深层次的对象，只拷贝引用。深拷贝：拷贝多层数据；每一层级别的数据都会拷贝。总结：拷贝引用的时候，是属于传址，而非传值。关于传值和传址的区别，是很基础的内容，详见《JavaScript 基础&#x2F;对象简介.md》这篇文章。深拷贝会把对象里","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"29-对象的基本操作","slug":"JavaScript/29-对象的基本操作","date":"2023-02-16T07:30:25.448Z","updated":"2023-02-16T07:51:21.206Z","comments":true,"path":"api/articles/JavaScript/29-对象的基本操作.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"对象的基本操作\"><a href=\"#对象的基本操作\" class=\"headerlink\" title=\"对象的基本操作\"></a>对象的基本操作</h2><h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><p>使用 new 关键字调用的函数，是构造函数 constructor。<strong>构造函数是专门用来创建对象的函数</strong>。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br></pre></td></tr></table></figure>\n\n<p>记住，使用<code>typeof</code>检查一个对象时，会返回<code>object</code>。</p>\n<p>关于创建对象的更多方式，可以看上一篇文章《对象的创建&amp;构造函数》。</p>\n<h3 id=\"向对象中添加属性\"><a href=\"#向对象中添加属性\" class=\"headerlink\" title=\"向对象中添加属性\"></a>向对象中添加属性</h3><p>在对象中保存的值称为属性。</p>\n<p>向对象添加属性的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象.属性名 = 属性值;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向obj中添加一个name属性</span></span><br><span class=\"line\">obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;孙悟空&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向obj中添加一个gender属性</span></span><br><span class=\"line\">obj.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向obj中添加一个age属性</span></span><br><span class=\"line\">obj.<span class=\"property\">age</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj)); <span class=\"comment\">// 将 obj 以字符串的形式打印出来</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;:&quot;孙悟空&quot;,</span><br><span class=\"line\">\t&quot;gender&quot;:&quot;男&quot;,</span><br><span class=\"line\">\t&quot;age&quot;:18</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们也可以看出一个规律：如果对象里本身没有某个属性，则用点语法赋值时，这个属性会被创建出来。</p>\n<h3 id=\"获取对象中的属性\"><a href=\"#获取对象中的属性\" class=\"headerlink\" title=\"获取对象中的属性\"></a>获取对象中的属性</h3><p><strong>方式 1</strong>：</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象.属性名;</span><br></pre></td></tr></table></figure>\n\n<p>如果获取对象中没有的属性，不会报错而是返回<code>undefined</code>。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向obj中添加一个name属性</span></span><br><span class=\"line\">obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;孙悟空&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向obj中添加一个gender属性</span></span><br><span class=\"line\">obj.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向obj中添加一个age属性</span></span><br><span class=\"line\">obj.<span class=\"property\">age</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取对象中的属性，并打印出来</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">gender</span>); <span class=\"comment\">// 打印结果：男</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">color</span>); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方式 2</strong>：可以使用<code>[]</code>这种形式去操作属性</p>\n<p>如果属性名的命名规范没有遵循标识符的命名规范，就不能采用<code>.</code>的方式来操作对象的属性，则必须用方括号的形式来访问。比如说，<code>123</code>这种属性名，如果我们直接写成<code>obj.123 = 789</code>来操作属性，是会报错的。那怎么办呢？办法如下：</p>\n<p>语法格式如下：（读取时，也是采用这种方式）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意，括号里的属性名，必须要加引号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取属性</span></span><br><span class=\"line\">对象[<span class=\"string\">&#x27;属性名&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置属性值</span></span><br><span class=\"line\">对象[<span class=\"string\">&#x27;属性名&#x27;</span>] = 属性值;</span><br></pre></td></tr></table></figure>\n\n<p>上面这种语法格式，举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[<span class=\"string\">&#x27;123&#x27;</span>] = <span class=\"number\">789</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当然，如果属性名遵循了标识符的命名规范，也可以使用方括号操作属性。</p>\n<p><strong>重要</strong>：使用<code>[]</code>这种形式去操作属性会更灵活，因为我们可以在<code>[]</code>中传递一个<strong>变量</strong>。也就是说，如果属性名以变量的形式存储，请记得也必须使用方括号的形式操作属性。这在日常开发中，使用得非常多。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myKey = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 错误的访问方式</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">myKey</span>); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 正确的访问方式</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[myKey]); <span class=\"comment\">// 千古壹号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改对象的属性值\"><a href=\"#修改对象的属性值\" class=\"headerlink\" title=\"修改对象的属性值\"></a>修改对象的属性值</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象.属性名 = 新值;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;qiangu yihao&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除对象的属性\"><a href=\"#删除对象的属性\" class=\"headerlink\" title=\"删除对象的属性\"></a>删除对象的属性</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">name</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"in-运算符\"><a href=\"#in-运算符\" class=\"headerlink\" title=\"in 运算符\"></a>in 运算符</h3><p>通过该运算符可以检查一个对象中是否含有指定的属性。如果有则返回 true，没有则返回 false。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;属性名&#x27;</span> <span class=\"keyword\">in</span> 对象;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检查对象 obj 中是否含有name属性</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> obj);</span><br></pre></td></tr></table></figure>\n\n<p>我们平时使用的对象不一定是自己创建的，可能是从接口获取的，这个时候，in 运算符可以派上用场。</p>\n<p>当然，还有一种写法可以达到上述目的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj.<span class=\"property\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果对象 obj 中有name属性，我就继续做某某事情。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"for-of：遍历数组\"><a href=\"#for-of：遍历数组\" class=\"headerlink\" title=\"for of：遍历数组\"></a>for of：遍历数组</h2><p>ES6 中，如果我们要遍历一个数组，可以这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arr1) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">6</span><br><span class=\"line\">8</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n\n<p>for … of 的循环可以避免我们开拓内存空间，增加代码运行效率，所以建议大家在以后的工作中使用 for…of 遍历数组。</p>\n<p>注意，上面的数组中，<code>for ... of</code>获取的是数组里的值；如果采用<code>for ... in</code>遍历数组，则获取的是 index 索引值。</p>\n<h3 id=\"Map-对象的遍历\"><a href=\"#Map-对象的遍历\" class=\"headerlink\" title=\"Map 对象的遍历\"></a>Map 对象的遍历</h3><p><code>for ... of</code>既可以遍历数组，也可以遍历 Map 对象。</p>\n<h2 id=\"for-in：遍历对象的属性\"><a href=\"#for-in：遍历对象的属性\" class=\"headerlink\" title=\"for in：遍历对象的属性\"></a>for in：遍历对象的属性</h2><blockquote>\n<p><code>for ... in</code>主要用于遍历对象，不建议用来遍历数组。</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> 变量 <span class=\"keyword\">in</span> 对象) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释：对象中有几个属性，循环体就会执行几次。每次执行时，会将对象中的<strong>每个属性的 属性名 赋值给变量</strong>。</p>\n<p>语法举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key); <span class=\"comment\">// 这里的 key 是：对象属性的键（也就是属性名）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[key]); <span class=\"comment\">// 这里的 obj[key] 是：对象属性的值（也就是属性值）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> obj = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">address</span>: <span class=\"string\">&#x27;shenzhen&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 遍历对象中的属性</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;属性名:&#x27;</span> + key);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;属性值:&#x27;</span> + obj[key]); <span class=\"comment\">// 注意，因为这里的属性名 key 是变量，所以，如果想获取属性值，不能写成 obj.key，而是要写成 obj[key]</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性名:name</span><br><span class=\"line\">属性值:qianguyihao</span><br><span class=\"line\"></span><br><span class=\"line\">属性名:age</span><br><span class=\"line\">属性值:26</span><br><span class=\"line\"></span><br><span class=\"line\">属性名:gender</span><br><span class=\"line\">属性值:男</span><br><span class=\"line\"></span><br><span class=\"line\">属性名:address</span><br><span class=\"line\">属性值:shenzhen</span><br><span class=\"line\"></span><br><span class=\"line\">属性名:sayHi</span><br><span class=\"line\">属性值:function() &#123;</span><br><span class=\"line\">                    console.log(this.name);</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-in-遍历数组（不建议）\"><a href=\"#for-in-遍历数组（不建议）\" class=\"headerlink\" title=\"for in 遍历数组（不建议）\"></a>for in 遍历数组（不建议）</h3><p>另外，for in 当然也可以用来遍历数组（只是不建议），此时的 key 是数组的索引。举例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;hello1&#x27;</span>, <span class=\"string\">&#x27;hello2&#x27;</span>, <span class=\"string\">&#x27;hello3&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;属性名：&#x27;</span> + key);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;属性值：&#x27;</span> + arr[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性名：0</span><br><span class=\"line\">属性值：hello1</span><br><span class=\"line\"></span><br><span class=\"line\">属性名：1</span><br><span class=\"line\">属性值：hello2</span><br><span class=\"line\"></span><br><span class=\"line\">属性名：2</span><br><span class=\"line\">属性值：hello3</span><br></pre></td></tr></table></figure>\n\n","text":"对象的基本操作创建对象使用 new 关键字调用的函数，是构造函数 constructor。构造函数是专门用来创建对象的函数。例如：1<br>const obj = new Object();<br>记住，使用typeof检查一个对象时，会返回object。关于创建对象的更多方式，","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"28-对象的创建与构造函数","slug":"JavaScript/28-对象的创建&构造函数","date":"2023-02-16T07:30:25.446Z","updated":"2023-02-16T07:51:07.114Z","comments":true,"path":"api/articles/JavaScript/28-对象的创建&构造函数.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180125_1350.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<blockquote>\n<p>在看本文之前，可以先复习前面的一篇文章：《04-JavaScript 基础&#x2F;11-对象简介.md》</p>\n</blockquote>\n<h2 id=\"创建自定义对象的几种方法\"><a href=\"#创建自定义对象的几种方法\" class=\"headerlink\" title=\"创建自定义对象的几种方法\"></a>创建自定义对象的几种方法</h2><h3 id=\"方式一：对象字面量\"><a href=\"#方式一：对象字面量\" class=\"headerlink\" title=\"方式一：对象字面量\"></a>方式一：对象字面量</h3><p><strong>对象的字面量</strong>就是一个{}。里面的属性和方法均是<strong>键值对</strong>：</p>\n<ul>\n<li><p>键：相当于属性名。</p>\n</li>\n<li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）。</p>\n</li>\n</ul>\n<p>使用对象字面量来创建一个对象，非常简洁，举例如下：：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用对象字面量，可以在创建对象时，直接指定对象中的属性。语法：{属性名:属性值,属性名:属性值….}</p>\n<p>例 1：（一个简单的对象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>例 2：（一个较复杂的对象）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;千古壹号&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">    <span class=\"attr\">isBoy</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 还可以存放一个嵌套的对象</span></span><br><span class=\"line\">    <span class=\"attr\">test</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">tel</span>: <span class=\"number\">180</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//我们还可以在对象中增加一个方法。以后可以通过obj2.sayName()的方式调用这个方法</span></span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj2));</span><br><span class=\"line\">obj2.<span class=\"title function_\">sayName</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对象字面量的属性名可以加引号也可以不加，建议不加。如果要使用一些特殊的名字，则必须加引号。</p>\n<p>属性名和属性值是一组一组的键值对结构，键和值之间使用<code>:</code>连接，多个值对之间使用<code>,</code>隔开。</p>\n<h3 id=\"方式二：工厂模式-new-Object\"><a href=\"#方式二：工厂模式-new-Object\" class=\"headerlink\" title=\"方式二：工厂模式 new Object()\"></a>方式二：工厂模式 new Object()</h3><p>通过该方法可以大批量的创建对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用工厂方法创建对象</span></span><br><span class=\"line\"><span class=\"comment\"> *  通过该方法可以大批量的创建对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name, age, gender</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个新的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    <span class=\"comment\">//向对象中添加属性</span></span><br><span class=\"line\">    obj.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    obj.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    obj.<span class=\"property\">gender</span> = gender;</span><br><span class=\"line\">    obj.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//将新的对象返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;猪八戒&#x27;</span>, <span class=\"number\">28</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;白骨精&#x27;</span>, <span class=\"number\">16</span>, <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;蜘蛛精&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;女&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第一次看到这种工厂模式时，你可能会觉得陌生。如果简化一下，可以写成下面这种形式，更容易理解：（也就是，利用 new Object 创建对象）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Obejct</span>();</span><br><span class=\"line\">obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;猪八戒&#x27;</span>;</span><br><span class=\"line\">obj.<span class=\"property\">age</span> = <span class=\"number\">28</span>;</span><br><span class=\"line\">obj.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\">obj.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>弊端：</strong></p>\n<p>使用工厂方法创建的对象，使用的构造函数都是 Object。<strong>所以创建的对象都是 Object 这个类型，就导致我们无法区分出多种不同类型的对象</strong>。</p>\n<h3 id=\"方式三：利用构造函数\"><a href=\"#方式三：利用构造函数\" class=\"headerlink\" title=\"方式三：利用构造函数\"></a>方式三：利用构造函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用构造函数自定义对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;smyh&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu1);</span><br><span class=\"line\">stu1.<span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;vae&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu2);</span><br><span class=\"line\">stu2.<span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name; <span class=\"comment\">//this指的是当前对象实例【重要】</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27;厉害了&#x27;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180125_1350.png\"></p>\n<p>接下来，我们专门来讲一下构造函数。</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><h3 id=\"代码引入\"><a href=\"#代码引入\" class=\"headerlink\" title=\"代码引入\"></a>代码引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个构造函数，专门用来创建Person对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age, gender</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">gender</span> = gender;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> per = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;孙悟空&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> per2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;玉兔精&#x27;</span>, <span class=\"number\">16</span>, <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> per3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;奔波霸&#x27;</span>, <span class=\"number\">38</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个构造函数，专门用来创建 Dog 对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dog</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数的概念\"><a href=\"#构造函数的概念\" class=\"headerlink\" title=\"构造函数的概念\"></a>构造函数的概念</h3><p><strong>构造函数</strong>：是一种特殊的函数，主要用来创建和初始化对象，也就是为对象的成员变量赋初始值。它与 <code>new</code> 一起使用才有意义。</p>\n<p>我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个构造函数里面。</p>\n<h3 id=\"构造函数和普通函数的区别\"><a href=\"#构造函数和普通函数的区别\" class=\"headerlink\" title=\"构造函数和普通函数的区别\"></a>构造函数和普通函数的区别</h3><p>构造函数的创建方式和普通函数没有区别，不同的是构造函数习惯上首字母大写。</p>\n<p>构造函数和普通函数的区别就是<strong>调用方式</strong>的不同：普通函数是直接调用，而构造函数需要使用 new 关键字来调用。</p>\n<p><strong>this 的指向也有所不同</strong>：</p>\n<ul>\n<li><p>1.以函数的形式调用时，this 永远都是 window。比如<code>fun();</code>相当于<code>window.fun();</code></p>\n</li>\n<li><p>2.以方法的形式调用时，this 是调用方法的那个对象</p>\n</li>\n<li><p>3.以构造函数的形式调用时，this 是新创建的实例对象</p>\n</li>\n</ul>\n<h3 id=\"new-一个构造函数的执行流程\"><a href=\"#new-一个构造函数的执行流程\" class=\"headerlink\" title=\"new 一个构造函数的执行流程\"></a>new 一个构造函数的执行流程</h3><p>new 在执行时，会做下面这四件事：</p>\n<p>（1）开辟内存空间，在内存中创建一个新的空对象。</p>\n<p>（2）让 this 指向这个新的对象。</p>\n<p>（3）执行构造函数里面的代码，给这个新对象添加属性和方法。</p>\n<p>（4）返回这个新对象（所以构造函数里面不需要 return）。</p>\n<p>因为 this 指的是 new 一个 Object 之后的对象实例。于是，下面这段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStudent</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    student.<span class=\"property\">name</span> = name; <span class=\"comment\">//第一个name指的是student对象定义的变量。第二个name指的是createStudent函数的参数。二者不一样</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以改进为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name; <span class=\"comment\">//this指的是构造函数中的对象实例</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意上方代码中的注释。</p>\n<h3 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h3><p>JavaScript 的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的 this 上添加。通过这两种方式添加的成员，就分别称为静态成员和实例成员。</p>\n<ul>\n<li><p>静态成员：在构造函数本上添加的成员称为静态成员，只能由构造函数本身来访问。</p>\n</li>\n<li><p>实例成员：在构造函数内部创建的对象成员称为实例成员，只能由实例化的对象来访问。</p>\n</li>\n</ul>\n<h3 id=\"类、实例\"><a href=\"#类、实例\" class=\"headerlink\" title=\"类、实例\"></a>类、实例</h3><p>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个<strong>类</strong>。</p>\n<p>通过一个构造函数创建的对象，称为该类的<strong>实例</strong>。</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>使用 instanceof 可以检查<strong>一个对象是否为一个类的实例</strong>。</p>\n<p><strong>语法如下</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象 <span class=\"keyword\">instanceof</span> 构造函数;</span><br></pre></td></tr></table></figure>\n\n<p>如果是，则返回 true；否则返回 false。</p>\n<p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dog</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>); <span class=\"comment\">// 打印结果： true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dog1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dog1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// 所有的对象都是Object的后代。因此，打印结果为：true</span></span><br></pre></td></tr></table></figure>\n\n<p>根据上方代码中的最后一行，需要补充一点：<strong>所有的对象都是 Object 的后代，因此 <code>任何对象 instanceof Object</code> 的返回结果都是 true</strong>。</p>\n<h2 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h2><h3 id=\"json-的介绍\"><a href=\"#json-的介绍\" class=\"headerlink\" title=\"json 的介绍\"></a>json 的介绍</h3><blockquote>\n<p>对象字面量和 json 比较像，这里我们对 json 做一个简单介绍。</p>\n</blockquote>\n<p>JSON：JavaScript Object Notation（JavaScript 对象表示形式）。</p>\n<p>JSON 和对象字面量的区别：JSON 的属性必须用双引号引号引起来，对象字面量可以省略。</p>\n<p>json 举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;name&quot; : &quot;zs&quot;,</span><br><span class=\"line\">      &quot;age&quot; : 18,</span><br><span class=\"line\">      &quot;sex&quot; : true,</span><br><span class=\"line\">      &quot;sayHi&quot; : function() &#123;</span><br><span class=\"line\">          console.log(this.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注：json 里一般放常量、数组、对象等，但很少放 function。</p>\n<p>另外，对象和 json 没有长度，json.length 的打印结果是 undefined。于是乎，自然也就不能用 for 循环遍历（因为遍历时需要获取长度 length）。</p>\n<p><strong>json 遍历的方法：</strong></p>\n<p>json 采用 <code>for...in...</code>进行遍历，和数组的遍历方式不同。如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> myJson = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;helloworld&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&quot;aaa&quot;</span>: <span class=\"number\">111</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&quot;bbb&quot;</span>: <span class=\"number\">222</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//json遍历的方法：for...in...</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> myJson) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key); <span class=\"comment\">//获取 键</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myJson[key]); <span class=\"comment\">//获取 值（第二种属性绑定和获取值的方法）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;------&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180203_1518.png\"></p>\n","text":"在看本文之前，可以先复习前面的一篇文章：《04-JavaScript 基础&#x2F;11-对象简介.md》创建自定义对象的几种方法方式一：对象字面量对象的字面量就是一个{}。里面的属性和方法均是键值对：键：相当于属性名。值：相当于属性值，可以是任意类型的值（数字类型、字符串类型","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"27-面向对象简介","slug":"JavaScript/27-面向对象简介","date":"2023-02-16T07:30:25.444Z","updated":"2023-02-16T07:50:33.832Z","comments":true,"path":"api/articles/JavaScript/27-面向对象简介.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"面向过程和面向对象\"><a href=\"#面向过程和面向对象\" class=\"headerlink\" title=\"面向过程和面向对象\"></a>面向过程和面向对象</h2><h3 id=\"面向过程\"><a href=\"#面向过程\" class=\"headerlink\" title=\"面向过程\"></a>面向过程</h3><p><strong>面向过程</strong>：先分析好的具体步骤，然后按照步骤，一步步解决问题。</p>\n<p>优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</p>\n<p>缺点：没有面向对象易维护、易复用、易扩展。</p>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p><strong>面向对象</strong>（OOP，Object Oriented Programming）：以对象功能来划分问题，而不是步骤。</p>\n<p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护。</p>\n<p>缺点：性能比面向过程低。</p>\n<h3 id=\"面向对象的编程思想\"><a href=\"#面向对象的编程思想\" class=\"headerlink\" title=\"面向对象的编程思想\"></a>面向对象的编程思想</h3><p>面向对象的编程思想：对代码和数据进行封装，并以对象调用的方式，对外提供统一的调用接口。</p>\n<p>比如说，当我们在开车的时候，无需关心汽车的内部构造有多复杂，对于大多数人而言，只需要会开、知道汽车有哪些功能就行了。</p>\n<h3 id=\"面向对象的特性\"><a href=\"#面向对象的特性\" class=\"headerlink\" title=\"面向对象的特性\"></a>面向对象的特性</h3><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。面向对象编程具有灵活、代码可复用、容易维护和开发的优点，适合多人合作的大型软件项目，更符合我们认识事物的规律。</p>\n<p>面向对象的特性如下：</p>\n<ul>\n<li><p>封装性</p>\n</li>\n<li><p>继承性</p>\n</li>\n<li><p>多态性</p>\n</li>\n</ul>\n<h3 id=\"JS-中的面向对象\"><a href=\"#JS-中的面向对象\" class=\"headerlink\" title=\"JS 中的面向对象\"></a>JS 中的面向对象</h3><p>JS 中的面向对象，是基于<strong>原型</strong>的面向对象。JS 中的对象（Object）是依靠构造器（constructor）和原型（prototype）构造出来的。</p>\n<p>另外，在ES6中，新引入了 类（Class）和继承（Extends）来实现面向对象。</p>\n","text":"面向过程和面向对象面向过程面向过程：先分析好的具体步骤，然后按照步骤，一步步解决问题。优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。缺点：没有面向对象易维护、易复用、易扩展。面向对象面向对象（OOP，Object Oriented Progr","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"26-闭包","slug":"JavaScript/26-闭包","date":"2023-02-16T07:30:25.442Z","updated":"2023-02-16T07:50:21.378Z","comments":true,"path":"api/articles/JavaScript/26-闭包.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20200703_2055.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"闭包的引入\"><a href=\"#闭包的引入\" class=\"headerlink\" title=\"闭包的引入\"></a>闭包的引入</h2><p>我们知道，变量根据作用域的不同分为两种：全局变量和局部变量。</p>\n<ul>\n<li><p>函数内部可以访问全局变量和局部变量。</p>\n</li>\n<li><p>函数外部只能访问全局变量，不能访问局部变量。</p>\n</li>\n<li><p>当函数执行完毕，本作用域内的局部变量会销毁。</p>\n</li>\n</ul>\n<p>比如下面这样的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印报错：Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，由于变量 <code>a</code> 是函数内的局部变量，所以外部无法访问。</p>\n<p>但是，在有些场景下，我们就是想要在函数外部访问<strong>函数内部作用域的局部变量</strong>，那要怎么办呢？这就引入了闭包的概念。</p>\n<h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><h3 id=\"闭包（closure）的概念\"><a href=\"#闭包（closure）的概念\" class=\"headerlink\" title=\"闭包（closure）的概念\"></a>闭包（closure）的概念</h3><p><strong>闭包</strong>：如果<strong>外部作用域</strong>有权访问另外一个<strong>函数内部</strong>的<strong>局部变量</strong>时，那就产生了闭包。这个内部函数称之为闭包函数。注意，这里强调的是访问<strong>局部变量</strong>。</p>\n<p>闭包代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fun2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"comment\">// 调用外部函数，就能得到内部函数，并用 变量 result 接收</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"comment\">// 在 fun1函数的外部，执行了内部函数 fun2，并访问到了 fun2的内部变量a</span></span><br><span class=\"line\"><span class=\"title function_\">result</span>(); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，外部作用域（即全局作用域） 访问了函数 fun1 中的局部变量，那么，在 fun1 中就产生了闭包，函数 fun1是闭包函数。</p>\n<p>全局作用域中，并没有定义变量a。正常情况下作为函数内的局部变量 a，无法被外部访问到。但是通过闭包，我们最后还是可以在全局作用域中拿到局部变量 a 的值。</p>\n<p>注意，闭包函数是fun1，不是fun2。fun2在这里的作用是让全局作用域访问到变量a，fun2只是一个桥梁。</p>\n<h3 id=\"闭包的生命周期\"><a href=\"#闭包的生命周期\" class=\"headerlink\" title=\"闭包的生命周期\"></a>闭包的生命周期</h3><ol>\n<li><p>产生：内部函数fn1被声明时（即被创建时，不是被调用时）就产生了。</p>\n</li>\n<li><p>死亡：嵌套的内部函数成为垃圾对象时。（比如fun1 &#x3D; null，就可以让 fun1 成为垃圾对象）</p>\n</li>\n</ol>\n<h3 id=\"在-chrome-浏览器控制台中，调试闭包\"><a href=\"#在-chrome-浏览器控制台中，调试闭包\" class=\"headerlink\" title=\"在 chrome 浏览器控制台中，调试闭包\"></a>在 chrome 浏览器控制台中，调试闭包</h3><p>上面的代码中，要怎么验证，确实产生了闭包呢？我们可以在 chrome 浏览器的控制台中设置断点，当代码执行到 <code>console.log(a)</code>这一行的时候，如下图所示：</p>\n<p><img src=\"http://img.smyhvae.com/20200703_2055.png\"></p>\n<p>上图中， Local 指的是局部作用域，Global 指的是全局作用域；而 Closure 则是<strong>闭包</strong>，fn1 是一个闭包函数。</p>\n<h2 id=\"闭包的表现形式\"><a href=\"#闭包的表现形式\" class=\"headerlink\" title=\"闭包的表现形式\"></a>闭包的表现形式</h2><h3 id=\"形式1：将一个函数作为另一个函数的返回值\"><a href=\"#形式1：将一个函数作为另一个函数的返回值\" class=\"headerlink\" title=\"形式1：将一个函数作为另一个函数的返回值\"></a>形式1：将一个函数作为另一个函数的返回值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fn1</span>();   <span class=\"comment\">//执行外部函数fn1，返回的是内部函数fn2</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// 3       //执行fn2</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// 4       //再次执行fn2</span></span><br></pre></td></tr></table></figure>\n\n\n<p>当f()第二次执行的时候，a加1了，也就说明了：闭包里的数据没有消失，而是保存在了内存中。如果没有闭包，代码执行完倒数第三行后，变量a就消失了。</p>\n<p>上面的代码中，虽然调用了内部函数两次，但是，闭包对象只创建了一个。</p>\n<p>也就是说，要看闭包对象创建了几个，就看：<strong>外部函数执行了几次</strong>（与内部函数执行几次无关）。</p>\n<h3 id=\"形式2：将函数作为实参传递给另一个函数调用\"><a href=\"#形式2：将函数作为实参传递给另一个函数调用\" class=\"headerlink\" title=\"形式2：将函数作为实参传递给另一个函数调用\"></a>形式2：将函数作为实参传递给另一个函数调用</h3><p>在定时器、事件监听、Ajax 请求、Web Workers 或者任何异步中，只要使用了回调函数，实际上就是在使用闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showDelay</span>(<span class=\"params\">msg, time</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;  <span class=\"comment\">//这个function是闭包，因为是嵌套的子函数，而且引用了外部函数的变量msg</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(msg)</span><br><span class=\"line\">  &#125;, time)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">showDelay</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，闭包是里面的function，因为它是嵌套的子函数，而且引用了外部函数的变量msg。</p>\n<h2 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h2><ul>\n<li><p>作用1：延长局部变量的生命周期。</p>\n</li>\n<li><p>作用2：让函数外部可以操作（读写）函数内部的数据（变量&#x2F;函数）。</p>\n</li>\n</ul>\n<p>代码演示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">fun2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fun2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title function_\">fun1</span>();   <span class=\"comment\">//执行外部函数fn1，返回的是内部函数fn2</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>() <span class=\"comment\">// 3       //执行fun2</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>() <span class=\"comment\">// 4       //再次执行fun2</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，foo 代表的就是整个 fun2 函数。当执行了 <code>foo()</code> 语句之后，也就执行了fun2()函数，fun1() 函数内就产生了闭包。</p>\n<p><strong>作用1分析</strong>：</p>\n<p>一般来说，在 fn1() 函数执行完毕后，它里面的变量 a 会立即销毁。但此时由于产生了闭包，所以 <strong>fun1 函数中的变量 a 不会立即销毁，仍然保留在内存中，因为 fn2 函数还要继续调用变量 a</strong>。只有等所有函数把变量 a 调用完了，变量 a 才会销毁。</p>\n<p><strong>作用2分析：</strong></p>\n<p>在执行 <code>foo()</code>语句之后，竟然能够打印出 <code>3</code>，这就完美通过闭包实现了：全局作用域成功访问到了局部作用域中的变量 a。</p>\n<p>达到的效果是：<strong>外界看不到变量a，但可以操作a</strong>。当然，如果你真想看到a，可以在fun2中将a返回即可。</p>\n<h2 id=\"闭包的应用场景\"><a href=\"#闭包的应用场景\" class=\"headerlink\" title=\"闭包的应用场景\"></a>闭包的应用场景</h2><h3 id=\"场景1：高阶函数\"><a href=\"#场景1：高阶函数\" class=\"headerlink\" title=\"场景1：高阶函数\"></a>场景1：高阶函数</h3><p>题目：不同的班级有不同成绩检测标准。比如：A班的合格线是60分，B 班的合格线是70分。已知某个人班级和分数，请用闭包函数判断他的成绩是否合格。</p>\n<p>思路：创建成绩检测函数 checkStandard(n)，检查成绩 n 是否合格，函数返回布尔值。</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 高阶函数：判断学生的分数是否合格。形参 standardTemp 为标准线</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createCheckTemp</span>(<span class=\"params\">standardTemp</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 形参 n 表示具体学生的分数</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">checkTemp</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt;= standardTemp) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;成绩合格&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;成绩不合格&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> checkTemp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 checkStandard_A 函数，它以60分为合格线</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkStandard_A = <span class=\"title function_\">createCheckTemp</span>(<span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"comment\">// 再创建一个 checkStandard_B 函数，它以70分为合格线</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> checkStandard_B = <span class=\"title function_\">createCheckTemp</span>(<span class=\"number\">70</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"title function_\">checkStandard_A</span>(<span class=\"number\">65</span>); <span class=\"comment\">// 成绩合格</span></span><br><span class=\"line\"><span class=\"title function_\">checkStandard_B</span>(<span class=\"number\">65</span>); <span class=\"comment\">// 成绩不合格</span></span><br></pre></td></tr></table></figure>\n\n<p>对于A班来说，它的闭包函数是createCheckTemp()，闭包范围是 checkTemp()函数和参数<code>standardTemp = 60</code>。对于B班来说，它的闭包函数是全新的createCheckTemp()，闭包范围是全新的checkTemp()函数和全新的参数<code>standardTemp = 70</code>。</p>\n<p>因为有闭包存在，所以，并不会因为 createCheckTemp() 执行完毕后就销毁 standardTemp 的值；且A班和B班的standardTemp参数不会混淆。</p>\n<p>备注：关于“高阶函数”的更多解释，我们在以后的内容中讲解。</p>\n<h3 id=\"场景2：封装JS模块\"><a href=\"#场景2：封装JS模块\" class=\"headerlink\" title=\"场景2：封装JS模块\"></a>场景2：封装JS模块</h3><p>闭包的第二个使用场景是：定义具有特定功能的JS模块，将所有的数据和功能都封装在一个函数内部，只向外暴露指定的对象或方法。模块的调用者，只能调用模块暴露的对象或方法来实现对应的功能。</p>\n<p>比如有这样一个需求：定义一个私有变量a，要求a只能被进行指定操作（加减），不能进行其他操作（乘除）。在  Java、C++ 等语言中，有私有属性的概念，但在JS中只能通过闭包模拟。</p>\n<p>我们来看看下面的代码，如何通过闭包封装JS模块。</p>\n<p>写法1：</p>\n<p>（1）myModule.js：（定义一个模块，向外暴露多个方法，供外界调用）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myModule</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = <span class=\"string\">&#x27;Qinguyihao Haha&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//操作私有数据的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doSomething() &#x27;</span> + msg.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">//字符串大写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doOtherthing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doOtherthing() &#x27;</span> + msg.<span class=\"title function_\">toLowerCase</span>()) <span class=\"comment\">//字符串小写</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过【对象字面量】的形式进行包裹，向外暴露多个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">doSomething1</span>: doSomething,</span><br><span class=\"line\">        <span class=\"attr\">doOtherthing2</span>: doOtherthing</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，外界只能通过doSomething1和doOtherthing2来操作里面的数据，但不让外界看到里面的具体实现。</p>\n<p>（2）index.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>闭包的应用-自定义JS模块<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">闭包应用举例: 定义JS模块</span></span><br><span class=\"line\"><span class=\"comment\">  * 具有特定功能的js文件</span></span><br><span class=\"line\"><span class=\"comment\">  * 将所有的数据和功能都封装在一个函数内部(私有的)</span></span><br><span class=\"line\"><span class=\"comment\">  * 【重要】只向外暴露一个包含n个方法的对象或方法</span></span><br><span class=\"line\"><span class=\"comment\">  * 模块的使用者, 只需要调用模块暴露的对象或者方法来实现对应的功能</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;myModule.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = <span class=\"title function_\">myModule</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">module</span>.<span class=\"title function_\">doSomething1</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">module</span>.<span class=\"title function_\">doOtherthing2</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>写法2：</p>\n<p>同样是实现上面的功能，我们还采取另外一种写法，写起来更方便。如下：</p>\n<p>（1）myModule2.js：（是一个立即执行的匿名函数）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = <span class=\"string\">&#x27;Qinguyihao Haha&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//操作私有数据的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doSomething() &#x27;</span> + msg.<span class=\"title function_\">toUpperCase</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doOtherthing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;doOtherthing() &#x27;</span> + msg.<span class=\"title function_\">toLowerCase</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//外部函数是即使运行的匿名函数，我们可以把两个方法直接传给window对象</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">myModule</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">doSomething1</span>: doSomething,</span><br><span class=\"line\">        <span class=\"attr\">doOtherthing2</span>: doOtherthing</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n\n<p>（2）index.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>闭包的应用-自定义JS模块<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">闭包的应用2 : 定义JS模块</span></span><br><span class=\"line\"><span class=\"comment\">  * 具有特定功能的js文件</span></span><br><span class=\"line\"><span class=\"comment\">  * 将所有的数据和功能都封装在一个函数内部(私有的)</span></span><br><span class=\"line\"><span class=\"comment\">  * 只向外暴露一个包信n个方法的对象或函数</span></span><br><span class=\"line\"><span class=\"comment\">  * 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入myModule文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;myModule2.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\">    myModule.doSomething1()</span><br><span class=\"line\">    myModule.doOtherthing2()</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上方两个文件中，我们在<code>myModule2.js</code>里直接把两个方法直接传递给window对象了。于是，在index.html中引入这个js文件后，会立即执行里面的匿名函数。在index.html中把myModule直接拿来用即可。</p>\n<p><strong>小结：</strong></p>\n<p>写法1和写法2都采用了闭包。</p>\n<h2 id=\"内存溢出和内存泄露\"><a href=\"#内存溢出和内存泄露\" class=\"headerlink\" title=\"内存溢出和内存泄露\"></a>内存溢出和内存泄露</h2><blockquote>\n<p>我们再讲两个概念，这两个概念和闭包有些联系。</p>\n</blockquote>\n<h3 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h3><p><strong>内存泄漏</strong>：<strong>占用的内存</strong>没有及时释放。</p>\n<p>内存泄露的次数积累多了，就容易导致内存溢出。</p>\n<p><strong>常见的内存泄露</strong>：</p>\n<p>1、意外的全局变量</p>\n<p>2、没有及时清理的计时器或回调函数</p>\n<p>3、闭包</p>\n<p>情况1举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 意外的全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  a = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10000000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>情况2举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有及时清理的计时器或回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intervalId = <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">//启动循环定时器后不清理</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;----&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// clearInterval(intervalId);  //清理定时器</span></span><br></pre></td></tr></table></figure>\n\n<p>情况3举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(++a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fn1</span>()</span><br><span class=\"line\"><span class=\"title function_\">f</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f = null //让内部函数成为垃圾对象--&gt;回收闭包</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存溢出\"><a href=\"#内存溢出\" class=\"headerlink\" title=\"内存溢出\"></a>内存溢出</h3><p><strong>内存溢出</strong>：程序运行时出现的错误。当程序运行<strong>需要的内存</strong>超过<strong>剩余的内存</strong>时，就抛出内存溢出的错误。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">obj[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10000000</span>);  <span class=\"comment\">//把所有的数组内容都放到obj里保存，导致obj占用了很大的内存空间</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包是否会造成内存泄漏\"><a href=\"#闭包是否会造成内存泄漏\" class=\"headerlink\" title=\"闭包是否会造成内存泄漏\"></a>闭包是否会造成内存泄漏</h3><p>一般来说，答案是否定的。因为内存泄漏是非预期情况，本来想回收，但实际没回收；而闭包是预期情况，一般不会造成内存泄漏。</p>\n<p>但如果因代码质量不高，滥用闭包，也会造成内存泄漏。</p>\n<h2 id=\"闭包面试题\"><a href=\"#闭包面试题\" class=\"headerlink\" title=\"闭包面试题\"></a>闭包面试题</h2><p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    count = count + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fun1 = <span class=\"title function_\">addCount</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> fun2 = <span class=\"title function_\">addCount</span>();</span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"title function_\">fun2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"title function_\">fun2</span>();</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p>代码解释：</p>\n<p>（1）fun1 和 fun2 这两个闭包函数是互不影响的，因此第一次调用时，count变量都是0，最终各自都输出1。</p>\n<p>（2）第二次调用时，由于闭包有记忆性，所以各自会在上一次的结果上再加1，因此输出2。</p>\n","text":"闭包的引入我们知道，变量根据作用域的不同分为两种：全局变量和局部变量。函数内部可以访问全局变量和局部变量。函数外部只能访问全局变量，不能访问局部变量。当函数执行完毕，本作用域内的局部变量会销毁。比如下面这样的代码：1<br>2<br>3<br>4<br>5<br>6<br>fun","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]},{"title":"25-this指向","slug":"JavaScript/25-this指向","date":"2023-02-16T07:30:25.440Z","updated":"2023-02-16T07:50:09.741Z","comments":true,"path":"api/articles/JavaScript/25-this指向.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"执行期上下文\"><a href=\"#执行期上下文\" class=\"headerlink\" title=\"执行期上下文\"></a>执行期上下文</h2><p>当<strong>函数执行</strong>时（准确来说，是在函数发生预编译的前一刻），会创建一个执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境。</p>\n<p>每调用一次函数，就会创建一个新的上下文对象，他们之间是相互独立且独一无二的。当函数执行完毕，它所产生的执行期上下文会被销毁。</p>\n<p>参考链接：<a href=\"https://www.cnblogs.com/chenyingjie1207/p/9966036.html\">https://www.cnblogs.com/chenyingjie1207/p/9966036.html</a></p>\n<h2 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h2><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是 this，this 指向的是一个对象，这个对象我们称为函数执行的 上下文对象。</p>\n<h3 id=\"ES5-函数内-this-的指向【非常重要】\"><a href=\"#ES5-函数内-this-的指向【非常重要】\" class=\"headerlink\" title=\"ES5 函数内 this 的指向【非常重要】\"></a>ES5 函数内 this 的指向【非常重要】</h3><p>函数的调用有<strong>六种</strong>形式。</p>\n<p>在ES5语法中，根据函数的调用方式的不同，this 会指向不同的对象：</p>\n<p>1、以函数的形式（包括普通函数、定时器函数、立即执行函数）调用时，this 的指向永远都是 window。比如<code>fun();</code>相当于<code>window.fun();</code></p>\n<p>2、以方法的形式调用时，this 指向调用方法的那个对象</p>\n<p>3、以构造函数的形式调用时，this 指向实例对象</p>\n<p>4、以事件绑定函数的形式调用时，this 指向<strong>绑定事件的对象</strong></p>\n<p>5、使用 call 和 apply 调用时，this 指向指定的那个对象</p>\n<p><strong>第 1 条的举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;smyh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: fun,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vae&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: fun,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全局的name属性&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以函数形式调用，this是window</span></span><br><span class=\"line\"><span class=\"title function_\">fun</span>(); <span class=\"comment\">//可以理解成 window.fun()</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Window</span><br><span class=\"line\">全局的name属性</span><br></pre></td></tr></table></figure>\n\n<p>上面的举例可以看出，this 指向的是 window 对象，所以 this.name 指的是全局的 name。</p>\n<p><strong>第 2 条的举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;smyh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: fun,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vae&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: fun,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全局的name属性&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以方法的形式调用，this是调用方法的对象</span></span><br><span class=\"line\">obj2.<span class=\"title function_\">sayName</span>();</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object</span><br><span class=\"line\">vae</span><br></pre></td></tr></table></figure>\n\n<p>上面的举例可以看出，this 指向的是 对象 obj2 ，所以 this.name 指的是 obj2.name。</p>\n<h3 id=\"ES6-箭头函数中-this-的指向\"><a href=\"#ES6-箭头函数中-this-的指向\" class=\"headerlink\" title=\"ES6 箭头函数中 this 的指向\"></a>ES6 箭头函数中 this 的指向</h3><p>ES6 中的箭头函数并不使用上面的准则，而是会继承外层函数调用的 this 绑定（无论 this 绑定到什么）。</p>\n<h3 id=\"改变函数内部的-this-指向\"><a href=\"#改变函数内部的-this-指向\" class=\"headerlink\" title=\"改变函数内部的 this 指向\"></a>改变函数内部的 this 指向</h3><p>JS 专门为我们提供了一些方法来改变函数内部的 this 指向。常见的方法有 call()、apply()、bind() 方法。继续往下看。</p>\n<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h2><h3 id=\"call-方法的作用\"><a href=\"#call-方法的作用\" class=\"headerlink\" title=\"call() 方法的作用\"></a>call() 方法的作用</h3><p>call() 方法的作用：可以<strong>调用</strong>一个函数，与此同时，它还可以改变这个函数内部的 this 指向。</p>\n<p>call() 方法的另一个应用：<strong>可以实现继承</strong>。之所以能实现继承，其实是利用了上面的作用。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1.<span class=\"title function_\">call</span>(想要将<span class=\"variable language_\">this</span>指向哪里, 函数实参<span class=\"number\">1</span>, 函数实参<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>备注：第一个参数中，如果不需要改变 this 指向，则传 null。</p>\n<h3 id=\"call-方法举例\"><a href=\"#call-方法举例\" class=\"headerlink\" title=\"call() 方法举例\"></a>call() 方法举例</h3><p><strong>举例 1</strong>、通过 call() 调用函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">nickName</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nickName</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// this的指向并没有被改变，此时相当于 fn1();</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码的打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window</span><br><span class=\"line\">undefined</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码，跟普通的函数调用 <code>fn1()</code> 没有区别。</p>\n<p><strong>举例 2</strong>、通过 call() 改变 this 指向：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">nickName</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nickName</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn1.<span class=\"title function_\">call</span>(obj1, <span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 先将 this 指向 obj1，然后执行 fn1() 函数</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码的打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1</span><br><span class=\"line\">qianguyihao</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p><strong>举例 3</strong>、通过 call() 实现继承：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给 Father 增加 name 和 age 属性</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Father</span>(<span class=\"params\">myName, myAge</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = myName;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = myAge;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">myName, myAge</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 【下面这一行，重要代码】</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过这一步，将 father 里面的 this 修改为 Son 里面的 this；另外，给 Son 加上相应的参数，让 Son 自动拥有 Father 里的属性。最终实现继承</span></span><br><span class=\"line\">    <span class=\"title class_\">Father</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, myName, myAge);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(son1));</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，通过 call() 方法，让 Son 继承了 Father 里面的 name 和 age 属性。</p>\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;myName&quot;:&quot;千古壹号&quot;,&quot;myAge&quot;:28&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply-方法\"><a href=\"#apply-方法\" class=\"headerlink\" title=\"apply() 方法\"></a>apply() 方法</h2><h3 id=\"apply-方法的作用\"><a href=\"#apply-方法的作用\" class=\"headerlink\" title=\"apply() 方法的作用\"></a>apply() 方法的作用</h3><p>apply() 方法的作用：可以<strong>调用</strong>一个函数，与此同时，它还可以改变这个函数内部的 this 指向。这一点，和 call()类似。</p>\n<p>apply() 方法的应用： 由于 apply()需要传递<strong>数组</strong>，所以它有一些巧妙应用，稍后看接下来的应用举例就知道了。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1.<span class=\"title function_\">apply</span>(想要将<span class=\"variable language_\">this</span>指向哪里, [函数实参<span class=\"number\">1</span>, 函数实参<span class=\"number\">2</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>备注：第一个参数中，如果不需要改变 this 指向，则传 null。</p>\n<p>到这里可以看出， call() 和 apply() 方法的作用是相同的。唯一的区别在于，apply() 里面传入的<strong>实参，必须是数组（或者伪数组）</strong>。</p>\n<h3 id=\"apply-方法举例\"><a href=\"#apply-方法举例\" class=\"headerlink\" title=\"apply() 方法举例\"></a>apply() 方法举例</h3><p><strong>举例</strong>、通过 apply() 改变 this 指向：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">nickName</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nickName</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn1.<span class=\"title function_\">apply</span>(obj1, [<span class=\"string\">&#x27;hello&#x27;</span>]); <span class=\"comment\">// 先将 this 指向 obj1，然后执行 fn1() 函数</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，上方代码中，apply() 里面传实参时，需要以数组的形式。即便是传一个实参，也需要传数组。</p>\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1</span><br><span class=\"line\">qianguyihao</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"apply-方法的巧妙应用：求数组的最大值\"><a href=\"#apply-方法的巧妙应用：求数组的最大值\" class=\"headerlink\" title=\"apply() 方法的巧妙应用：求数组的最大值\"></a>apply() 方法的巧妙应用：求数组的最大值</h3><p>我们知道，如果想要求数组中元素的最大值，数组本身是没有自带方法的。那怎么办呢？</p>\n<p>虽然数组里没有获取最大值的方法，但是数值里有 <code>Math.max(数字1，数字2，数字3)</code> 方法，可以获取<strong>多个数值中的最大值</strong>。 另外，由于 apply() 方法在传递实参时，传的刚好是<strong>数组</strong>，所以我们可以 通过 Math.max() 和 apply() 曲线救国。</p>\n<p><strong>举例</strong>：求数组中多个元素的最大值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这一行代码的目的，无需改变 this 指向，所以：第一个参数填 null，或者填 Math，或者填 this 都可以。严格模式中，不让填null。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> maxValue = <span class=\"title class_\">Math</span>.<span class=\"property\">max</span>.<span class=\"title function_\">apply</span>(<span class=\"title class_\">Math</span>, arr1); <span class=\"comment\">// 求数组 arr1 中元素的最大值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(maxValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> minValue = <span class=\"title class_\">Math</span>.<span class=\"property\">min</span>.<span class=\"title function_\">apply</span>(<span class=\"title class_\">Math</span>, arr1); <span class=\"comment\">// 求数组 arr1 中元素的最小值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(minValue);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind-方法\"><a href=\"#bind-方法\" class=\"headerlink\" title=\"bind() 方法\"></a>bind() 方法</h2><h3 id=\"bind-方法的作用\"><a href=\"#bind-方法的作用\" class=\"headerlink\" title=\"bind() 方法的作用\"></a>bind() 方法的作用</h3><p>bind() 方法<strong>不会调用函数</strong>，但是可以改变函数内部的 this 指向。</p>\n<p>把call()、apply()、bind()这三个方法做一下对比，你会发现：实际开发中， bind() 方法使用得最为频繁。如果有些函数，我们不需要立即调用，但是又想改变这个函数内部的this指向，此时用 bind() 是最为合适的。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新函数 = fn1.<span class=\"title function_\">bind</span>(想要将<span class=\"variable language_\">this</span>指向哪里, 函数实参<span class=\"number\">1</span>, 函数实参<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<ul>\n<li><p>第一个参数：在 fn1 函数运行时，指定 fn1 函数的this 指向。如果不需要改变 this 指向，则传 null。</p>\n</li>\n<li><p>其他参数：fn1 函数的实参。</p>\n</li>\n</ul>\n<p>解释：它不会调用 fn1 函数，但会返回 由指定this 和指定实参的<strong>原函数拷贝</strong>。可以看出， bind() 方法是有返回值的。</p>\n","text":"执行期上下文当函数执行时（准确来说，是在函数发生预编译的前一刻），会创建一个执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境。每调用一次函数，就会创建一个新的上下文对象，他们之间是相互独立且独一无二的。当函数执行完毕，它所产生的执行期上下文会被销毁。参考链接：h","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":46,"path":"api/tags/JavaScript.json"}]}]}