{"total":49,"pageSize":10,"pageCount":5,"data":[{"title":"08-基本数据类型：Null 和 Undefined","slug":"JavaScript/08-基本数据类型：Null 和 Undefined","date":"2023-02-15T12:06:59.451Z","updated":"2023-02-15T12:18:51.775Z","comments":true,"path":"api/articles/JavaScript/08-基本数据类型：Null 和 Undefined.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<p>很多其他的语言中，只有 null；但 JS 语言中，既有 null，又有 undefined。</p>\n<h2 id=\"Null：空对象\"><a href=\"#Null：空对象\" class=\"headerlink\" title=\"Null：空对象\"></a>Null：空对象</h2><p>null 专门用来定义一个<strong>空对象</strong>。例如：<code>let a = null</code>，又例如 <code>Object.create(null)</code>.</p>\n<p>如果你想定义一个变量用来保存引用类型，但是还没想好放什么内容，这个时候，可以在初始化时将其设置为 null。你可以把 null 理解为：<strong>null 虽然是一个单独的数据类型，但null 相当于是一个 object，只不过地址为空（空指针）而已</strong>。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myObj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">cosole.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> myObj); <span class=\"comment\">// 打印结果：object</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：</p>\n<ul>\n<li><p>Null 类型的值只有一个，就是 null。比如 <code>let a = null</code>。</p>\n</li>\n<li><p>从语义上讲，null表示一个空对象，所以使用 typeof 检查一个 null 值时，会返回 object。</p>\n</li>\n</ul>\n<h2 id=\"undefined：未定义类型\"><a href=\"#undefined：未定义类型\" class=\"headerlink\" title=\"undefined：未定义类型\"></a>undefined：未定义类型</h2><h3 id=\"case1：变量已声明，未赋值时\"><a href=\"#case1：变量已声明，未赋值时\" class=\"headerlink\" title=\"case1：变量已声明，未赋值时\"></a>case1：变量已声明，未赋值时</h3><p><strong>声明</strong>了一个变量，但没有<strong>赋值</strong>，此时它的值就是 <code>undefined</code>。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 打印结果：undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> name); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：</p>\n<ul>\n<li><p>Undefined 类型的值只有一个，就是 undefind。比如 <code>let a = undefined</code>。</p>\n</li>\n<li><p>使用 typeof 检查一个 undefined 值时，会返回 undefined。</p>\n</li>\n</ul>\n<h3 id=\"case2：变量未声明（未定义）时\"><a href=\"#case2：变量未声明（未定义）时\" class=\"headerlink\" title=\"case2：变量未声明（未定义）时\"></a>case2：变量未声明（未定义）时</h3><p>如果你从未声明一个变量，就去使用它，则会报错（这个大家都知道）；此时，如果用 <code>typeof</code> 检查这个变量时，会返回 <code>undefined</code>。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"case3：函数无返回值时\"><a href=\"#case3：函数无返回值时\" class=\"headerlink\" title=\"case3：函数无返回值时\"></a>case3：函数无返回值时</h3><p>如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。</p>\n<p>或者，也可以这样理解：在定义一个函数时，如果末尾没有 return 语句，那么，其实就是 <code>return undefined</code>。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">foo</span>()); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"case4：调用函数时，未传参\"><a href=\"#case4：调用函数时，未传参\" class=\"headerlink\" title=\"case4：调用函数时，未传参\"></a>case4：调用函数时，未传参</h3><p>调用函数时，如果没有传参，那么，这个参数的值就是 undefined。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// 调用函数时，未传参。执行函数后的打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>实际开发中，如果调用函数时没有传参，我们可以根据需要给形参设置一个默认值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    name = name || <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>等学习了 ES6 之后，上方代码也可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">name = <span class=\"string\">&#x27;qianguyihao&#x27;</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h2><p>undefined 实际上是由 null 衍生出来的，所以<code>null == undefined</code>的结果为 true。</p>\n<p>但是 <code>null === undefined</code> 的结果是 false。它们虽然相似，但还是有区别的，其中一个区别是，和数字运算时：</p>\n<ul>\n<li><p>10 + null 结果为 10。</p>\n</li>\n<li><p>10 + undefined 结果为 NaN。</p>\n</li>\n</ul>\n<p>规律总结：</p>\n<ul>\n<li><p>任何值和 null 运算，null 可看做 0 运算。</p>\n</li>\n<li><p>任何数据类型和 undefined 运算都是 NaN。</p>\n</li>\n</ul>\n","text":"很多其他的语言中，只有 null；但 JS 语言中，既有 null，又有 undefined。Null：空对象null 专门用来定义一个空对象。例如：let a = null，又例如 Object.create(null).如果你想定义一个变量用来保存引用类型，但是还没想好放什么","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"07-基本数据类型：Number","slug":"JavaScript/07-基本数据类型：Number","date":"2023-02-15T12:06:59.449Z","updated":"2023-02-15T12:18:15.941Z","comments":true,"path":"api/articles/JavaScript/07-基本数据类型：Number.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"数值型：Number\"><a href=\"#数值型：Number\" class=\"headerlink\" title=\"数值型：Number\"></a>数值型：Number</h2><p>在 JS 中所有的数值都是 Number 类型，包括整数和浮点数（小数）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>; <span class=\"comment\">// 定义一个变量 a，并且赋值整数100</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 输出变量 a 的类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">12.3</span>; <span class=\"comment\">// 定义一个变量 b，并且赋值浮点数 12.3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number</span><br><span class=\"line\"></span><br><span class=\"line\">number</span><br></pre></td></tr></table></figure>\n\n<p>再次补充：在 JS 中，只要是数，就是 Number 数值型的。无论整浮、浮点数（即小数）、无论大小、无论正负，都是 Number 类型的。</p>\n<h3 id=\"数值范围\"><a href=\"#数值范围\" class=\"headerlink\" title=\"数值范围\"></a>数值范围</h3><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。</p>\n<ul>\n<li><p>最大值：<code>Number.MAX_VALUE</code>，这个值为： 1.7976931348623157e+308</p>\n</li>\n<li><p>最小值：<code>Number.MIN_VALUE</code>，这个值为： 5e-324</p>\n</li>\n</ul>\n<p>如果使用 Number 表示的变量超过了最大值，则会返回 Infinity。</p>\n<ul>\n<li><p>无穷大（正无穷）：Infinity</p>\n</li>\n<li><p>无穷小（负无穷）：-Infinity</p>\n</li>\n</ul>\n<p>注意：<code>typeof Infinity</code>的返回结果是 number。</p>\n<h3 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h3><p><strong>NaN</strong>：是一个特殊的数字，表示 Not a Number，非数值。在进行数值运算时，如果得不到正常结果，就会返回 NaN。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;abc&#x27;</span> / <span class=\"number\">18</span>); <span class=\"comment\">//结果是NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;abc&#x27;</span> * <span class=\"string\">&#x27;abcd&#x27;</span>); <span class=\"comment\">//按理说，字符串相乘是没有结果的，但如果你非要让JS去算，它就一定会给你一个结果，结果是NaN。</span></span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<ol>\n<li><p><code>typeof NaN</code>的返回结果是 number。</p>\n</li>\n<li><p><strong>Undefined 和任何数值计算的结果为 NaN。NaN 与任何值都不相等，包括 NaN 本身。</strong></p>\n</li>\n<li><p>关于 isNaN() 函数，可以看后续的文章《JavaScript基础&#x2F;typeof和数据类型转换》。</p>\n</li>\n</ol>\n<h3 id=\"连字符和加号的区别\"><a href=\"#连字符和加号的区别\" class=\"headerlink\" title=\"连字符和加号的区别\"></a>连字符和加号的区别</h3><p>键盘上的<code>+</code>可能是连字符，也可能是数字的加号。如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&quot;我&quot; + &quot;爱&quot; + &quot;你&quot;);\t//连字符，把三个独立的汉字，连接在一起了</span><br><span class=\"line\">console.log(&quot;我+爱+你&quot;);\t\t\t//原样输出</span><br><span class=\"line\">console.log(1+2+3);\t\t\t\t//输出6</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我爱你</span><br><span class=\"line\">我+爱+你</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：如果加号两边<strong>都是</strong> Number 类型，此时是数字相加。否则，就是连字符（用来连接字符串）。</p>\n<p>举例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n\n<p>举例 2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">var b = 2;</span><br><span class=\"line\">console.log(&quot;a&quot; + b);\t//&quot;a&quot;就不是变量了！所以就是&quot;a&quot;+2 输出a2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a2</span><br></pre></td></tr></table></figure>\n\n<p>于是我们明白了，在变量中加入字符串进行拼接，可以被同化为字符串。【重要】</p>\n<h3 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><p>我们知道，<code>&quot;2&quot;+1</code>得到的结果其实是字符串，但是<code>&quot;2&quot;-1</code>得到的结果却是数值 1，这是因为计算机自动帮我们进行了“<strong>隐式转换</strong>”。</p>\n<p>也就是说，<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>这几个符号会自动进行隐式转换。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;4&#x27;</span> + <span class=\"number\">3</span> - <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">37</span>;</span><br></pre></td></tr></table></figure>\n\n<p>虽然程序可以对<code>-</code>、<code>*</code>、<code>/</code>、&#96;%&#96;&#96;这几个符号自动进行“隐式转换”；但作为程序员，我们最好自己完成转换，方便程序的可读性。</p>\n<p>关于隐式转换的详细内容，可以看后续的文章《JavaScript基础&#x2F;typeof和数据类型转换》。</p>\n<h2 id=\"浮点数的运算\"><a href=\"#浮点数的运算\" class=\"headerlink\" title=\"浮点数的运算\"></a>浮点数的运算</h2><h3 id=\"运算精度问题\"><a href=\"#运算精度问题\" class=\"headerlink\" title=\"运算精度问题\"></a>运算精度问题</h3><p>在 JS 中，整数的运算<strong>基本</strong>可以保证精确；但是<strong>小数的运算，可能会得到一个不精确的结果</strong>。所以，千万不要使用 JS 进行对精确度要求比较高的运算。</p>\n<p>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//打印结果十分意外：0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，打印结果并不是 0.3，而是 0.30000000000000004。</p>\n<p>这是因为，计算机在做运算时，所有的运算都要转换成二进制去计算。然而，有些数字转换成二进制之后，无法精确表示。比如说，0.1 和 0.2 转换成二进制之后，是无穷的，因此存在浮点数的计算不精确的问题。</p>\n<h3 id=\"处理数学运算的精度问题\"><a href=\"#处理数学运算的精度问题\" class=\"headerlink\" title=\"处理数学运算的精度问题\"></a>处理数学运算的精度问题</h3><p>如果只是一些简单的精度问题，可以使用 <code>toFix()</code> 方法进行小数的截取。备注：关于 <code>toFixed()</code>方法， 详见《JavaScript 基础&#x2F;内置对象：Number 和 Math》。</p>\n<p>在实战开发中，关于浮点数计算的精度问题，往往比较复杂。市面上有很多针对数学运算的开源库，比如<a href=\"https://github.com/MikeMcl/decimal.js/\">decimal.js</a>、 <a href=\"https://github.com/josdejong/mathjs\">Math.js</a>。这些开源库都比较成熟，我们可以直接拿来用。</p>\n<ul>\n<li><p>Math.js：属于很全面的运算库，文件很大，压缩后的文件就有 500kb。如果你的项目涉及到大型的复杂运算，可以使用 Math.js。</p>\n</li>\n<li><p>decimal.js：属于轻量的运算库，压缩后的文件只有 32kb。大多数项目的数学运算，使用 decimal.js 足够了。</p>\n</li>\n</ul>\n<p>在使用这几个开源库时，既可以用 cdn 的方式引入，也可以用 npm 包的方式引入。</p>\n<p>比如说，通过 cdn 的方式引入 decimal.js 时，可以这样用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/decimal.js/10.2.0/decimal.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;加法：&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> a = <span class=\"number\">0.1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> b = <span class=\"number\">0.2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(a).<span class=\"title function_\">add</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(b)).<span class=\"title function_\">toNumber</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;减法：&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> a = <span class=\"number\">1.0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> b = <span class=\"number\">0.7</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a - b);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(a).<span class=\"title function_\">sub</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(b)).<span class=\"title function_\">toNumber</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;乘法：&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> a = <span class=\"number\">1.01</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> b = <span class=\"number\">1.003</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a * b);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(a).<span class=\"title function_\">mul</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(b)).<span class=\"title function_\">toNumber</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;除法：&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> a = <span class=\"number\">0.029</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> b = <span class=\"number\">10</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a / b);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(a).<span class=\"title function_\">div</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Decimal</span>(b)).<span class=\"title function_\">toNumber</span>());</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加法：</span><br><span class=\"line\">0.30000000000000004</span><br><span class=\"line\">0.3</span><br><span class=\"line\"></span><br><span class=\"line\">减法：</span><br><span class=\"line\">0.30000000000000004</span><br><span class=\"line\">0.3</span><br><span class=\"line\"></span><br><span class=\"line\">乘法：</span><br><span class=\"line\">1.0130299999999999</span><br><span class=\"line\">1.01303</span><br><span class=\"line\"></span><br><span class=\"line\">除法：</span><br><span class=\"line\">0.0029000000000000002</span><br><span class=\"line\">0.0029</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<ul>\n<li><p><a href=\"https://www.bloghome.com.cn/post/nodejsxue-xi-bi-ji-shi-qi-fu-dian-yun-suan-decimal-js.html\">https://www.bloghome.com.cn/post/nodejsxue-xi-bi-ji-shi-qi-fu-dian-yun-suan-decimal-js.html</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/62381711\">https://zhuanlan.zhihu.com/p/62381711</a></p>\n</li>\n</ul>\n<h2 id=\"变量值的传递（赋值）\"><a href=\"#变量值的传递（赋值）\" class=\"headerlink\" title=\"变量值的传递（赋值）\"></a>变量值的传递（赋值）</h2><p>语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b;</span><br></pre></td></tr></table></figure>\n\n<p>把 b 的值赋给 a，b 不变。</p>\n<p>将等号右边的值，赋给左边的变量；等号右边的变量，值不变。</p>\n<p>来做几个题目。</p>\n<p>举例 1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a\t\tb       c</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; <span class=\"comment\">// 1     2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>; <span class=\"comment\">// 1     2       3</span></span><br><span class=\"line\">a = b + c; <span class=\"comment\">// 5     2       3</span></span><br><span class=\"line\">b = c - a; <span class=\"comment\">// 5     -2      3</span></span><br><span class=\"line\">c = a * b; <span class=\"comment\">// 5     -2      -10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c);</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">-2</span><br><span class=\"line\">-10</span><br></pre></td></tr></table></figure>\n\n<p>举例 2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a    b     c</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>; <span class=\"comment\">// 1     2     3</span></span><br><span class=\"line\">a = a + b; <span class=\"comment\">// 3     2     3</span></span><br><span class=\"line\">b = b + a; <span class=\"comment\">// 3     5     3</span></span><br><span class=\"line\">c = c + b; <span class=\"comment\">// 3     5     8</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n\n<p>举例 3：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a       b</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; <span class=\"comment\">// &quot;1&quot;     2</span></span><br><span class=\"line\">a = a + b; <span class=\"comment\">// &quot;12&quot;    2</span></span><br><span class=\"line\">b = b + a; <span class=\"comment\">// &quot;12&quot;    &quot;212&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 输出12</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 输出212</span></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12</span><br><span class=\"line\">212</span><br></pre></td></tr></table></figure>\n\n<p>举例 4：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a         b</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">a = b + a; <span class=\"comment\">//&quot;21&quot;       2</span></span><br><span class=\"line\">b = b + a; <span class=\"comment\">//&quot;21&quot;       &quot;221&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//21</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">//221</span></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21</span><br><span class=\"line\">221</span><br></pre></td></tr></table></figure>\n\n<p>举例 5：（这个例子比较特殊，字符串减去数字）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a - b);</span><br></pre></td></tr></table></figure>\n\n<p>效果：（注意，字符串 - 数值 &#x3D; 数值）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n","text":"数值型：Number在 JS 中所有的数值都是 Number 类型，包括整数和浮点数（小数）。1<br>2<br>3<br>4<br>5<br>var a = 100; // 定义一个变量 a，并且赋值整数100<br>console.log(typeof a); // 输出变量","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"06-基本数据类型：String 和 Boolean","slug":"JavaScript/06-基本数据类型：String 和 Boolean","date":"2023-02-15T12:06:59.447Z","updated":"2023-02-15T12:17:43.488Z","comments":true,"path":"api/articles/JavaScript/06-基本数据类型：String 和 Boolean.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20200825_2016.png","content":"<p>详细介绍基本数据类型：</p>\n<h2 id=\"String-字符串\"><a href=\"#String-字符串\" class=\"headerlink\" title=\"String 字符串\"></a>String 字符串</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>字符串型可以是引号中的任意文本，其语法为：双引号 <code>&quot;&quot;</code> 或者单引号 <code>&#39;&#39;</code>。</p>\n<p>来看个示例。下面的这些，都是字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abcde&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;千古壹号&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">&#x27;123123&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"string\">&#x27;哈哈哈哈哈&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">//空字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = haha; <span class=\"comment\">// 没使用引号，到这里会直接报错。因为会被认为是js代码，但是之前并没有定义 haha。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> b);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> c);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> d);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> e);</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string</span><br><span class=\"line\">string</span><br><span class=\"line\">string</span><br><span class=\"line\">string</span><br><span class=\"line\">string</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引号的注意事项\"><a href=\"#引号的注意事项\" class=\"headerlink\" title=\"引号的注意事项\"></a>引号的注意事项</h3><p>1、单引号和双引号不能混用。比如下面这样写是不可以的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;hello&quot;;  // 报错：Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure>\n\n<p>2、同类引号不能嵌套：双引号里不能再放双引号，单引号里不能再放单引号。</p>\n<p>3、单引号里可以嵌套双引号；双引号里可以嵌套单引号。</p>\n<h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><p>在字符串中我们可以使用<code>\\</code>作为转义字符，当表示一些特殊符号时可以使用<code>\\</code>进行转义。</p>\n<ul>\n<li><p><code>\\&quot;</code> 表示 <code>&quot;</code> 双引号</p>\n</li>\n<li><p><code>\\&#39;</code> 表示 <code>&#39;</code> 单引号</p>\n</li>\n<li><p><code>\\\\</code> 表示<code>\\</code></p>\n</li>\n<li><p><code>\\r</code> 表示回车</p>\n</li>\n<li><p><code>\\n</code> 表示换行。n 的意思是 newline。</p>\n</li>\n<li><p><code>\\t</code> 表示缩进。t 的意思是 tab。</p>\n</li>\n<li><p><code>\\b</code> 表示空格。b 的意思是 blank。</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;我说:&quot;今天\\t天气真不错！&quot;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;\\\\\\\\\\\\&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2);</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我说:&quot;今天\t天气真不错！&quot;</span><br><span class=\"line\">\\\\\\</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取字符串的长度\"><a href=\"#获取字符串的长度\" class=\"headerlink\" title=\"获取字符串的长度\"></a>获取字符串的长度</h3><p>字符串是由若干个字符组成的，这些字符的数量就是字符串的长度。我们可以通过字符串的 length 属性可以获取整个字符串的长度。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;千古壹号&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;千古壹号，永不止步！&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str4 = <span class=\"string\">&#x27;qianguyihao, keep moving!&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str1.<span class=\"property\">length</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"property\">length</span>); <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3.<span class=\"property\">length</span>); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str4.<span class=\"property\">length</span>); <span class=\"comment\">// 25</span></span><br></pre></td></tr></table></figure>\n\n<p>由此可见，字符串的 length 属性，在判断字符串的长度时，会认为：</p>\n<ul>\n<li><p>一个中文算一个字符，一个英文算一个字符</p>\n</li>\n<li><p>一个标点符号（包括中文标点、英文标点）算一个字符</p>\n</li>\n<li><p>一个空格算一个字符</p>\n</li>\n</ul>\n<h3 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h3><p>多个字符串之间可以使用加号 <code>+</code> 进行拼接。</p>\n<p><strong>拼接语法</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 + 任意数据类型 = 拼接之后的新字符串;</span><br></pre></td></tr></table></figure>\n\n<p><strong>拼接规则</strong>：拼接前，会把与字符串相加的这个数据类型转成字符串，然后再拼接成一个新的字符串。</p>\n<p><strong>代码举例</strong>：（字符串与六大数据类型相加）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"string\">&#x27;永不止步&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str4 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str5 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">28</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str6 = <span class=\"string\">&#x27;千古壹号&#x27;</span> + obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str4);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str5);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str6);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">千古壹号永不止步</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号666</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号true</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号null</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号undefined</span><br><span class=\"line\"></span><br><span class=\"line\">千古壹号[object Object]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的不可变性\"><a href=\"#字符串的不可变性\" class=\"headerlink\" title=\"字符串的不可变性\"></a>字符串的不可变性</h2><p>字符串里面的值不可被改变。虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>比如上面的代码，当重新给变量 str 赋值时，常量<code>hello</code>不会被修改，依然保存在内存中；str 会改为指向<code>qianguyihao</code>。</p>\n<h2 id=\"模板字符串（模板字面量）\"><a href=\"#模板字符串（模板字面量）\" class=\"headerlink\" title=\"模板字符串（模板字面量）\"></a>模板字符串（模板字面量）</h2><p>ES6 中引入了<strong>模板字符串</strong>，让我们省去了字符串拼接的烦恼。下面一起来看看它的特性。</p>\n<h3 id=\"在模板字符串中插入变量\"><a href=\"#在模板字符串中插入变量\" class=\"headerlink\" title=\"在模板字符串中插入变量\"></a>在模板字符串中插入变量</h3><p>以前，让字符串进行拼接的时候，是这样做的：（传统写法的字符串拼接）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;smyhvae&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">&#x27;26&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;name:&#x27;</span> + name + <span class=\"string\">&#x27;,age:&#x27;</span> + age); <span class=\"comment\">//传统写法</span></span><br></pre></td></tr></table></figure>\n\n<p>这种写法，比较繁琐，而且容易出错。</p>\n<p>现在，有了 ES6 语法，字符串拼接可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">&#x27;26&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是&#x27;</span> + name + <span class=\"string\">&#x27;,age:&#x27;</span> + age); <span class=\"comment\">//传统写法</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`我是<span class=\"subst\">$&#123;name&#125;</span>,age:<span class=\"subst\">$&#123;age&#125;</span>`</span>); <span class=\"comment\">//ES6 写法。注意语法格式</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，上方代码中，倒数第二行用的符号是单引号，最后一行用的符号是反引号（在 tab 键的上方）。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000010222698\">ES6 的 rest 参数和扩展运算符</a></li>\n</ul>\n<h3 id=\"在模板字符串中插入表达式\"><a href=\"#在模板字符串中插入表达式\" class=\"headerlink\" title=\"在模板字符串中插入表达式\"></a>在模板字符串中插入表达式</h3><p>以前，在字符串中插入表达式的写法必须是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this is &#x27;</span> + (a + b) + <span class=\"string\">&#x27; and\\nnot &#x27;</span> + (<span class=\"number\">2</span> * a + b) + <span class=\"string\">&#x27;.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>现在，通过模板字符串，我们可以使用一种更优雅的方式来表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这行代码，故意做了换行。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`this is <span class=\"subst\">$&#123;a + b&#125;</span> and</span></span><br><span class=\"line\"><span class=\"string\">not <span class=\"subst\">$&#123;<span class=\"number\">2</span> * a + b&#125;</span>.`</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is 15 and</span><br><span class=\"line\">not 20.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板字符串中可以换行\"><a href=\"#模板字符串中可以换行\" class=\"headerlink\" title=\"模板字符串中可以换行\"></a>模板字符串中可以换行</h3><p>因为模板字符串支持换行，所以可以让代码写得非常美观。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板字符串支持换行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> html = <span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;span&gt;<span class=\"subst\">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;span&gt;<span class=\"subst\">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;span&gt;<span class=\"subst\">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(html); <span class=\"comment\">// 打印结果也会换行</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20200825_2016.png\"></p>\n<h3 id=\"模板字符串中可以调用函数\"><a href=\"#模板字符串中可以调用函数\" class=\"headerlink\" title=\"模板字符串中可以调用函数\"></a>模板字符串中可以调用函数</h3><p>模板字符串中可以调用函数。字符串中调用函数的位置，将会显示函数执行后的返回值。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`www.<span class=\"subst\">$&#123;getName()&#125;</span>.com`</span>); <span class=\"comment\">// 打印结果：www.qianguyihao.com</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板字符串支持嵌套使用\"><a href=\"#模板字符串支持嵌套使用\" class=\"headerlink\" title=\"模板字符串支持嵌套使用\"></a>模板字符串支持嵌套使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nameList = [<span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"string\">&#x27;解忧少帅&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myTemplate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// join(&#x27;&#x27;) 的意思是，把数组里的内容合并成一个字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t<span class=\"subst\">$&#123;nameList.map((item) =&gt; <span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;item&#125;</span>&lt;/li&gt;`</span>).join(<span class=\"string\">&#x27;&#x27;</span>)&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/ul&gt;`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">innerHTML</span> = <span class=\"title function_\">myTemplate</span>();</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20200607_2118.png\"></p>\n<h2 id=\"布尔值：Boolean\"><a href=\"#布尔值：Boolean\" class=\"headerlink\" title=\"布尔值：Boolean\"></a>布尔值：Boolean</h2><p>布尔型有两个值：true 和 false。主要用来做逻辑判断： true 表示真，false 表示假。</p>\n<p>布尔值直接使用就可以了，千万不要加引号。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean</span><br></pre></td></tr></table></figure>\n\n<p>布尔型和数字型相加时， true 按 1 来算 ，false 按 0 来算。</p>\n","text":"详细介绍基本数据类型：String 字符串语法字符串型可以是引号中的任意文本，其语法为：双引号 &quot;&quot; 或者单引号 &#39;&#39;。来看个示例。下面的这些，都是字符串：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"05-变量的数据类型：基本数据类型和引用数据类型","slug":"JavaScript/05-变量的数据类型：基本数据类型和引用数据类型","date":"2023-02-15T12:06:59.445Z","updated":"2023-02-15T12:16:27.637Z","comments":true,"path":"api/articles/JavaScript/05-变量的数据类型：基本数据类型和引用数据类型.json","excerpt":"","keywords":null,"cover":null,"content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"数据分类\"><a href=\"#数据分类\" class=\"headerlink\" title=\"数据分类\"></a>数据分类</h2><p>数据分为：静态数据、动态数据。</p>\n<h3 id=\"静态数据\"><a href=\"#静态数据\" class=\"headerlink\" title=\"静态数据\"></a>静态数据</h3><p>静态数据是指一些永久性的数据。一般是以文件的形式存储在硬盘上，比如文档、照片、视频等文件。</p>\n<p>电脑关闭后，静态数据仍然还在。只要不主动删掉数据或者硬盘没损坏，这些数据就一直都在。</p>\n<h3 id=\"动态数据\"><a href=\"#动态数据\" class=\"headerlink\" title=\"动态数据\"></a>动态数据</h3><p>动态数据是在程序运行过程中，动态产生的临时数据，这些数据可能随时发生变化。一般存储在内存中。</p>\n<p>电脑关闭后，这些数据会被清除。</p>\n<p>为何不把应用程序的动态数据加载到硬盘中执行呢？这主要是因为，内存的访问速度比硬盘快无数倍。</p>\n<h2 id=\"变量的数据类型\"><a href=\"#变量的数据类型\" class=\"headerlink\" title=\"变量的数据类型\"></a>变量的数据类型</h2><h3 id=\"为什么需要数据类型\"><a href=\"#为什么需要数据类型\" class=\"headerlink\" title=\"为什么需要数据类型\"></a>为什么需要数据类型</h3><p>在计算机中，不同的数据所需占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型。而且，不同的数据类型，寓意也不同。</p>\n<p>我们都知道，无论这个变量是字符串类型，还是数字类型，我们都可以直接用 <code>var</code> 去定义它。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;hello word&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<p>为什么可以这样做呢？这是因为：JavaScript 是一种「弱类型语言」，或者说是一种「动态语言」，这意味着不需要提前声明变量的类型，在程序运行过程中，类型会自动被确定。</p>\n<p><strong>JS 的变量数据类型，是在程序运行的过程中，根据等号右边的值来确定的</strong>。而且，变量的数据类型是可以变化的。比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"number\">123</span>; <span class=\"comment\">// 强制将变量 name 修改为 数字类型</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JS-中一共有八种数据类型\"><a href=\"#JS-中一共有八种数据类型\" class=\"headerlink\" title=\"JS 中一共有八种数据类型\"></a>JS 中一共有八种数据类型</h3><ul>\n<li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、BigInt 大型数值、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol。</p>\n</li>\n<li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p>\n</li>\n</ul>\n<p>注意：内置对象 Function、Array、Date、RegExp、Error 等都是属于 Object 类型。也就是说，除了那七种基本数据类型之外，其他的，都称之为 Object 类型。</p>\n<p>BigInt 和 Symbol 是ES6中新增的类型</p>\n<blockquote>\n<p>面试问：引用数据类型有几种？</p>\n</blockquote>\n<blockquote>\n<p>面试答：只有一种，即 Object 类型。</p>\n</blockquote>\n<p><strong>数据类型之间最大的区别</strong>：</p>\n<ul>\n<li><p>基本数据类型：参数赋值的时候，传数值。</p>\n</li>\n<li><p>引用数据类型：参数赋值的时候，传地址。</p>\n</li>\n</ul>\n<h2 id=\"一个经典的例子\"><a href=\"#一个经典的例子\" class=\"headerlink\" title=\"一个经典的例子\"></a>一个经典的例子</h2><p><strong>基本数据类型举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">a++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：24</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 打印结果：23</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中：a 和 b 都是基本数据类型，让 b 等于 a，然后<strong>改变 a 的值之后，发现 b 的值并没有被改变</strong>。</p>\n<p>但是在引用数据类型中，就不同了，我们来看一看。</p>\n<p><strong>引用数据类型举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&#x27;smyh&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让 obj2 等于 obj1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改 obj1 的 name 属性</span></span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&#x27;vae&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">name</span>); <span class=\"comment\">// 打印结果：vae</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2.<span class=\"property\">name</span>); <span class=\"comment\">// 打印结果：vae</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中：obj1 和 obj2 都是引用数据类型，让 obj2 等于 obj1，然后<strong>修改 obj1.name 的值之后，发现 obj2.name 的值也发生了改变</strong>。</p>\n<p>从上面的例子中，可以反映出，基本数据类型和引用数据类型是有区别的。</p>\n<p>那到底有什么区别呢？我们进一步往下看。</p>\n<h2 id=\"栈内存和堆内存\"><a href=\"#栈内存和堆内存\" class=\"headerlink\" title=\"栈内存和堆内存\"></a>栈内存和堆内存</h2><p>我们首先记住一句话：JS 中，所有的<strong>变量</strong>都是保存在<strong>栈内存</strong>中的。</p>\n<p>然后来看看下面的区别。</p>\n<p><strong>基本数据类型</strong>：</p>\n<p>基本数据类型的值，直接保存在栈内存中。值与值之间是独立存在，修改一个变量不会影响其他的变量。</p>\n<p><strong>引用数据类型</strong>：</p>\n<p>对象是保存到<strong>堆内存</strong>中的。每创建一个新的对象，就会在堆内存中开辟出一个新的空间；而<strong>变量保存了对象的内存地址</strong>（对象的引用），保存在栈内存当中。如果两个变量保存了同一个对象的引用，当一个通过一个变量修改属性时，另一个也会受到影响。</p>\n","text":"数据分类数据分为：静态数据、动态数据。静态数据静态数据是指一些永久性的数据。一般是以文件的形式存储在硬盘上，比如文档、照片、视频等文件。电脑关闭后，静态数据仍然还在。只要不主动删掉数据或者硬盘没损坏，这些数据就一直都在。动态数据动态数据是在程序运行过程中，动态产生的临时数据，这些","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"04-标识符、关键字、保留字","slug":"JavaScript/04-标识符、关键字、保留字","date":"2023-02-15T12:06:59.442Z","updated":"2023-02-15T12:15:54.804Z","comments":true,"path":"api/articles/JavaScript/04-标识符、关键字、保留字.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"变量的命名规则（重要）\"><a href=\"#变量的命名规则（重要）\" class=\"headerlink\" title=\"变量的命名规则（重要）\"></a>变量的命名规则（重要）</h2><p>JS是大小敏感的语言。也就是说 A 和 a 是两个变量。大写字母是可以使用的，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"number\">250</span>; <span class=\"comment\">//变量1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">888</span>; <span class=\"comment\">//变量2</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来整理一下<strong>变量的命名规则</strong>，非常重要。</p>\n<p>必须遵守：</p>\n<ul>\n<li>只能由字母(A-Z、a-z)、数字(0-9)、下划线(_)、美元符( $ )组成。</li>\n<li>不能以数字开头。必须以字母(A-Z、a-z)、下划线(_)或者美元符( $ )开头。变量名中不允许出现空格。尤其注意，变量名中不能出现<strong>中划线</strong><code>-</code>，很多人写了多年代码都不知道这一点，让人大跌眼镜。</li>\n<li>严格区分大小写（JS 是区分大小写的语言）。</li>\n<li>不能使用 JS 语言中保留的「关键字」和「保留字」作为变量名。下一篇文章会讲。</li>\n<li>变量名长度不能超过 255 个字符。</li>\n<li></li>\n<li>汉语可以作为变量名。但是不建议使用，因为 low。</li>\n</ul>\n<p>建议遵守：</p>\n<ul>\n<li><p>命名要有可读性，方便顾名思义。</p>\n</li>\n<li><p>建议用驼峰命名法。比如 getElementById、getUserInfo、aaaOrBbbAndCcc</p>\n</li>\n</ul>\n<p><strong>补充</strong>：</p>\n<p>1、不能以数字开头，是为了把数字和字母区分开。</p>\n<p>2、JS底层保存标识符的时候，是采用的 Unicode 编码。所以理论上讲，在遵守命名规则的前提下，utf-8中包含的所有内容都可以作为标识符。</p>\n<h2 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h2><p><strong>标识符</strong>：在 JS 中所有的可以由我们<strong>自主命名</strong>的都可以称之为标识符。包括：<strong>变量名、函数名、属性名、参数名</strong>都是属于标识符。</p>\n<p>通俗来讲，标识符就是我们写代码时为某些东西起的名字。类似于人出生的时候，起个人名。</p>\n<p><strong>标识符的命名规则</strong>和变量的命令规则是一样的。关于变量的命名规则，详见上一段。</p>\n<p>标识符不能使用语言中保留的<strong>关键字</strong>及<strong>保留字</strong>。</p>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><p><strong>关键字</strong>：被JS赋予了特殊含义的单词。也就是说，关键字是 JS 本身已经使用了的单词，我们不能再用它们充当变量名、函数名等标识符。关键字在开发工具中会显示特殊的颜色。</p>\n<p>JS 中的关键字如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>、<span class=\"keyword\">else</span>、switch、<span class=\"built_in\">break</span>、<span class=\"keyword\">case</span>、default、<span class=\"keyword\">for</span>、<span class=\"keyword\">in</span>、<span class=\"keyword\">do</span>、<span class=\"keyword\">while</span>、</span><br><span class=\"line\"></span><br><span class=\"line\">var、<span class=\"built_in\">let</span>、const、void、<span class=\"keyword\">function</span>、<span class=\"built_in\">continue</span>、<span class=\"built_in\">return</span>、</span><br><span class=\"line\"></span><br><span class=\"line\">try、catch、finally、throw、debugger、</span><br><span class=\"line\"></span><br><span class=\"line\">this、typeof、instanceof、delete、with、</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span>、new、class、extends、super、with、yield、import、static、</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">true</span>、<span class=\"literal\">false</span>、null、undefined、NaN</span><br></pre></td></tr></table></figure>\n<h2 id=\"保留字\"><a href=\"#保留字\" class=\"headerlink\" title=\"保留字\"></a>保留字</h2><p><strong>保留字</strong>：实际上就是预留的“关键字”。它们虽然现在还不是关键字，但是未来可能会成为关键字。同样不能用它们当充当变量名、函数名等标识符。</p>\n<p>JS 中的保留字如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum、await</span><br><span class=\"line\"></span><br><span class=\"line\">abstract、boolean、byte、char、double、final、<span class=\"built_in\">float</span>、goto、int、long、native、short、synchronized、transient、volatile、</span><br><span class=\"line\"></span><br><span class=\"line\">arguments <span class=\"built_in\">eval</span> Infinity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下关键字只在严格模式中被当成保留字，在ES6中是属于关键字</span></span><br><span class=\"line\">implements、interface、package、private、protected、public</span><br></pre></td></tr></table></figure>\n\n<p>当你在网上搜“JS保留字”的时候，你会找到很多版本，每个版本都不一样，各有各的说法。<strong>如果有不一样的地方，请以我写的为准</strong>。</p>\n<p>其实，以谁的版本作为标准并不重要，因为有些单词到底是<strong>关键字</strong>还是<strong>保留字</strong>，并没有严格的界限。JS 关于保留字的规则非常复杂，上放列表中的一些单词在特殊情况下其实是可以使用的。</p>\n<p>我们只需要记住一点：上面提到的所有<strong>关键字</strong>和<strong>保留字</strong>，我们都不要用它们作为变量名或者参数名。不要尝试这些奇怪的做法。</p>\n<p>关于更多：</p>\n<ul>\n<li><p><a href=\"https://www.zhihu.com/question/472379938\">知乎问答：undefined是保留字吗？</a></p>\n</li>\n<li><p>书籍《<a href=\"https://book.douban.com/subject/35469273/\">JavaScript 悟道</a>》的第一章：保留字部分。</p>\n</li>\n</ul>\n","text":"变量的命名规则（重要）JS是大小敏感的语言。也就是说 A 和 a 是两个变量。大写字母是可以使用的，比如：1<br>2<br>var A = 250; //变量1<br>var a = 888; //变量2<br>我们来整理一下变量的命名规则，非常重要。必须遵守：只能由字母(A-","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"03-常量和变量","slug":"JavaScript/03-常量和变量","date":"2023-02-15T12:06:59.441Z","updated":"2023-02-15T12:14:45.665Z","comments":true,"path":"api/articles/JavaScript/03-常量和变量.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180116_2020.png","content":"<h2 id=\"常量（字面量）：数字和字符串\"><a href=\"#常量（字面量）：数字和字符串\" class=\"headerlink\" title=\"常量（字面量）：数字和字符串\"></a>常量（字面量）：数字和字符串</h2><p><strong>常量</strong>也称之为“字面量”，是固定值，不可改变。看见什么，它就是什么。</p>\n<p>常量有下面这几种：</p>\n<ul>\n<li>数字常量（数值常量）</li>\n<li>字符串常量</li>\n<li>布尔常量</li>\n<li>自定义常量</li>\n</ul>\n<h3 id=\"数字常量\"><a href=\"#数字常量\" class=\"headerlink\" title=\"数字常量\"></a>数字常量</h3><p>数字常量非常简单，直接写数字就行，不需要任何其他的符号。既可以是整数，也可以是浮点数。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不需要加引号</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"number\">996</span>); <span class=\"comment\">// 996是整数</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"number\">3.14</span>); <span class=\"comment\">// 3.14是浮点数（即带了小数）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串常量\"><a href=\"#字符串常量\" class=\"headerlink\" title=\"字符串常量\"></a>字符串常量</h3><p>字符串常量就是用单引号或双引号括起来的内容。可以是单词、句子等，一定要加引号。在JS中，只要是单引号或双引号括起来的内容，都是字符串常量。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;996&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;千古壹号，永不止步&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>温馨提示：996 是数字，’996’是字符串。</p>\n<h3 id=\"布尔常量\"><a href=\"#布尔常量\" class=\"headerlink\" title=\"布尔常量\"></a>布尔常量</h3><p>布尔常量就是表达<strong>真</strong>或者<strong>假</strong>，在JS中用 true 和 false 来表达。</p>\n<p>布尔字面量举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;如果为真，就走这里面的代码);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义常量：const\"><a href=\"#自定义常量：const\" class=\"headerlink\" title=\"自定义常量：const\"></a>自定义常量：const</h3><p>自定义常量是ES6中新增的语法。它的语法格式是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 常量名称 = 常量取值;</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;壹号&#x27;</span>; <span class=\"comment\">// 定义常量name，它的取值是 壹号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// name =  &#x27;许嵩&#x27;; // 既然 name 是常量，所以这一行是错误的写法，因为 name 无法被修改为其他的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 打印结果：壹号</span></span><br></pre></td></tr></table></figure>\n\n<p>后续ES6的时候，会深入学习 const 用法。</p>\n<h3 id=\"开发技巧：用变量定义常量\"><a href=\"#开发技巧：用变量定义常量\" class=\"headerlink\" title=\"开发技巧：用变量定义常量\"></a>开发技巧：用变量定义常量</h3><p>我们一般不会直接使用常量，否则会导致代码冗余、不易维护。如果多个地方要用到同一个常量，那就建议事先定义一个变量，用来保存这个常量；然后在需要的地方去引用这个变量就行了。另外，当我们学习了ES6中的 const 之后，还可以使用自定义常量达到目的。</p>\n<h2 id=\"变量的概念\"><a href=\"#变量的概念\" class=\"headerlink\" title=\"变量的概念\"></a>变量的概念</h2><p><strong>变量</strong>表示可以被修改的数据。我们通过「变量名」获取数据，甚至修改数据。</p>\n<p>变量还可以用来保存常量。</p>\n<p><strong>本质</strong>：变量是程序在内存中申请的一块用来存放数据的空间。打个比方，超市里的储物格就是变量, 在不同的时间段里, 储物格中存储的数据可以不一样。</p>\n<h2 id=\"变量的定义和赋值\"><a href=\"#变量的定义和赋值\" class=\"headerlink\" title=\"变量的定义和赋值\"></a>变量的定义和赋值</h2><p>定义变量是在告诉浏览器，我们需要一块内存空间，相当于生成超市里的储物格。</p>\n<p>给变量赋值就是往相当于往储物格里塞东西，可能今天上午塞的是面包🍞，下午就换成了蛋糕🍰。</p>\n<h3 id=\"变量的定义-x2F-声明（ES5）\"><a href=\"#变量的定义-x2F-声明（ES5）\" class=\"headerlink\" title=\"变量的定义&#x2F;声明（ES5）\"></a>变量的定义&#x2F;声明（ES5）</h3><p>在 ES6 语法之前，统一使用<code>var</code>关键字来声明一个变量。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name; <span class=\"comment\">// 定义一个名为 name 的变量。name是变量名。</span></span><br></pre></td></tr></table></figure>\n\n<p>var 是英语“variable”变量的缩写。后面要加一个空格，空格后面的东西就是“变量名”。</p>\n<p>PS：<strong>在 JavaScript 中，永远都是用 var 来定义变量</strong>（在 ES6 之前），这和 C、Java 等语言不同。</p>\n<h3 id=\"变量的定义-x2F-声明（ES6）\"><a href=\"#变量的定义-x2F-声明（ES6）\" class=\"headerlink\" title=\"变量的定义&#x2F;声明（ES6）\"></a>变量的定义&#x2F;声明（ES6）</h3><p>在 ES6 语法及之后的版本里，可以使用 <code>const</code>、<code>let</code>关键字来定义一个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name; <span class=\"comment\">// 定义一个常量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age; <span class=\"comment\">// 定义一个变量</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你想定义一个常量，就用 const；如果你想定义一个变量，就用 let。</p>\n<h3 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h3><p>变量赋值举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;千古壹号&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>综合起来，变量的定义、赋值、取值，举例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义：声明一个变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num;</span><br><span class=\"line\"><span class=\"comment\">// 赋值：往变量中存储数据</span></span><br><span class=\"line\">num = <span class=\"number\">996</span>;</span><br><span class=\"line\"><span class=\"comment\">// 取值：从变量中获取存储的数据</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并写法\"><a href=\"#合并写法\" class=\"headerlink\" title=\"合并写法\"></a>合并写法</h3><p>变量的定义和赋值，还可以合并写在一起，是实战中常用的写法。举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>; <span class=\"comment\">// ES5语法</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = hello; <span class=\"comment\">// ES6 语法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = world; <span class=\"comment\">// ES6 语法</span></span><br><span class=\"line\">c = qianguyihao; <span class=\"comment\">// 修改 变量 C 的值</span></span><br></pre></td></tr></table></figure>\n\n<p>定义一个变量并赋值， 我们称之为<strong>变量的初始化</strong>。如下图所示：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2020.png\"></p>\n<ul>\n<li>定义变量：var 就是一个<strong>关键字</strong>，用来定义变量。所谓关键字，就是有特殊功能的单词。</li>\n<li>变量赋值：等号表示<strong>赋值</strong>，将等号右边的值，赋给左边的变量。</li>\n<li>变量名：我们可以给变量起个名字。</li>\n</ul>\n<h3 id=\"变量的初始化【重要】\"><a href=\"#变量的初始化【重要】\" class=\"headerlink\" title=\"变量的初始化【重要】\"></a>变量的初始化【重要】</h3><p>第一次给变量赋值，称之为“<strong>变量的初始化</strong>”，这个概念非常重要。第二次给这个变量赋值（也就是修改这个变量的值）就不叫初始化了。</p>\n<p>一个变量如果没有进行初始化（只声明，不赋值），那么这个变量中存储的值是<code>undefined</code>，这个知识点必须知道。</p>\n<p>变量的初始化，可以有两种形式，如下。</p>\n<p>形式1：先定义，在赋值。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\">name = <span class=\"string\">&#x27;qianguyhihao&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>形式2：在定义的同时进行初始化。也就是上一小段讲的“合并写法”。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量定义和赋值的补充\"><a href=\"#变量定义和赋值的补充\" class=\"headerlink\" title=\"变量定义和赋值的补充\"></a>变量定义和赋值的补充</h2><h3 id=\"修改变量的值\"><a href=\"#修改变量的值\" class=\"headerlink\" title=\"修改变量的值\"></a>修改变量的值</h3><p>一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">a = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：110。因为 110 覆盖了 100</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同时定义多个变量\"><a href=\"#同时定义多个变量\" class=\"headerlink\" title=\"同时定义多个变量\"></a>同时定义多个变量</h3><p>1、同时定义多个变量时，只需要写一个 var， 多个变量名之间用英文逗号隔开。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同时定义多个变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1, num2;</span><br></pre></td></tr></table></figure>\n\n<p>2、定义多个变量的同时，分别进行初始化。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义多个变量的同时，进行初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">10</span>, num2 = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果多个变量初始化的初始化值都是一样的，则可以这样简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1, num2;</span><br><span class=\"line\">num1 = num2 = <span class=\"number\">10</span>; <span class=\"comment\">// 重点在这一行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1); <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的写法和下面的写法是有区别的：（注意看打印结果）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1, num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"变量之间可以相互赋值\"><a href=\"#变量之间可以相互赋值\" class=\"headerlink\" title=\"变量之间可以相互赋值\"></a>变量之间可以相互赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1, num2;</span><br><span class=\"line\">num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">num2 = num1; <span class=\"comment\">// 把 num1 的值拷贝一份，赋值给 num2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量如果重复定义\"><a href=\"#变量如果重复定义\" class=\"headerlink\" title=\"变量如果重复定义\"></a>变量如果重复定义</h3><p>在ES5中，如果用 var 定义了同名变量，那么，后定义的变量，会覆盖先定义的变量。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;许嵩&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;千古壹号&#x27;</span>; <span class=\"comment\">// 这里会重新定义一个新的变量 name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 千古壹号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量声明和赋值的特殊情况\"><a href=\"#变量声明和赋值的特殊情况\" class=\"headerlink\" title=\"变量声明和赋值的特殊情况\"></a>变量声明和赋值的特殊情况</h3><p>变量建议先声明，再使用；否则可能会产生意想不到的结果。具体如下。</p>\n<p><strong>写法 1</strong>、先声明，再赋值：（正常）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法 2</strong>、不声明，直接赋值：（正常）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法 3</strong>、只声明，不赋值：（注意，打印 undefined）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法 4</strong>、不声明，不赋值，直接使用：（会报错）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 会报错</span></span><br></pre></td></tr></table></figure>\n\n<p>控制台会报错：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2040.png\"></p>\n<p><strong>补充</strong>：写法 1 和写法 2 虽然都正常，但这两种写法是有区别的，等以后学习了「变量提升」的概念就明白了。大多数情况下，我们都是采用的写法 1。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p><strong>举例</strong>：交换两个变量的值</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp;</span><br><span class=\"line\"></span><br><span class=\"line\">temp = a1;</span><br><span class=\"line\">a1 = a2;</span><br><span class=\"line\">a2 = temp;</span><br></pre></td></tr></table></figure>\n\n","text":"常量（字面量）：数字和字符串常量也称之为“字面量”，是固定值，不可改变。看见什么，它就是什么。常量有下面这几种：数字常量（数值常量）字符串常量布尔常量自定义常量数字常量数字常量非常简单，直接写数字就行，不需要任何其他的符号。既可以是整数，也可以是浮点数。例如：1<br>2<br>","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"02-JavaScript：hello world","slug":"JavaScript/02-开始写JavaScript：hello world","date":"2023-02-15T12:06:59.438Z","updated":"2023-02-15T12:12:38.715Z","comments":true,"path":"api/articles/JavaScript/02-开始写JavaScript：hello world.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180116_1735.gif","content":"<h2 id=\"开始写第一行-JavaScript：hello-world\"><a href=\"#开始写第一行-JavaScript：hello-world\" class=\"headerlink\" title=\"开始写第一行 JavaScript：hello world\"></a>开始写第一行 JavaScript：hello world</h2><p>JS 代码的书写位置在哪里呢？引入 JS 代码，有哪几种方式？有三种方式：（和 CSS 的引入方式类似）</p>\n<ol>\n<li><p><strong>行内式</strong>：写在标签内部。</p>\n</li>\n<li><p><strong>内嵌式</strong>（内联式）：写在 head 标签中。</p>\n</li>\n<li><p><strong>外链式</strong>：引入外部 JS 文件。</p>\n</li>\n</ol>\n<h3 id=\"方式-1：行内式\"><a href=\"#方式-1：行内式\" class=\"headerlink\" title=\"方式 1：行内式\"></a>方式 1：行内式</h3><p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;button&quot;</span> value=<span class=\"string\">&quot;点我点我&quot;</span> onclick=<span class=\"string\">&quot;alert(&#x27; Hello 方式1&#x27;)&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>完整的可执行代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;点我点我&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;alert(&#x27; Hello 方式1&#x27;)&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析</strong>：</p>\n<ul>\n<li><p>可以将单行或少量 JS 代码写在 HTML 标签的事件属性中（以 on 开头的属性），比如放在上面的 <code>onclick</code>点击事件中。</p>\n</li>\n<li><p>这种书写方式，不推荐使用，原因是：可读性差，尤其是需要编写大量 JS 代码时，很难维护；引号多层嵌套时，也容易出错。</p>\n</li>\n<li><p>关于代码中的「引号」，在 HTML 标签中，推荐使用双引号，JS 中我们推荐使用单引号。</p>\n</li>\n</ul>\n<h3 id=\"方式-2、内嵌式（内联式）\"><a href=\"#方式-2、内嵌式（内联式）\" class=\"headerlink\" title=\"方式 2、内嵌式（内联式）\"></a>方式 2、内嵌式（内联式）</h3><p>我们可以在 HTML 页面的 <code>&lt;body&gt;</code> 标签里放入<code>&lt;script type=”text/javascript”&gt;&lt;/script&gt;</code>标签对，并在<code>&lt;script&gt;</code>里书写 JavaScript 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 在这里写 js 代码</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;千古壹号 hello 方式2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao hello 方式2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析</strong>：</p>\n<ul>\n<li><p>text 表示纯文本，因为 JavaScript 代码本身就是纯文本。</p>\n</li>\n<li><p>可以将多行 JS 代码写到 <code>&lt;script&gt;</code> 标签中。</p>\n</li>\n<li><p>内嵌式 JS 是学习时常用的方式。</p>\n</li>\n</ul>\n<h3 id=\"方式-3：外链式\"><a href=\"#方式-3：外链式\" class=\"headerlink\" title=\"方式 3：外链式\"></a>方式 3：外链式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 外链式：引入外部的 js 文件：这个 utils.js 文件与当前的 html 文件，处于同一级目录 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;utils.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析</strong>：</p>\n<ul>\n<li>上面这段代码，依然是放到 body 标签里，可以和内嵌的 JS 代码并列。</li>\n<li>上方代码的 script 标签已经引入了外部 JS 文件，所以这个标签里面，不可以再写 JS 代码。</li>\n</ul>\n<p><strong>总结</strong>：</p>\n<p>我们在实战开发中，基本都是采用方式 3，因为将 html 文件和 js 文件分开的方式，有利于代码的结构化和复用，符合高内聚、低耦合的思想。很少会有人把一大堆 JS 代码塞到 html 文件里。</p>\n<h3 id=\"关于-window-onload：先加载，最后执行\"><a href=\"#关于-window-onload：先加载，最后执行\" class=\"headerlink\" title=\"关于 window.onload：先加载，最后执行\"></a>关于 window.onload：先加载，最后执行</h3><p>上面的三种方式，有个共同的地方是：JS 代码都是写在<code>&lt;/body&gt;</code>中的，准确来说，是在页面标签元素的后面，在 body<strong>结束标签</strong>的前面。</p>\n<p>为什么一般是按这样的顺序来写呢？这是因为：浏览器默认会<strong>从上至下</strong>解析网页（这句话很重要）。当你<strong>需要通过 JS 来操作界面上的标签元素</strong>的时候，假如将 JS 代码、<code>&lt;script&gt;</code>标签写到<code>&lt;head&gt;</code>标签中，或者写在页面标签元素的前面，那么这样的 JS 是无效的，因为标签元素在此时都还没来得及加载，自然无法操作这个元素。</p>\n<p><strong>重点：</strong></p>\n<p>当你<strong>需要通过 JS 来操作界面上的标签元素</strong>的时候，如果实在想把 JS 写到<code>&lt;head&gt;</code>标签中，那么就必须用 window.onload 将 JS 代码进行包裹。代码格式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  window.onload = function()&#123;</span><br><span class=\"line\">    // 这里可以写操作界面元素的JS代码，等页面加载完毕后再执行</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>window.onload</strong>的含义是：等界面上所有内容都加载完毕后（不仅要等文本加载完毕，而且要等图片也要加载完毕），再执行<code>&#123;&#125;</code>中的代码。做到了<strong>先加载，最后执行</strong>，也就是：<strong>等页面加载完毕后再执行</strong>。</p>\n<p>当然，我们可以根据具体需求，将 window.onload 写在 <code>&lt;head&gt;</code>标签中，或者写在<code>&lt;script&gt;</code>标签中。</p>\n<h2 id=\"JavaScript-一些简单的语法规则\"><a href=\"#JavaScript-一些简单的语法规则\" class=\"headerlink\" title=\"JavaScript 一些简单的语法规则\"></a>JavaScript 一些简单的语法规则</h2><p>学习程序，是有规律可循的，程序会有有相同的部分，这些部分就是一种规定，不能更改，我们称之为：语法。我们先来了解一个简单的语法规则。</p>\n<p>1、JS 对换行、缩进、空格不敏感。每一条语句以分号结尾。</p>\n<p>也就是说：</p>\n<p>代码一：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;今天蓝天白云&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;我很高兴&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>等价于代码二：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;今天蓝天白云&#x27;</span>);<span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;我很高兴&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、每一条语句末尾要加上<strong>分号</strong>。虽然分号不是必须加的，但如果不写分号，浏览器会自动添加分号，导致消耗一些系统资源和性能，甚至有可能<strong>添加错误</strong>。</p>\n<p>3、所有的符号，都是英文的。比如<strong>括号</strong>、引号、分号。</p>\n<p>如果你用的是搜狗拼音，<strong>建议不要用 shift 切换中英文</strong>（可以在搜狗软件里进行设置），不然很容易输入中文的分号；建议用 ctrl+space 切换中英文输入法。</p>\n<p>4、JS 严格区分大小写。</p>\n<h2 id=\"前端代码的注释\"><a href=\"#前端代码的注释\" class=\"headerlink\" title=\"前端代码的注释\"></a>前端代码的注释</h2><p>注释：即解释、注解。注释有利于提高代码的可读性，且有利于程序员之间的沟通。</p>\n<p>注释可以用来解释某一段代码的功能和作用；通过注释，还可以补充代码中未体现出来的部分。</p>\n<p>注释可以是任何文字，可以写中文。</p>\n<p><strong>我们不要把 HTML、CSS、JavaScript 三者的注释格式搞混淆了</strong>。</p>\n<h3 id=\"HTML-的注释\"><a href=\"#HTML-的注释\" class=\"headerlink\" title=\"HTML 的注释\"></a>HTML 的注释</h3><p>格式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 我是 HTML 注释  --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--头部开始--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--头部结束--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--内容开始--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--内容结束--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--底部开始--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--底部结束--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS-的注释\"><a href=\"#CSS-的注释\" class=\"headerlink\" title=\"CSS 的注释\"></a>CSS 的注释</h3><p>举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"comment\">/* 我是 CSS 注释 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">font-weight</span>: bold;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">font-style</span>: italic;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：CSS 只有<code>/* */</code>这种注释，没有<code>//</code>这种注释。而且注释要写在<code>&lt;style&gt;</code>标签里面才算生效。</p>\n<h3 id=\"JavaScript-的注释\"><a href=\"#JavaScript-的注释\" class=\"headerlink\" title=\"JavaScript 的注释\"></a>JavaScript 的注释</h3><p>单行注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我是注释</span></span><br></pre></td></tr></table></figure>\n\n<p>多行注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t多行注释1</span></span><br><span class=\"line\"><span class=\"comment\">\t多行注释2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：VS Code 中，单行注释的快捷键是「Ctrl + &#x2F;」，多行注释的默认快捷键是「Alt + Shift + A」。</p>\n<p>当然，如果你觉得多行注释的默认快捷键不方便，我们还可以修改默认快捷键。操作如下：</p>\n<p>VS Code –&gt; 首选项 –&gt; 键盘快捷方式 –&gt; 查找“注释”这两个字 –&gt; 将原来的快捷键修改为其他的快捷键，比如「Ctrl + Shift + &#x2F;」。</p>\n<h3 id=\"对注释的认知\"><a href=\"#对注释的认知\" class=\"headerlink\" title=\"对注释的认知\"></a>对注释的认知</h3><p>为什么要写注释：</p>\n<ol>\n<li><p>所有注释都是必要的吗？当然不是。注释不应该用来解释某些代码正在做什么。如果代码无法清楚到去解释自己时，那么代码需要变得更简单。有一些例外，比如正则表达式和复杂算法通常会从解释他们正在做什么事情的注释中获益很多。</p>\n</li>\n<li><p>注释用于解释为什么某些代码存在时很有用。大多数注释都是针对代码本身无法包含的信息，例如决策背后的推理、业务流程、业务逻辑、注意事项、防踩坑指南、参考链接。</p>\n</li>\n<li><p>注释即文档，需要持续更新维护，新陈代谢。文档也会过期，但不能因噎废食。即便文档过期，至少它记载了曾经的开发记录。</p>\n</li>\n</ol>\n<p>推荐阅读：</p>\n<ul>\n<li>开发者代码审查 review 指南：<a href=\"https://jimmysong.io/eng-practices/docs/review/\">https://jimmysong.io/eng-practices/docs/review/</a></li>\n</ul>\n<h2 id=\"JavaScript-输出语句\"><a href=\"#JavaScript-输出语句\" class=\"headerlink\" title=\"JavaScript 输出语句\"></a>JavaScript 输出语句</h2><h3 id=\"弹窗：alert-语句\"><a href=\"#弹窗：alert-语句\" class=\"headerlink\" title=\"弹窗：alert()语句\"></a>弹窗：alert()语句</h3><p>我们要学习的第一个语句，就是 alert 语句。</p>\n<p>代码举例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;千古壹号&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>alert</strong>（英文翻译为“警报”）的用途：<strong>弹出“警告框”</strong>。它会在弹窗中显示一条信息，并等待用户按下 “OK”。</p>\n<p><code>alert(&quot;&quot;)</code>弹窗的效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_1735.gif\"></p>\n<p>这个弹窗，在 IE 浏览器中长这样：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_1906.png\"></p>\n<p>上面的代码中，如果写了两个 alert()语句，则网页的效果是：弹出第一个警告框，点击确定后，继续弹出第二个警告框。</p>\n<h3 id=\"弹窗：confirm-语句（含确认-x2F-取消）\"><a href=\"#弹窗：confirm-语句（含确认-x2F-取消）\" class=\"headerlink\" title=\"弹窗：confirm()语句（含确认&#x2F;取消）\"></a>弹窗：confirm()语句（含确认&#x2F;取消）</h3><p>代码举例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = confirm(&#x27;你听说过千古壹号吗？&#x27;);</span><br><span class=\"line\">console.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>代码运行后，页面上会显示一个弹窗。弹窗上有“确认”和“取消”两个按钮，点击“确定”返回 <code>true</code>，点击“取消”返回 <code>false</code>。</p>\n<p>效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20211031-1537.gif\" alt=\"20211031-1537\"></p>\n<h3 id=\"弹出输入框：prompt-语句\"><a href=\"#弹出输入框：prompt-语句\" class=\"headerlink\" title=\"弹出输入框：prompt()语句\"></a>弹出输入框：prompt()语句</h3><p><code>prompt()</code>就是专门弹出能够让用户输入的对话框。用得少，测试的时候偶尔会用。</p>\n<p>JS 代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请随便输入点什么东西吧&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，用户输入的内容，将被传递到变量 a 里面，并在控制台打印出来。</p>\n<p>效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2230.gif\"></p>\n<p><strong>alert()和 prompt()的区别：</strong></p>\n<ul>\n<li>alert() 语句中可以输出数字和字符串，如果要输出字符串，则必须用引号括起来；prompt()语句中，用户不管输入什么内容，都是字符串。</li>\n<li>prompt() 会返回用户输入的内容。我们可以用一个变量，来接收用户输入的内容。</li>\n</ul>\n<h3 id=\"网页内容区域输出：document-write-语句\"><a href=\"#网页内容区域输出：document-write-语句\" class=\"headerlink\" title=\"网页内容区域输出：document.write()语句\"></a>网页内容区域输出：document.write()语句</h3><p>代码举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.write(&#x27;千古前端图文教程&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<p><img src=\"http://img.smyhvae.com/20211031_1543.png\" alt=\"20211031_1543\"></p>\n<h3 id=\"控制台输出：console-log-打印日志\"><a href=\"#控制台输出：console-log-打印日志\" class=\"headerlink\" title=\"控制台输出：console.log() 打印日志\"></a>控制台输出：console.log() 打印日志</h3><p><code>console.log()</code>表示在控制台中输出。console 表示“控制台”，log 表示“输出”。括号里可以写字符串、数字、变量。</p>\n<p>控制台是程序员调试程序的地方，比如使用 console 语句打印日志，测试程序是否运行正常。</p>\n<p>在 Chrome 浏览器中，按 F12 即可打开控制台，选择「console」栏，即可看到打印的内容。</p>\n<p><code>console.log(&quot;&quot;)</code>效果如下：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2008.gif\"></p>\n<p>console 语句可以设置不同的打印等级：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;千古壹号1&#x27;</span>); <span class=\"comment\">//普通打印</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;千古壹号2&#x27;</span>); <span class=\"comment\">//警告打印</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;千古壹号3&#x27;</span>); <span class=\"comment\">//错误打印</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"https://img.smyhvae.com/20211031_1552.png\" alt=\"20211031_1552\"></p>\n<p>上图中，不同的打印等级，区别不大，只是颜色背景上的区别，方便肉眼区分、过滤信息。</p>\n<p>普通人是不会在意控制台的，但是有些网站另藏玄机。比如百度首页的控制台，悄悄地放了一段招聘信息的彩蛋，挺有意思：</p>\n<p><img src=\"http://img.smyhvae.com/20180116_2010.png\"></p>\n<p>做前端开发时需要经常使用控制台做调试，我们甚至可以直接在控制台输入 JS 语句，然后打印执行结果。</p>\n<p><strong>总结</strong>：alert() 主要用来显示消息给用户，console.log() 用来给程序员做调试用。</p>\n","text":"开始写第一行 JavaScript：hello worldJS 代码的书写位置在哪里呢？引入 JS 代码，有哪几种方式？有三种方式：（和 CSS 的引入方式类似）行内式：写在标签内部。内嵌式（内联式）：写在 head 标签中。外链式：引入外部 JS 文件。方式 1：行内式代码举例","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"01-JavaScript简介","slug":"JavaScript/01-JavaScript简介","date":"2023-02-15T12:06:59.436Z","updated":"2023-02-15T12:10:20.552Z","comments":true,"path":"api/articles/JavaScript/01-JavaScript简介.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"JavaScript-历史和发展\"><a href=\"#JavaScript-历史和发展\" class=\"headerlink\" title=\"JavaScript 历史和发展\"></a>JavaScript 历史和发展</h2><p>Web 前端有三层：</p>\n<ul>\n<li><p>HTML：从语义的角度，描述页面<strong>结构</strong></p>\n</li>\n<li><p>CSS：从审美的角度，描述<strong>样式</strong>（美化页面）</p>\n</li>\n<li><p>JavaScript（简称 JS）：从交互的角度，描述<strong>行为</strong>（实现业务逻辑和页面控制）</p>\n</li>\n</ul>\n<h2 id=\"JavaScript-介绍\"><a href=\"#JavaScript-介绍\" class=\"headerlink\" title=\"JavaScript 介绍\"></a>JavaScript 介绍</h2><h3 id=\"JavaScript-入门易学性\"><a href=\"#JavaScript-入门易学性\" class=\"headerlink\" title=\"JavaScript 入门易学性\"></a>JavaScript 入门易学性</h3><ul>\n<li><p>JavaScript 对初学者比较友好。可以使用任何文本编辑工具编写，只需要浏览器就可以执行程序。</p>\n</li>\n<li><p>JavaScript 是有界面效果的（相比之下，C 语言只有白底黑字）。</p>\n</li>\n<li><p>JavaScript 的入门较简单（进阶不易）。比如，JS 是<strong>弱变量类型</strong>的语言，变量只需要用 var&#x2F;let&#x2F;const 来声明。而 Java 中变量的声明，要根据变量的类型来定义。</p>\n</li>\n</ul>\n<p>Java 中需要这样定义变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a;</span><br><span class=\"line\"><span class=\"type\">float</span> a;</span><br><span class=\"line\"><span class=\"type\">double</span> a;</span><br><span class=\"line\">String a;</span><br><span class=\"line\"><span class=\"type\">boolean</span> a;</span><br></pre></td></tr></table></figure>\n\n<p>而 JS 中，只需要用一种方式来定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6 写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaScript-既是前端语言，又是后端语言\"><a href=\"#JavaScript-既是前端语言，又是后端语言\" class=\"headerlink\" title=\"JavaScript 既是前端语言，又是后端语言\"></a>JavaScript 既是前端语言，又是后端语言</h3><p>当 JavaScript 运行在用户的终端网页，而不是运行在服务器上的时候，我们称之为“<strong>前端语言</strong>”。前端语言是服务于页面的显示和交互，不能直接操作数据库。</p>\n<p><strong>后端语言</strong>是运行在服务器上的，比如 Java、C++、PHP 等等，这些语言都能够操作数据库（对数据库进行“增删改查”），并在后台执行各种任务。</p>\n<p>另外，Node.js 是用 JavaScript 开发的，我们也可以用 Node.js 技术进行服务器端编程。</p>\n<h3 id=\"JavaScript-的组成\"><a href=\"#JavaScript-的组成\" class=\"headerlink\" title=\"JavaScript 的组成\"></a>JavaScript 的组成</h3><p>JavaScript 基础分为三个部分：</p>\n<ul>\n<li><p><strong>ECMAScript</strong>：JavaScript 的<strong>语法标准</strong>。包括变量、表达式、运算符、函数、if 语句、for 语句等。</p>\n</li>\n<li><p><strong>DOM</strong>：Document Object Model（文档对象模型），JS 操作<strong>页面上的元素</strong>（标签）的 API。比如让盒子移动、变色、改变大小、轮播图等等。</p>\n</li>\n<li><p><strong>BOM</strong>：Browser Object Model（浏览器对象模型），JS 操作<strong>浏览器部分功能</strong>的 API。通过 BOM 可以操作浏览器窗口，比如弹框、控制浏览器跳转、获取浏览器分辨率等等。</p>\n</li>\n</ul>\n<p>通俗理解就是：ECMAScript 是 JS 的语法；DOM 和 BOM 是浏览器运行环境为 JS 提供的 API。</p>\n<h2 id=\"JavaScript-的特点\"><a href=\"#JavaScript-的特点\" class=\"headerlink\" title=\"JavaScript 的特点\"></a>JavaScript 的特点</h2><h3 id=\"特点-1：解释型语言\"><a href=\"#特点-1：解释型语言\" class=\"headerlink\" title=\"特点 1：解释型语言\"></a>特点 1：解释型语言</h3><p>JavaScript 简称 JS，是前端开发的一门脚本语言（解释型语言）。</p>\n<p><strong>解释型语言</strong>的意思是：程序执行之前，不需要事先被翻译为机器码；而是在运行时，边翻译边执行（翻译一行，执行一行）。关于解释型语言的详细介绍，上一篇文章有介绍。</p>\n<p>为什么 JS 是解释型语言呢？这和浏览器的工作原理有关。浏览器中有一个专门的“JS 解析器”可以让 JS 边解析边执行。</p>\n<p>由于少了事先编译这一步骤，所以解释型语言开发起来尤为方便，但是解释型语言运行较慢也是它的劣势。不过解释型语言中使用了 JIT 技术，使得运行速度得以改善。</p>\n<h3 id=\"特点-2：单线程\"><a href=\"#特点-2：单线程\" class=\"headerlink\" title=\"特点 2：单线程\"></a>特点 2：单线程</h3><h3 id=\"特点-3：ECMAScript-标准\"><a href=\"#特点-3：ECMAScript-标准\" class=\"headerlink\" title=\"特点 3：ECMAScript 标准\"></a>特点 3：ECMAScript 标准</h3><p>ECMAScript 是一种由 ECMA 国际（前身为欧洲计算机制造商协会,英文名称是 European Computer Manufacturers Association）制定和发布的脚本语言规范。</p>\n<p>JavaScript 是由公司开发而成的，问题是不便于其他的公司拓展和使用。所以欧洲的这个 ECMA 的组织，牵头制定 JavaScript 的标准，取名为 ECMAScript。</p>\n<p>简单来说，<strong>ECMAScript 不是一门语言，而是一个标准</strong>。ECMAScript 规定了 JS 的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套 JS 语法工业标准。</p>\n<p>ECMAScript 在 2015 年 6 月，发布了 ECMAScript 6 版本（ES6），语言的能力更强，包含了很多新特性），但也要考虑它的浏览器兼容性问题。</p>\n<p>ECMA 赋予了 JavaScript 新的能力和活力。</p>\n","text":"JavaScript 历史和发展Web 前端有三层：HTML：从语义的角度，描述页面结构CSS：从审美的角度，描述样式（美化页面）JavaScript（简称 JS）：从交互的角度，描述行为（实现业务逻辑和页面控制）JavaScript 介绍JavaScript 入门易学性Java","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"00-编程语言简介","slug":"JavaScript/00-编程语言简介","date":"2023-02-15T12:06:59.435Z","updated":"2023-02-15T12:09:27.178Z","comments":true,"path":"api/articles/JavaScript/00-编程语言简介.json","excerpt":"","keywords":null,"cover":"https://img.smyhvae.com/20211030-0031-2.png","content":"<h2 id=\"编程语言的概念\"><a href=\"#编程语言的概念\" class=\"headerlink\" title=\"编程语言的概念\"></a>编程语言的概念</h2><h3 id=\"编程\"><a href=\"#编程\" class=\"headerlink\" title=\"编程\"></a>编程</h3><p><strong>编程</strong>：让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</p>\n<p><strong>计算机程序</strong>：就是计算机所执行的一系列的<strong>指令集合</strong>，而程序全部都是用我们所掌握的语言来编写的，所以人们如果要控制计算机，则需要通过计算机语言向计算机发出命令。</p>\n<h3 id=\"计算机语言\"><a href=\"#计算机语言\" class=\"headerlink\" title=\"计算机语言\"></a>计算机语言</h3><p><strong>计算机语言</strong>：人与计算机之间通讯的语言。它是人与计算机之间传递信息的媒介，用来控制计算机的一系列指令。</p>\n<p>计算机语言的种类非常的多，总的来说可以分成三大类：机器语言、汇编语言和高级语言。</p>\n<p>计算机最终所执行的都是机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</p>\n<h3 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h3><p>通过类似于人类语言的 ”语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言。不同的编程语言，有不同的语法，必须遵守。</p>\n<p>如今通用的编程语言有两种形式：汇编语言和高级语言。</p>\n<ul>\n<li><p><strong>汇编语言</strong>：与机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</p>\n</li>\n<li><p><strong>高级语言</strong>：主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，比如：C 语言、C++、Java、C#、PHP、JavaScript、Python、Objective-C、Swift、Go 语言等。</p>\n</li>\n</ul>\n<h2 id=\"编程语言的分类\"><a href=\"#编程语言的分类\" class=\"headerlink\" title=\"编程语言的分类\"></a>编程语言的分类</h2><h3 id=\"翻译器\"><a href=\"#翻译器\" class=\"headerlink\" title=\"翻译器\"></a>翻译器</h3><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所编写的高级语言翻译成机器语言，计算机才能执行程序。为此，我们需要一个翻译器。<strong>程序语言翻译成机器语言的工具，被称为翻译器</strong>。</p>\n<p>由此可见，所谓的“翻译”，指的是将人类所编写的源代码转换（翻译）为机器能够执行的指令，这也被称为二进制化。</p>\n<p>翻译器翻译的方式有两种：一种是<strong>编译</strong>，另一种是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译的时机</strong>不同。</p>\n<ul>\n<li><p><strong>编译器</strong>：在代码执行之前，事前把所有的代码一次性翻译好，生成中间代码文件，然后整体执行。</p>\n</li>\n<li><p><strong>解释器</strong>：边翻译，边执行（在代码执行时进行及时翻译，并立即执行）。当编译器以解释的方式运行时，也称之为解释器。</p>\n</li>\n</ul>\n<p>对应的语言，称之为“编译型语言”、“解释型语言”。</p>\n<h3 id=\"1、编译型语言\"><a href=\"#1、编译型语言\" class=\"headerlink\" title=\"1、编译型语言\"></a>1、编译型语言</h3><ul>\n<li><p>定义：需要事先通过编译器<strong>把所有的代码一次性翻译（编译&#x2F;转换）好</strong>，然后整体执行。比如 exe 文件。</p>\n</li>\n<li><p>优点：执行效率高，运行更快。</p>\n</li>\n<li><p>不足：移植性不好，不跨平台；编译之后如果需要修改就需要整个模块重新编译。</p>\n</li>\n<li><p>编译型语言举例：C、C++</p>\n</li>\n</ul>\n<p>比如说，c 语言的代码文件是<code>.c</code>后缀，翻译之后文件是<code>.obj</code>后缀，系统执行的是 obj 文件；再比如， java 语言的代码文件是<code>.java</code>后缀，翻译之后的文件是<code>.class</code>后缀。（但是，Java 语言不是严格的 编译型语言，这个一会儿会讲）</p>\n<p>以 C 语言的<code>hello.c</code>来举例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于以上 C 代码，main 是程序入口，实现的功能是打印字符串<code>hello world</code>到屏幕上，编译和执行过程如下：</p>\n<ol>\n<li>C 语言代码经过预处理（比如依赖处理、宏替换）。以上方代码示例，<code>#include&lt;stdio.h&gt;</code>会在预处理阶段被替换。</li>\n<li>编译：编译器会把 C 语言翻译成汇编程序。一条 C 语言通常被编译为多条汇编代码，同时编译器会对程序进行优化，生成目标汇编程序。</li>\n<li>汇编语言通过汇编器再汇编成目标程序<code>hello.o</code>。</li>\n<li>链接：程序中往往包含一些共享目标文件，如示例代码中的<code>printf()</code>函数位于静态库，需要经过链接器进行链接。</li>\n</ol>\n<p><img src=\"https://img.smyhvae.com/20211030-0031-2.png\" alt=\"20211030-0031-2\"></p>\n<p>（上方图片的来源：<a href=\"https://www.jianshu.com/p/230093183f47\">JavaScript 基础-基本概念</a> ）</p>\n<p><img src=\"http://img.smyhvae.com/20211030-0026-2.png\" alt=\"20211030-0026-2\"></p>\n<p>（上方图片的来源：<a href=\"https://p.0x06.cn/zh/program/\">编译型语言</a> ）</p>\n<h3 id=\"2、解释型语言\"><a href=\"#2、解释型语言\" class=\"headerlink\" title=\"2、解释型语言\"></a>2、解释型语言</h3><ul>\n<li><p>定义：在运行过程中（runtime）通过解释器<strong>边翻译边执行</strong>（也就是逐行翻译：翻译一行，执行一行），不需要事先一次性翻译。</p>\n</li>\n<li><p>优点：移植性好，跨平台。</p>\n</li>\n<li><p>缺点：运行速度不如编译型语言。</p>\n</li>\n<li><p>解释型语言举例：JavaScript、PHP、Python。</p>\n</li>\n</ul>\n<h3 id=\"Java-语言\"><a href=\"#Java-语言\" class=\"headerlink\" title=\"Java 语言\"></a>Java 语言</h3><p>Java 语言是属于半编译半解释型语言。</p>\n<p>翻译过程：</p>\n<p>（1）编译：<code>.java</code>代码文件先通过 javac 命令编译成<code>.class</code>文件。</p>\n<p>（2）执行：<code>.class</code>文件再通过 jvm 虚拟机，解释执行。有了 jvm 的存在，让 java 跨平台了。</p>\n","text":"编程语言的概念编程编程：让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。计算机程序：就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们如果要控制计算机，则需要通过计算机语言向计算机发出命令。计算机语言计算机语言：","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"19-数组的常见方法","slug":"JavaScript/19-数组的常见方法","date":"2023-02-15T12:06:59.432Z","updated":"2023-02-15T12:26:51.717Z","comments":true,"path":"api/articles/JavaScript/19-数组的常见方法.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180402_1116.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"数组的方法清单\"><a href=\"#数组的方法清单\" class=\"headerlink\" title=\"数组的方法清单\"></a>数组的方法清单</h2><h3 id=\"数组的类型相关\"><a href=\"#数组的类型相关\" class=\"headerlink\" title=\"数组的类型相关\"></a>数组的类型相关</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Array.isArray()</td>\n<td align=\"left\">判断是否为数组</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">toString()</td>\n<td align=\"left\">将数组转换为字符串</td>\n<td align=\"left\">不会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">join()</td>\n<td align=\"left\">将数组转换为字符串，返回结果为<strong>转换后的字符串</strong></td>\n<td align=\"left\">不会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">字符串的方法：split()</td>\n<td align=\"left\">将字符串按照指定的分隔符，组装为数组</td>\n<td align=\"left\">不会改变原字符串</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Array.from(arrayLike)</td>\n<td align=\"left\">将<strong>伪数组</strong>转化为<strong>真数组</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Array.of(value1, value2, value3)</td>\n<td align=\"left\">创建数组：将<strong>一系列值</strong>转换成数组</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<p>（1）获取数组的长度是用<code>length</code>属性，不是方法。关于 <code>length</code>属性，详见上一篇文章。</p>\n<p>（2）<code>split()</code>是字符串的方法，不是数组的方法。</p>\n<h3 id=\"数组元素的添加和删除\"><a href=\"#数组元素的添加和删除\" class=\"headerlink\" title=\"数组元素的添加和删除\"></a>数组元素的添加和删除</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">push()</td>\n<td align=\"left\">向数组的<strong>最后面</strong>插入一个或多个元素，返回结果为新数组的<strong>长度</strong></td>\n<td align=\"left\">会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">pop()</td>\n<td align=\"left\">删除数组中的<strong>最后一个</strong>元素，返回结果为<strong>被删除的元素</strong></td>\n<td align=\"left\">会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">unshift()</td>\n<td align=\"left\">在数组<strong>最前面</strong>插入一个或多个元素，返回结果为新数组的<strong>长度</strong></td>\n<td align=\"left\">会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">shift()</td>\n<td align=\"left\">删除数组中的<strong>第一个</strong>元素，返回结果为<strong>被删除的元素</strong></td>\n<td align=\"left\">会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">splice()</td>\n<td align=\"left\">从数组中<strong>删除</strong>指定的一个或多个元素，返回结果为<strong>被删除元素组成的新数组</strong></td>\n<td align=\"left\">会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">slice()</td>\n<td align=\"left\">从数组中<strong>提取</strong>指定的一个或多个元素，返回结果为<strong>新的数组</strong></td>\n<td align=\"left\">不会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">concat()</td>\n<td align=\"left\">合并数组：连接两个或多个数组，返回结果为<strong>新的数组</strong></td>\n<td align=\"left\">不会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">fill()</td>\n<td align=\"left\">填充数组：用固定的值填充数组，返回结果为<strong>新的数组</strong></td>\n<td align=\"left\">会改变原数组</td>\n</tr>\n</tbody></table>\n<h3 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">reverse()</td>\n<td align=\"left\">反转数组，返回结果为<strong>反转后的数组</strong></td>\n<td align=\"left\">会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">sort()</td>\n<td align=\"left\">对数组的元素,默认按照<strong>Unicode 编码</strong>，从小到大进行排序</td>\n<td align=\"left\">会改变原数组</td>\n</tr>\n</tbody></table>\n<h3 id=\"查找数组的元素\"><a href=\"#查找数组的元素\" class=\"headerlink\" title=\"查找数组的元素\"></a>查找数组的元素</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">indexOf(value)</td>\n<td align=\"left\">从前往后索引，检索一个数组中是否含有指定的元素</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">lastIndexOf(value)</td>\n<td align=\"left\">从后往前索引，检索一个数组中是否含有指定的元素</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">includes(item)</td>\n<td align=\"left\">数组中是否包含指定的内容</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">find(function())</td>\n<td align=\"left\">找出<strong>第一个</strong>满足「指定条件返回 true」的元素</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">findIndex(function())</td>\n<td align=\"left\">找出<strong>第一个</strong>满足「指定条件返回 true」的元素的 index</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">every()</td>\n<td align=\"left\">确保数组中的每个元素都满足「指定条件返回 true」，则停止遍历，此方法才返回 true</td>\n<td align=\"left\">全真才为真。要求每一项都返回 true，最终的结果才返回 true</td>\n</tr>\n<tr>\n<td align=\"left\">some()</td>\n<td align=\"left\">数组中只要有一个元素满足「指定条件返回 true」，则停止遍历，此方法就返回 true</td>\n<td align=\"left\">一真即真。只要有一项返回 true，最终的结果就返回 true</td>\n</tr>\n</tbody></table>\n<h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">for 循环</td>\n<td align=\"left\">最传统的方式遍历数组，这个大家都懂</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">forEach()</td>\n<td align=\"left\">遍历数组，但需要兼容 IE8 以上</td>\n<td align=\"left\">不会改变原数组。forEach() 没有返回值。也就是说，它的返回值是 undefined</td>\n</tr>\n<tr>\n<td align=\"left\">for of</td>\n<td align=\"left\">遍历数组（ES6语法）</td>\n<td align=\"left\">不会改变原数组。另外，不要使用 for in 遍历数组</td>\n</tr>\n<tr>\n<td align=\"left\">map()</td>\n<td align=\"left\">对原数组中的每一项进行加工，将组成新的数组</td>\n<td align=\"left\">不会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">filter()</td>\n<td align=\"left\">过滤数组：返回结果是 true 的项，将组成新的数组，返回结果为<strong>新的数组</strong></td>\n<td align=\"left\">不会改变原数组</td>\n</tr>\n<tr>\n<td align=\"left\">reduce</td>\n<td align=\"left\">接收一个函数作为累加器，返回值是回调函数累计处理的结果</td>\n<td align=\"left\">比较复杂</td>\n</tr>\n</tbody></table>\n<h2 id=\"isArray-：判断是否为数组\"><a href=\"#isArray-：判断是否为数组\" class=\"headerlink\" title=\"isArray()：判断是否为数组\"></a>isArray()：判断是否为数组</h2><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(被检测的数组);</span><br></pre></td></tr></table></figure>\n\n<p>以前，我们会通过 <code>A instanceof B</code>来判断 A 是否属于 B 类型。但是在数组里，这种 instanceof 方法已经用的不多了，因为有 isArray()方法。</p>\n<h2 id=\"数组转换为字符串\"><a href=\"#数组转换为字符串\" class=\"headerlink\" title=\"数组转换为字符串\"></a>数组转换为字符串</h2><p>数组转为字符串，有三种方式。</p>\n<h3 id=\"方式1、toString\"><a href=\"#方式1、toString\" class=\"headerlink\" title=\"方式1、toString()\"></a>方式1、toString()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\">字符串 = 数组.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>].<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 转换结果 result 为字符串 &#x27;1, 3, 5&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：把数组转换成字符串，每一项用英文逗号<code>,</code>分割。</p>\n<p>备注：大多数的数据类型都可以使用<code>.toString()</code>方法，将其转换为字符串。</p>\n<h3 id=\"方式-2\"><a href=\"#方式-2\" class=\"headerlink\" title=\"方式 2\"></a>方式 2</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\">字符串 = <span class=\"title class_\">String</span>(数组);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title class_\">String</span>([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// 转换结果 result 为字符串 &#x27;1, 3, 5&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式-3：join-方法\"><a href=\"#方式-3：join-方法\" class=\"headerlink\" title=\"方式 3：join()方法\"></a>方式 3：join()方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 = 数组.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>); <span class=\"comment\">// 将数组转为字符串，每一项用 英文逗号 分隔</span></span><br></pre></td></tr></table></figure>\n\n<p>关于 join()方法的详细介绍，详见下一段。</p>\n<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h2><p><code>join()</code>：将数组转换为字符串，返回结果为<strong>转换后的字符串</strong>（不会改变原来的数组）。</p>\n<p>补充：<code>join()</code>方法可以指定一个<strong>字符串</strong>作为参数，这个参数是元素之间的<strong>连接符</strong>；如果不指定连接符，则默认使用英文逗号<code>,</code> 作为连接符，此时和 <code>toString()的</code>效果是一致的。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的字符串 = 原数组.<span class=\"title function_\">join</span>(参数); <span class=\"comment\">// 参数选填</span></span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = arr.<span class=\"title function_\">join</span>(); <span class=\"comment\">// 这里没有指定连接符，所以默认使用 , 作为连接符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = arr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;-&#x27;</span>); <span class=\"comment\">// 使用指定的字符串作为连接符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> arr); <span class=\"comment\">// 打印结果：object</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> result1); <span class=\"comment\">// 打印结果：string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result1：&#x27;</span> + result1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result2：&#x27;</span> + result2);</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，最后三行的打印结果是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr =[<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\">result1:a,b,c</span><br><span class=\"line\">result2:a-b-c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h2><blockquote>\n<p>注意，<code>split()</code>是字符串的方法，不是数组的方法。</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的数组 = str.<span class=\"title function_\">split</span>(分隔符);</span><br></pre></td></tr></table></figure>\n\n<p>解释：通过指定的分隔符，将一个字符串拆分成一个<strong>数组</strong>。不会改变原字符串。</p>\n<p>备注：<code>split()</code>这个方法在实际开发中用得非常多。一般来说，从接口拿到的 json 数据中，经常会收到类似于<code>&quot;q, i, a, n&quot;</code>这样的字符串，前端需要将这个字符串拆分成<code>[&#39;q&#39;, &#39;i&#39;, &#39;a&#39;, &#39;n&#39;]</code>数组，这个时候<code>split()</code>方法就派上用场了。</p>\n<h2 id=\"Array-from-：将伪数组转换为真数组\"><a href=\"#Array-from-：将伪数组转换为真数组\" class=\"headerlink\" title=\"Array.from()：将伪数组转换为真数组\"></a>Array.from()：将伪数组转换为真数组</h2><p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<p><strong>作用</strong>：将<strong>伪数组</strong>或可遍历对象转换为<strong>真数组</strong>。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(name)); <span class=\"comment\">// 打印结果是数组：[&quot;q&quot;,&quot;i&quot;,&quot;a&quot;,&quot;n&quot;,&quot;g&quot;,&quot;u&quot;,&quot;y&quot;,&quot;i&quot;,&quot;h&quot;,&quot;a&quot;,&quot;o&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"伪数组与真数组的区别\"><a href=\"#伪数组与真数组的区别\" class=\"headerlink\" title=\"伪数组与真数组的区别\"></a>伪数组与真数组的区别</h3><p><strong>伪数组</strong>：包含 length 属性的对象或可迭代的对象。</p>\n<p>另外，伪数组的原型链中没有 Array.prototype，而真数组的原型链中有 Array.prototype。因此伪数组没有数组的一般方法，比如 pop()、join() 等方法。</p>\n<h3 id=\"伪数组举例\"><a href=\"#伪数组举例\" class=\"headerlink\" title=\"伪数组举例\"></a>伪数组举例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> btnArray = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;button&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(btnArray);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(btnArray[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的布局中，有三个 button 标签，我们通过<code>getElementsByTagName</code>获取到的<code>btnArray</code>实际上是<strong>伪数组</strong>，并不是真实的数组：</p>\n<p><img src=\"http://img.smyhvae.com/20180402_1116.png\"></p>\n<p>既然<code>btnArray</code>是伪数组，它就不能使用数组的一般方法，否则会报错：</p>\n<p><img src=\"http://img.smyhvae.com/20180402_1121.png\"></p>\n<p>解决办法：采用<code>Array.from</code>方法将<code>btnArray</code>这个伪数组转换为真数组即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(btnArray);</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以使用数组的一般方法了：</p>\n<p><img src=\"http://img.smyhvae.com/20180402_1125.png\"></p>\n<h2 id=\"Array-of-：创建数组\"><a href=\"#Array-of-：创建数组\" class=\"headerlink\" title=\"Array.of()：创建数组\"></a>Array.of()：创建数组</h2><p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(value1, value2, value3);</span><br></pre></td></tr></table></figure>\n\n<p><strong>作用</strong>：根据参数里的内容，创建数组。</p>\n<p><strong>举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">of</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;abc&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// 打印结果是数组：[1, &quot;abc&quot;, true]</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：<code>new Array()</code>和 <code>Array.of()</code>的区别在于：当参数只有一个时，前者表示数组的长度，后者表示数组中的内容。</p>\n<h2 id=\"数组元素的添加和删除-1\"><a href=\"#数组元素的添加和删除-1\" class=\"headerlink\" title=\"数组元素的添加和删除\"></a>数组元素的添加和删除</h2><h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h3><p><code>push()</code>：向数组的<strong>最后面</strong>插入一个或多个元素，返回结果为新数组的<strong>长度</strong>。会改变原数组，因为原数组变成了新数组。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新数组的长度 = 数组.<span class=\"title function_\">push</span>(元素);</span><br><span class=\"line\">新数组的长度 = 数组.<span class=\"title function_\">push</span>(元素<span class=\"number\">1</span>，元素<span class=\"number\">2</span> ...);</span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;王一&#x27;</span>, <span class=\"string\">&#x27;王二&#x27;</span>, <span class=\"string\">&#x27;王三&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = arr.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;王四&#x27;</span>); <span class=\"comment\">// 末尾插入一个元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = arr.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;王六&#x27;</span>); <span class=\"comment\">// 末尾插入多个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr)); <span class=\"comment\">// 打印结果：[&quot;王一&quot;,&quot;王二&quot;,&quot;王三&quot;,&quot;王四&quot;,&quot;王五&quot;,&quot;王六&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 打印结果：4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 打印结果：6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h3><p><code>pop()</code>：删除数组中的<strong>最后一个</strong>元素，返回结果为<strong>被删除的元素</strong>。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">被删除的元素 = 数组.<span class=\"title function_\">pop</span>();</span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;王一&#x27;</span>, <span class=\"string\">&#x27;王二&#x27;</span>, <span class=\"string\">&#x27;王三&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = arr.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr)); <span class=\"comment\">// 打印结果：[&quot;王一&quot;,&quot;王二&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 打印结果：王三</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><p><code>unshift()</code>：在数组<strong>最前面</strong>插入一个或多个元素，返回结果为新数组的<strong>长度</strong>。会改变原数组，将原数组变成了新数组。插入元素后，其他元素的索引会依次调整。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新数组的长度 = 数组.<span class=\"title function_\">unshift</span>(元素);</span><br><span class=\"line\">新数组的长度 = 数组.<span class=\"title function_\">unshift</span>(元素<span class=\"number\">1</span>，元素<span class=\"number\">2.</span>..);</span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;王一&#x27;</span>, <span class=\"string\">&#x27;王二&#x27;</span>, <span class=\"string\">&#x27;王三&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = arr.<span class=\"title function_\">unshift</span>(<span class=\"string\">&#x27;王四&#x27;</span>); <span class=\"comment\">// 最前面插入一个元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = arr.<span class=\"title function_\">unshift</span>(<span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;王六&#x27;</span>); <span class=\"comment\">// 最前面插入多个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr)); <span class=\"comment\">// 打印结果：[&quot;王五&quot;,&quot;王六&quot;,&quot;王四&quot;,&quot;王一&quot;,&quot;王二&quot;,&quot;王三&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 打印结果：4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 打印结果：6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h3><p><code>shift()</code>：删除数组中的<strong>第一个</strong>元素，返回结果为<strong>被删除的元素</strong>。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">被删除的元素 = 数组.<span class=\"title function_\">shift</span>();</span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;王一&#x27;</span>, <span class=\"string\">&#x27;王二&#x27;</span>, <span class=\"string\">&#x27;王三&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = arr.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr)); <span class=\"comment\">// 打印结果：[&quot;王二&quot;,&quot;王三&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 打印结果：王一</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><p><code>splice()</code>：从数组中<strong>删除</strong>指定的一个或多个元素，返回结果为<strong>被删除元素组成的新数组</strong>（会改变原来的数组）。</p>\n<p>备注：该方法会改变原数组，会将指定元素从原数组中删除；被删除的元素会封装到一个新的数组中返回。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新数组 = 原数组.<span class=\"title function_\">splice</span>(起始索引index);</span><br><span class=\"line\"></span><br><span class=\"line\">新数组 = 原数组.<span class=\"title function_\">splice</span>(起始索引index, 需要删除的个数);</span><br><span class=\"line\"></span><br><span class=\"line\">新数组 = 原数组.<span class=\"title function_\">splice</span>(起始索引index, 需要删除的个数, 新的元素<span class=\"number\">1</span>, 新的元素<span class=\"number\">2.</span>..);</span><br></pre></td></tr></table></figure>\n\n<p>上方语法中，第三个及之后的参数，表示：删除元素之后，向原数组中添加新的元素，这些元素将会自动插入到起始位置索引的前面。也可以理解成：删除了哪些元素，就在那些元素的所在位置补充新的内容。</p>\n<p><code>slice()</code>方法和<code>splice()</code>方法很容易搞混，请一定要注意区分。</p>\n<p>举例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = arr1.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>); <span class=\"comment\">//从第index为1的位置开始，删除元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr1：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result1：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result1));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1：[&quot;a&quot;]</span><br><span class=\"line\">result1：[&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>举例 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = arr2.<span class=\"title function_\">splice</span>(-<span class=\"number\">2</span>); <span class=\"comment\">//删除最后两个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr2：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result2：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result2));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr2：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br><span class=\"line\">result2：[&quot;e&quot;,&quot;f&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>举例 3：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result3 = arr3.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">//从第index为1的位置开始删除元素，一共删除三个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr3：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr3));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result3：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result3));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr3：[&quot;a&quot;,&quot;e&quot;,&quot;f&quot;]</span><br><span class=\"line\">result3：[&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>举例4：（删除指定元素，用得很多）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr4 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\">arr4.<span class=\"title function_\">splice</span>(arr4.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;c&#x27;</span>), <span class=\"number\">1</span>); <span class=\"comment\">// 删除数组中的&#x27;c&#x27;这个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr4：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr4));</span><br></pre></td></tr></table></figure>\n\n\n<p>举例 5：（<strong>第三个参数</strong>的用法）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr5 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从第index为1的位置开始删除元素,一共删除三个元素。并且在index=1的位置前面追加两个元素&quot;千古壹号&quot;、&quot;vae&quot;（其实就是将index为1的元素改为&quot;千古壹号&quot;，index为2的元素改为&quot;vae&quot;）。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result5 = arr5.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"string\">&#x27;vae&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr5：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr5));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result5：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result5));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr5：[<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;千古壹号&quot;</span>,<span class=\"string\">&quot;vae&quot;</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"string\">&quot;f&quot;</span>]</span><br><span class=\"line\">result5：[<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>,<span class=\"string\">&quot;d&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>我们再看个类似的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需求：针对数组 [a, b, c, d] 将索引为1的数据修改为e, 索引为2的修改为f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法1：普通写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [a, b, c ,d];</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;e&#x27;</span>;</span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;f&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法2：通过 splice() 实现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [a, b, c ,d];</span><br><span class=\"line\">arr.<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h3><p><code>concat()</code>：连接两个或多个数组，返回结果为<strong>新的数组</strong>。不会改变原数组。<code>concat()</code>方法的作用是<strong>数组合并</strong>。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新数组 = 数组<span class=\"number\">1.</span><span class=\"title function_\">concat</span>(数组<span class=\"number\">2</span>, 数组<span class=\"number\">3</span> ...);</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = [<span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"string\">&#x27;vae&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = arr1.<span class=\"title function_\">concat</span>(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = arr2.<span class=\"title function_\">concat</span>(arr1, arr3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr1 =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr2 =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr3 =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr3));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result1 =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result1));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result2 =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result2));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">arr2 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">arr3 = [<span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"string\">&#x27;vae&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">result1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">result2 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"string\">&#x27;vae&#x27;</span>];</span><br></pre></td></tr></table></figure>\n\n<p>从打印结果中可以看到，原数组并没有被修改。</p>\n<p><strong>数组合并的另一种方式</strong>：</p>\n<p>我们可以使用<code>...</code>这种扩展运算符，将两个数组进行合并。举例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, ...arr1];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result)); <span class=\"comment\">// 打印结果：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,1,2,3]</span></span><br></pre></td></tr></table></figure>\n\n<p>备注：数组不能使用加号进行拼接。如果使用加号进行拼接会先转换成字符串再拼接。</p>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><p><code>slice()</code>：从数组中<strong>提取</strong>指定的一个或者多个元素，返回结果为<strong>新的数组</strong>（不会改变原来的数组）。</p>\n<p>备注：该方法不会改变原数组，而是将截取到的元素封装到一个新数组中返回。</p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新数组 = 原数组.<span class=\"title function_\">slice</span>(开始位置的索引);</span><br><span class=\"line\"></span><br><span class=\"line\">新数组 = 原数组.<span class=\"title function_\">slice</span>(开始位置的索引, 结束位置的索引);  <span class=\"comment\">//注意：提取的元素中，包含开始位置，不包含结束位置</span></span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = arr.<span class=\"title function_\">slice</span>(); <span class=\"comment\">// 不加参数时，则获取所有的元素。相当于数组的整体赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 从第二个值开始提取，直到末尾</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result3 = arr.<span class=\"title function_\">slice</span>(-<span class=\"number\">2</span>); <span class=\"comment\">// 提取最后两个元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result4 = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 提取从第二个到第四个之间的元素（不包括第四个元素）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result5 = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">4</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 空</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result1:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result1));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result2:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result2));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result3:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result3));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result4:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result4));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result5:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result5));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">arr</span>: [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"attr\">result1</span>: [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"attr\">result2</span>: [<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"attr\">result3</span>: [<span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"><span class=\"attr\">result4</span>: [<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"><span class=\"attr\">result5</span>: [];</span><br></pre></td></tr></table></figure>\n\n<p><strong>补充</strong>：</p>\n<p>很多前端开发人员会用 slice()将伪数组，转化为真数组。写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式1</span></span><br><span class=\"line\">array = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrayLike);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式2</span></span><br><span class=\"line\">array = [].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<p>ES6 看不下去这种蹩脚的转化方法，于是出了一个新的 API：（专门用来将伪数组转化成真数组）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<p>关于这个 API 的详细介绍，上面的内容已经讲了，请往前翻。</p>\n<h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h3><p><code>fill()</code>：用一个固定值填充数组，返回结果为<strong>新的数组</strong>。会改变原数组。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用一个固定值填充数组。数组里的每个元素都会被这个固定值填充</span></span><br><span class=\"line\">新数组 = 数组.<span class=\"title function_\">fill</span>(固定值);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 startIndex 开始的数组元素，用固定值填充</span></span><br><span class=\"line\">新数组 = 数组.<span class=\"title function_\">fill</span>(固定值, startIndex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 startIndex 到 endIndex 之间的元素（包左不包右），用固定值填充</span></span><br><span class=\"line\">新数组 = 数组.<span class=\"title function_\">fill</span>(固定值, startIndex, endIndex);</span><br></pre></td></tr></table></figure>\n\n<p>举例1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个长度为4的空数组，然后用 &#x27;f&#x27; 来填充这个空数组</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>(<span class=\"number\">4</span>).<span class=\"title function_\">fill</span>(<span class=\"string\">&#x27;f&#x27;</span>)); <span class=\"comment\">// [&#x27;f&#x27;, &#x27;f&#x27;, &#x27;f,&#x27; &#x27;f&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将现有数组的每一个元素都进行填充</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>].<span class=\"title function_\">fill</span>(<span class=\"string\">&#x27;f&#x27;</span>)); <span class=\"comment\">// [&#x27;f&#x27;, &#x27;f&#x27;, &#x27;f,&#x27; &#x27;f&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>举例2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定位置进行填充</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr1.<span class=\"title function_\">fill</span>(<span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1); <span class=\"comment\">// [&#x27;a&#x27;, &#x27;f&#x27;, &#x27;f,&#x27; &#x27;d&#x27;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2); <span class=\"comment\">// [&#x27;a&#x27;, &#x27;f&#x27;, &#x27;f,&#x27; &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h2><p><code>reverse()</code>：反转数组，返回结果为<strong>反转后的数组</strong>（会改变原来的数组）。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">反转后的数组 = 数组.<span class=\"title function_\">reverse</span>();</span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.<span class=\"title function_\">reverse</span>(); <span class=\"comment\">// 将数组 arr 进行反转</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr =[&quot;f&quot;,&quot;e&quot;,&quot;d&quot;,&quot;c&quot;,&quot;b&quot;,&quot;a&quot;]</span><br><span class=\"line\">result =[&quot;f&quot;,&quot;e&quot;,&quot;d&quot;,&quot;c&quot;,&quot;b&quot;,&quot;a&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>从打印结果可以看出，原来的数组已经被改变了。</p>\n<h2 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h2><blockquote>\n<p>sort()方法需要好好理解。</p>\n</blockquote>\n<p><code>sort()</code>：对数组的元素进行从小到大来排序（会改变原来的数组）。</p>\n<h3 id=\"无参时\"><a href=\"#无参时\" class=\"headerlink\" title=\"无参时\"></a>无参时</h3><p>如果在使用 sort() 方法时不带参，则默认按照元素的<strong>Unicode 编码</strong>，从小到大进行排序。</p>\n<p><strong>举例 1</strong>：（当数组中的元素为字符串时）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr1.<span class=\"title function_\">sort</span>(); <span class=\"comment\">// 将数组 arr1 进行排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr1 =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1 =[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;]</span><br><span class=\"line\">result =[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>从上方的打印结果中，我们可以看到，sort 方法会改变原数组，而且方法的返回值也是同样的结果。</p>\n<p><strong>举例 2</strong>：（当数组中的元素为数字时）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr2.<span class=\"title function_\">sort</span>(); <span class=\"comment\">// 将数组 arr2 进行排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr2 =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr2 =[1,11,2,3,4,5]</span><br><span class=\"line\">result =[1,11,2,3,4,5]</span><br></pre></td></tr></table></figure>\n\n<p>上方的打印结果中，你会发现，使用 sort() 排序后，数字<code>11</code>竟然在数字<code>2</code>的前面。这是为啥呢？因为上面讲到了，<code>sort()</code>方法是按照<strong>Unicode 编码</strong>进行排序的。</p>\n<p>那如果我想让 arr2 里的数字，完全按照从小到大排序，怎么操作呢？继续往下看。</p>\n<h3 id=\"带参时，自定义排序规则\"><a href=\"#带参时，自定义排序规则\" class=\"headerlink\" title=\"带参时，自定义排序规则\"></a>带参时，自定义排序规则</h3><p>如果在 sort()方法中带参，我们就可以<strong>自定义</strong>排序规则。具体做法如下：</p>\n<p>我们可以在 sort()的参数中添加一个回调函数，来指定排序规则。回调函数中需要定义两个形参，JS将会分别使用数组中的元素作为实参去调用回调函数。</p>\n<p>JS根据回调函数的返回值来决定元素的排序：（重要）</p>\n<ul>\n<li><p>如果返回一个大于 0 的值，则元素会交换位置</p>\n</li>\n<li><p><strong>如果返回一个小于 0 的值，则不交换位置</strong>。</p>\n</li>\n<li><p>如果返回一个等于 0 的值，则认为两个元素相等，则不交换位置</p>\n</li>\n</ul>\n<p>如果只是看上面的文字，可能不太好理解，我们来看看下面的例子，你肯定就能明白。</p>\n<h3 id=\"举例：将数组中的数字按照从小到大排序\"><a href=\"#举例：将数组中的数字按照从小到大排序\" class=\"headerlink\" title=\"举例：将数组中的数字按照从小到大排序\"></a>举例：将数组中的数字按照从小到大排序</h3><p><strong>写法 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序规则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 a 大于 b，则交换 a 和 b 的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a &lt; b) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 a 小于 b，则位置不变</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 a 等于 b，则位置不变</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>];</span><br><span class=\"line\">result = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">11</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的写法太啰嗦了，其实也可以简化为如下写法：</p>\n<p><strong>写法 2</strong>：（ES5写法）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序规则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b; <span class=\"comment\">// 升序排列</span></span><br><span class=\"line\">    <span class=\"comment\">// return b - a; // 降序排列</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果不变。</p>\n<p>上方代码还可以写成 ES6 的形式，也就是将 function 改为箭头函数，其写法如下。</p>\n<p><strong>写法 3</strong>：（ES6写法，箭头函数）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序规则</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b; <span class=\"comment\">// 升序排列</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result));</span><br></pre></td></tr></table></figure>\n\n<p>上方代码，因为函数体内只有一句话，所以可以去掉 return 语句，继续简化为如下写法。</p>\n<p><strong>写法 4</strong>：（推荐写法）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序规则：升序排列</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result =&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result));</span><br></pre></td></tr></table></figure>\n\n<p>上面的各种写法中，写法 4 是我们在实战开发中用得最多的。</p>\n<p>为了确保代码的简洁优雅，接下来的讲解中，凡是涉及到函数，我们将尽量采用 ES6 中的箭头函数来写。</p>\n<h3 id=\"举例：将数组从小到大排序\"><a href=\"#举例：将数组从小到大排序\" class=\"headerlink\" title=\"举例：将数组从小到大排序\"></a>举例：将数组从小到大排序</h3><p>将数组从小到大排序，这个例子很常见。但在实际开发中，总会有一些花样。</p>\n<p>下面这段代码，在实际开发中，经常用到，一定要掌握。完整代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> dataList = [</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;品牌鞋子，高品质低价入手&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">publishTime</span>: <span class=\"number\">200</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;不是很贵，但是很暖&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">publishTime</span>: <span class=\"number\">100</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;无法拒绝的美食，跟我一起吃&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">publishTime</span>: <span class=\"number\">300</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ];</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao 排序前的数组：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(dataList));</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 将dataList 数组，按照 publishTime 字段，从小到大排序。（会改变原数组）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            dataList.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> <span class=\"built_in\">parseInt</span>(a.<span class=\"property\">publishTime</span>) - <span class=\"built_in\">parseInt</span>(b.<span class=\"property\">publishTime</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao 排序后的数组：&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(dataList));</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qianguyihao 排序前的数组：[</span><br><span class=\"line\">    &#123;&quot;title&quot;:&quot;品牌鞋子，高品质低价入手&quot;,&quot;publishTime&quot;:200&#125;,</span><br><span class=\"line\">    &#123;&quot;title&quot;:&quot;不是很贵，但是很暖&quot;,&quot;publishTime&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;title&quot;:&quot;无法拒绝的美食，跟我一起吃&quot;,&quot;publishTime&quot;:300&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">qianguyihao 排序后的数组：[</span><br><span class=\"line\">    &#123;&quot;title&quot;:&quot;不是很贵，但是很暖&quot;,&quot;publishTime&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;title&quot;:&quot;品牌鞋子，高品质低价入手&quot;,&quot;publishTime&quot;:200&#125;,</span><br><span class=\"line\">    &#123;&quot;title&quot;:&quot;无法拒绝的美食，跟我一起吃&quot;,&quot;publishTime&quot;:300&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，肯定有人会问： publishTime 字段已经是 int 类型了，为啥在排序前还要做一次 parseInt() 转换？这是因为，这种数据，一般是后台接口返回给前端的，数据可能是 int 类型、也可能是字符串类型，所以前端还是统一先做一下 partInt() 比较保险。这是一种良好的工作习惯和风险意识。</p>\n<h2 id=\"indexOf-和-lastIndexOf-：获取元素的索引\"><a href=\"#indexOf-和-lastIndexOf-：获取元素的索引\" class=\"headerlink\" title=\"indexOf() 和 lastIndexOf()：获取元素的索引\"></a>indexOf() 和 lastIndexOf()：获取元素的索引</h2><p><strong>语法 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素的索引 = 数组.<span class=\"title function_\">indexOf</span>(想要查询的元素);</span><br><span class=\"line\"></span><br><span class=\"line\">元素的索引 = 数组.<span class=\"title function_\">lastIndexOf</span>(想要查询的元素);</span><br></pre></td></tr></table></figure>\n\n<p>备注：<code>indexOf()</code> 是从左往右查找元素的位置。同理，<code>lastIndexOf()</code>是从右往左寻找。</p>\n<p><strong>解释</strong>：可以检索一个数组中是否含有指定的元素。如果数组中含有该元素，则会返回其<strong>第一次出现</strong>的索引，并立即停止查找；如果没有找到指定的内容，则返回 -1。</p>\n<p>这个方法的作用：</p>\n<ul>\n<li><p>如果找到了指定的元素，就返回元素对应的位置。</p>\n</li>\n<li><p>如果没有找到指定的元素，就会返回-1。</p>\n</li>\n</ul>\n<p><strong>注意</strong>：<code>indexOf()</code>在检索时，是严格类型约束，类似于<code>===</code>。</p>\n<p><strong>举例</strong> ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;c&#x27;</span>)); <span class=\"comment\">//从前往后，找第一个&quot;c&quot;在哪个位置</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;d&#x27;</span>)); <span class=\"comment\">//从后往前，找第一个&quot;d&quot;在哪个位置</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p><strong>举例</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">indexOf</span>(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n<p><strong>语法 2</strong>：</p>\n<p>这个方法还可以指定第二个参数，用来指定查找的<strong>起始位置</strong>。语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引值 = 数组.<span class=\"title function_\">indexOf</span>(想要查找的元素, [查找的起始位置]);</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的第二个参数非常巧妙，数据结构与算法的面试题中，时常出现。</p>\n<p>举例：（两个参数时，需要特别注意）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;q&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>];</span><br><span class=\"line\">result = str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从下标为3的位置开始查找 &#x27;a&#x27;这个元素 【重要】</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 打印结果：9</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，<code>indexOf()</code>方法中携带了两个参数，具体解释请看注释。</p>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h2><p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = arr.<span class=\"title function_\">includes</span>(想要查找的元素, [position]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：判断一个数组中是否包含指定的元素。如果是，则会返回 true；否则返回 false。</p>\n<p>参数中的 <code>position</code>：如果不指定，则默认为0；如果指定，则规定了检索的起始位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">includes</span>(<span class=\"number\">12</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">includes</span>(<span class=\"number\">20</span>)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">includes</span>(<span class=\"number\">11</span>, <span class=\"number\">1</span>)); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find-和findIndex\"><a href=\"#find-和findIndex\" class=\"headerlink\" title=\"find()和findIndex()\"></a>find()和findIndex()</h2><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> itemResult = arr.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">currentItem, currentIndex, currentArray</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>作用</strong>：找出<strong>第一个</strong>满足「指定条件返回 true」的元素，并立即停止查找；如果没找到，则返回 undefined。</p>\n<p>备注：一旦找到符合条件的第一个元素，将不再继续往下遍历。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">4</span>; <span class=\"comment\">//遍历数组arr，一旦发现有第一个元素大于4，就把这个元素返回</span></span><br><span class=\"line\">  \t<span class=\"comment\">// 上面这行代码是简写方式；完整写法也可以这样写：ccif (item &gt; 4) &#123;return true&#125;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">//打印结果：5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> indexResult = arr.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">currentItem, currentIndex, currentArray</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>作用</strong>：找出<strong>第一个</strong>满足「指定条件返回 true」的元素的索引，并立即停止遍历；如果没找到，则返回 -1。</p>\n<p>举例：</p>\n<blockquote>\n<p>我们直接把上面find 方法的代码示例改成 findIndex，看看效果。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">4</span>; <span class=\"comment\">//遍历数组arr，一旦发现有第一个元素大于4，就把这个元素的index返回</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">//打印结果：3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"every-和some\"><a href=\"#every-和some\" class=\"headerlink\" title=\"every()和some()\"></a>every()和some()</h2><h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> boolResult = arr.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">currentItem, currentIndex, currentArray</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>every()</code>：对数组中每一项运行回调函数，如果都返回 true，every 就返回 true；如果有一项返回 false，则停止遍历，此方法返回 false。</p>\n<p>注意：every()方法的返回值是 boolean 值，参数是回调函数。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;千古&#x27;</span>, <span class=\"string\">&#x27;宿敌&#x27;</span>, <span class=\"string\">&#x27;南山忆&#x27;</span>, <span class=\"string\">&#x27;素颜&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> bool1 = arr1.<span class=\"title function_\">every</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"property\">length</span> &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bool1); <span class=\"comment\">//输出结果：false。只要有一个元素的长度是超过两个字符的，就返回false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">&#x27;千古&#x27;</span>, <span class=\"string\">&#x27;宿敌&#x27;</span>, <span class=\"string\">&#x27;南山&#x27;</span>, <span class=\"string\">&#x27;素颜&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> bool2 = arr2.<span class=\"title function_\">every</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"property\">length</span> &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bool2); <span class=\"comment\">//输出结果：true。因为每个元素的长度都是两个字符。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h3><p><code>some()</code>：对数组中每一个元素运行回调函数，只要有一个元素返回 true，则停止遍历，此方法返回 true。</p>\n<p>注意：some()方法的返回值是 boolean 值。</p>\n<h3 id=\"every-和-some-的使用场景\"><a href=\"#every-和-some-的使用场景\" class=\"headerlink\" title=\"every() 和 some() 的使用场景\"></a>every() 和 some() 的使用场景</h3><p>every() 和 some() 这两个方法，初学者很容易搞混。要怎么区分呢？你可以这样记：</p>\n<ul>\n<li><p>every()：全部真，才为真。当你需要让数组中的每一个元素都满足指定条件时，那就使用 every()。</p>\n</li>\n<li><p>some()：一个真，则为真，点到为止。数组中只要有一个元素满足指定条件时，就停止遍历。那就使用 some()。</p>\n</li>\n</ul>\n<h2 id=\"valueOf-：返回数组本身\"><a href=\"#valueOf-：返回数组本身\" class=\"headerlink\" title=\"valueOf()：返回数组本身\"></a>valueOf()：返回数组本身</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组本身 = 数组.<span class=\"title function_\">valueOf</span>();</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的意义不大。因为我们直接写数组对象的名字，就已经是数组本身了。</p>\n<h2 id=\"遍历数组-1\"><a href=\"#遍历数组-1\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p><strong>遍历数组</strong>：获取并操作数组中的每一个元素，然后得到想要的返回结果。在实战开发中使用得非常频繁。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5语法</span></span><br><span class=\"line\">数组/boolean/无 = 数组.<span class=\"property\">forEach</span>/map/<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item, index, arr</span>) &#123;</span><br><span class=\"line\">   相关代码和返回值；</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6语法</span></span><br><span class=\"line\">数组/boolean/无 = 数组.<span class=\"property\">forEach</span>/map/<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   相关代码和返回值；</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>有了上面这些方法（其实远不止这几个），就可以替代 for 循环了。</p>\n<p>我们先来看看传统的for循环，然后依次介绍其他方法。</p>\n<h3 id=\"for-循环遍历\"><a href=\"#for-循环遍历\" class=\"headerlink\" title=\"for 循环遍历\"></a>for 循环遍历</h3><p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"string\">&#x27;vae&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i]); <span class=\"comment\">// arr[i]代表的是数组中的每一个元素i</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">千古壹号</span><br><span class=\"line\">许嵩</span><br><span class=\"line\">vae</span><br><span class=\"line\"></span><br><span class=\"line\">[&quot;千古壹号&quot;,&quot;许嵩&quot;,&quot;vae&quot;]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><blockquote>\n<p><code>forEach()</code> 这种遍历方法只支持 IE8 以上的浏览器。IE8 及以下的浏览器均不支持该方法。所以如果需要兼容 IE8，则不要使用 forEach，改为使用 for 循环来遍历即可。</p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5语法</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">currentItem, currentIndex, currentArray</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(currentValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6语法</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">currentItem, currentIndex, currentArray</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(currentValue);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>forEach()方法需要一个函数作为参数。这种函数，是由我们创建但是不由我们调用的，我们称为回调函数。</p>\n<p>数组中有几个元素，该回调函数就会执行几次。</p>\n<p>回调函数中传递三个参数：</p>\n<ul>\n<li><p>参数1：当前正在遍历的元素</p>\n</li>\n<li><p>参数2：当前正在遍历的元素的索引</p>\n</li>\n<li><p>参数3：正在遍历的数组</p>\n</li>\n</ul>\n<p>注意，forEach() 没有返回值。也可以理解成：forEach() 的返回值是 undefined。如果你尝试 <code>newArray = currentArray.forEach()</code>这种方式来接收，是达不到效果的。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myArr = [<span class=\"string\">&#x27;王一&#x27;</span>, <span class=\"string\">&#x27;王二&#x27;</span>, <span class=\"string\">&#x27;王三&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">myArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">currentItem, currentIndex, currentArray</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;item:&#x27;</span> + currentItem);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;index:&#x27;</span> + currentIndex);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(currentArray));</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;----------&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">item</span>:王一</span><br><span class=\"line\"><span class=\"attr\">index</span>:<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">arr</span>:[<span class=\"string\">&quot;王一&quot;</span>,<span class=\"string\">&quot;王二&quot;</span>,<span class=\"string\">&quot;王三&quot;</span>]</span><br><span class=\"line\">----------</span><br><span class=\"line\"><span class=\"attr\">item</span>:王二</span><br><span class=\"line\"><span class=\"attr\">index</span>:<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">arr</span>:[<span class=\"string\">&quot;王一&quot;</span>,<span class=\"string\">&quot;王二&quot;</span>,<span class=\"string\">&quot;王三&quot;</span>]</span><br><span class=\"line\">----------</span><br><span class=\"line\"><span class=\"attr\">item</span>:王三</span><br><span class=\"line\"><span class=\"attr\">index</span>:<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">arr</span>:[<span class=\"string\">&quot;王一&quot;</span>,<span class=\"string\">&quot;王二&quot;</span>,<span class=\"string\">&quot;王三&quot;</span>]</span><br><span class=\"line\">----------</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"forEach-会不会改变原数组？\"><a href=\"#forEach-会不会改变原数组？\" class=\"headerlink\" title=\"forEach() 会不会改变原数组？\"></a>forEach() 会不会改变原数组？</h3><p>forEach() 会不会改变原数组？关于这个问题，大部分人会搞错。我们来看看下面的代码。</p>\n<p><strong>1、数组的元素是基本数据类型</strong>：（无法改变原数组）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numArr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">numArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    item = item * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(numArr)); <span class=\"comment\">// 打印结果：[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码，你可要看仔细了，打印结果是 <code>[1, 2, 3]</code>，不是 <code>[2, 4, 6]</code>。</p>\n<p><strong>2、数组的元素是引用数据类型</strong>：（直接修改整个元素对象时，无法改变原数组）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> objArr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">objArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    item = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;邓紫棋&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"string\">&#x27;29&#x27;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(objArr)); <span class=\"comment\">// 打印结果：[&#123;&quot;name&quot;:&quot;千古壹号&quot;,&quot;age&quot;:20&#125;,&#123;&quot;name&quot;:&quot;许嵩&quot;,&quot;age&quot;:30&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、数组的元素是引用数据类型</strong>：（修改元素对象里的某个属性时，可以改变原数组）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> objArr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">28</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">objArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    item.<span class=\"property\">name</span> = <span class=\"string\">&#x27;邓紫棋&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(objArr)); <span class=\"comment\">// 打印结果：[&#123;&quot;name&quot;:&quot;邓紫棋&quot;,&quot;age&quot;:28&#125;,&#123;&quot;name&quot;:&quot;邓紫棋&quot;,&quot;age&quot;:30&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你需要通过 forEach 修改原数组，建议用 forEach 里面的参数 2 和参数 3 来做，具体请看下面的标准做法。</p>\n<p><strong>4、forEach() 通过参数 2、参数 3 修改原数组</strong>：（标准做法，一定要看）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、数组的元素是基本数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numArr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">numArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    arr[index] = arr[index] * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(numArr)); <span class=\"comment\">// 打印结果：[2,4,6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、数组的元素是引用数据类型时，直接修改对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> objArr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">28</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">objArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    arr[index] = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"string\">&#x27;10&#x27;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(objArr)); <span class=\"comment\">// 打印结果：[&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:&quot;10&quot;&#125;,&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:&quot;10&quot;&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、数组的元素是引用数据类型时，修改对象的某个属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> objArr2 = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">28</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">objArr2.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    arr[index].<span class=\"property\">name</span> = <span class=\"string\">&#x27;小明&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(objArr2)); <span class=\"comment\">// 打印结果：[&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:28&#125;,&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:34&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：</p>\n<p>如果纯粹只是遍历数组，那么，可以用 forEach() 方法。但是，如果你想在遍历数组的同时，去改变数组里的元素内容，那么，最好是用 map() 方法来做，不要用 forEach()方法，避免出现一些低级错误。</p>\n<p>参考链接：</p>\n<ul>\n<li><p><a href=\"https://juejin.im/post/5d526a4ae51d4557dc774e7d\">forEach 到底可以改变原数组吗？</a></p>\n</li>\n<li><p><a href=\"https://lhajh.github.io/js/2018/05/26/Does-forEach-change-the-original-array-value.html\">forEach 会改变原数组值吗</a></p>\n</li>\n</ul>\n<h2 id=\"for-of\"><a href=\"#for-of\" class=\"headerlink\" title=\"for of\"></a>for of</h2><p>ES6语法推出了 for of，可用于循环遍历数组。</p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不要使用-for-in-遍历数组\"><a href=\"#不要使用-for-in-遍历数组\" class=\"headerlink\" title=\"不要使用 for in 遍历数组\"></a>不要使用 for in 遍历数组</h3><p>for in 是专门用于遍历对象的。对象的属性是无序的（而数组的元素有顺序），for in循环就是专门用于遍历无序的对象。所以，不要用 for in 遍历数组。</p>\n<p>for in语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">key</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5语法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr =  arr.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span> (<span class=\"params\">currentItem, currentIndex, currentArray</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newItem;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6语法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">currentItem, currentIndex, currentArray</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newItem;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>解释：对数组中每一项运行回调函数，返回该函数的结果，组成的新数组（返回的是<strong>加工后</strong>的新数组）。不会改变原数组。</p>\n<p>作用：对数组中的每一项进行加工。</p>\n<p><strong>举例 1</strong>：（拷贝的过程中改变数组元素的值）</p>\n<p>有一个已知的数组 arr1，我要求让 arr1 中的每个元素的值都加 10，这里就可以用到 map 方法。代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"number\">10</span>; <span class=\"comment\">//让arr1中的每个元素加10</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr2); <span class=\"comment\">// 数组 arr2 的值：[11, 13, 16, 12, 15, 16]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>举例 2</strong>：【重要案例，实际开发中经常用到】</p>\n<p>将 A 数组中某个属性的值，存储到 B 数组中。代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;28&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"string\">&#x27;32&#x27;</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数组 arr1 中的 name 属性，存储到 数组 arr2 中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数组 arr1 中的 name、age这两个属性，改一下“键”的名字，存储到 arr3中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = arr1.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">myName</span>: item.<span class=\"property\">name</span>,</span><br><span class=\"line\">    <span class=\"attr\">myAge</span>: item.<span class=\"property\">age</span>,</span><br><span class=\"line\">&#125;)); <span class=\"comment\">// 将数组 arr1 中的 name 属性，存储到 数组 arr2 中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr1:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr2:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr3:&#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr3));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1:[&#123;&quot;name&quot;:&quot;千古壹号&quot;,&quot;age&quot;:&quot;28&quot;&#125;,&#123;&quot;name&quot;:&quot;许嵩&quot;,&quot;age&quot;:&quot;32&quot;&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">arr2:[&quot;千古壹号&quot;,&quot;许嵩&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">arr3:[&#123;&quot;myName&quot;:&quot;千古壹号&quot;,&quot;myAge&quot;:&quot;28&quot;&#125;,&#123;&quot;myName&quot;:&quot;许嵩&quot;,&quot;myAge&quot;:&quot;32&quot;&#125;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>map 的应用场景，主要就是以上两种。</p>\n<h3 id=\"map-方法会不会改变原数组？\"><a href=\"#map-方法会不会改变原数组？\" class=\"headerlink\" title=\"map() 方法会不会改变原数组？\"></a>map() 方法会不会改变原数组？</h3><p>答案：不一定。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;qianguyihao1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;qianguyihao2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  item.<span class=\"property\">name</span> = <span class=\"string\">&quot;haha&quot;</span>; <span class=\"comment\">// 修改 item 里的某个属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;&quot;name&quot;:&quot;haha&quot;,&quot;age&quot;:22&#125;,&#123;&quot;name&quot;:&quot;haha&quot;,&quot;age&quot;:23&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>总结：map方法如果是修改整个item的值，则不会改变原数组。但如果是修改 item 里面的某个属性，那就会改变原数组。</p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">currentItem, currentIndex, currentArray</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>解释：对数组中的<strong>每一项</strong>运行回调函数，该函数返回结果是 true 的项，将组成新的数组（返回值就是这个新数组）。不会改变原数组。</p>\n<p>作用：对数组进行过滤。</p>\n<p><strong>举例 1</strong>：找出数组 arr1 中大于 4 的元素，返回一个新的数组。代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr1.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item &gt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 将arr1中大于4的元素返回，组成新的数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1)); <span class=\"comment\">// 打印结果：[1,3,6,2,5,6]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2)); <span class=\"comment\">// 打印结果：[6,5,6]</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码更简洁的写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr1.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &gt; <span class=\"number\">4</span>); <span class=\"comment\">// 将arr1中大于4的元素返回，组成新的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1)); <span class=\"comment\">// 打印结果：[1,3,6,2,5,6]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2)); <span class=\"comment\">// 打印结果：[6,5,6]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>举例 2</strong>：</p>\n<p>获取对象数组 arr1 中指定类型的对象，放到数组 arr2 中。代码举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"attr\">type</span>: <span class=\"string\">&#x27;一线&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;周杰伦&#x27;</span>, <span class=\"attr\">type</span>: <span class=\"string\">&#x27;退居二线&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;邓紫棋&#x27;</span>, <span class=\"attr\">type</span>: <span class=\"string\">&#x27;一线&#x27;</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr1.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">type</span> == <span class=\"string\">&#x27;一线&#x27;</span>); <span class=\"comment\">// 筛选出一线歌手</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"attr\">type</span>: <span class=\"string\">&#x27;一线&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;邓紫棋&#x27;</span>, <span class=\"attr\">type</span>: <span class=\"string\">&#x27;一线&#x27;</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h2><h3 id=\"reduce-语法\"><a href=\"#reduce-语法\" class=\"headerlink\" title=\"reduce() 语法\"></a>reduce() 语法</h3><blockquote>\n<p>reduce 的发音：[rɪ’djuːs]。中文含义是减少，但这个方法跟“减少”没有任何关系。</p>\n</blockquote>\n<p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。返回值是回调函数累计处理的结果。</p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"keyword\">function</span> (<span class=\"params\">previousValue, currentValue, currentIndex, arr</span>) &#123;&#125;, initialValue);</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：</p>\n<ul>\n<li><p>previousValue：必填，上一次调用回调函数时的返回值</p>\n</li>\n<li><p>currentValue：必填，当前正在处理的数组元素</p>\n</li>\n<li><p>currentIndex：选填，当前正在处理的数组元素下标</p>\n</li>\n<li><p>arr：选填，调用 reduce()方法的数组</p>\n</li>\n<li><p>initialValue：选填，可选的初始值（作为第一次调用回调函数时传给 previousValue 的值）</p>\n</li>\n</ul>\n<p>在以往的数组方法中，匿名的回调函数里是传三个参数：item、index、arr。但是在 reduce() 方法中，前面多传了一个参数<code>previousValue</code>，这个参数的意思是上一次调用回调函数时的返回值。第一次执行回调函数时，previousValue 没有值怎么办？可以用 initialValue 参数传给它。</p>\n<p>备注：绝大多数人在一开始接触 reduce() 的时候会很懵逼，但是没关系，有事没事多看几遍，自然就掌握了。如果能熟练使用 reduce() 的用法，将能替代很多其他的数组方法，并逐渐走上进阶之路，领先于他人。</p>\n<p>为了方便理解 reduce()，我们先来看看下面的简单代码，过渡一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr1.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(prev);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;------&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">88</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">------</span><br><span class=\"line\">88</span><br><span class=\"line\">2</span><br><span class=\"line\">------</span><br><span class=\"line\">88</span><br><span class=\"line\">3</span><br><span class=\"line\">------</span><br><span class=\"line\">88</span><br><span class=\"line\">4</span><br><span class=\"line\">------</span><br><span class=\"line\">88</span><br><span class=\"line\">5</span><br><span class=\"line\">------</span><br><span class=\"line\">88</span><br><span class=\"line\">6</span><br><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，由于<code>return</code>的是固定值，所以 prev 打印的也是固定值（只有初始值是 0，剩下的遍历中，都是打印 88）。</p>\n<p>现在来升级一下，实际开发中，prev 的值往往是动态变化的，这便是 reduce()的精妙之处。我们来看几个例子就明白了。</p>\n<h3 id=\"reduce-的常见应用\"><a href=\"#reduce-的常见应用\" class=\"headerlink\" title=\"reduce() 的常见应用\"></a>reduce() 的常见应用</h3><p><strong>举例 1</strong>、求和：</p>\n<p>计算数组中所有元素项的总和。代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"comment\">// 数组求和</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> total = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev + item;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;total:&#x27;</span> + total); <span class=\"comment\">// 打印结果：18</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>举例 2</strong>、统计某个元素出现的次数：</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法：统一 value 这个元素在数组 arr 中出现的次数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">repeatCount</span>(<span class=\"params\">arr, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr || arr.<span class=\"property\">length</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">totalCount, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        totalCount += item == value ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalCount;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">repeatCount</span>(arr1, <span class=\"number\">6</span>)); <span class=\"comment\">// 打印结果：3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>举例 3</strong>、求元素的最大值：</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"comment\">// 数组求最大值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> maxValue = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev &gt; item ? prev : item;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(maxValue); <span class=\"comment\">// 打印结果：9</span></span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5d78aa3451882521397645ae\">JS reduce 函数</a></li>\n</ul>\n<h2 id=\"数组练习\"><a href=\"#数组练习\" class=\"headerlink\" title=\"数组练习\"></a>数组练习</h2><h3 id=\"splice-练习：数组去重\"><a href=\"#splice-练习：数组去重\" class=\"headerlink\" title=\"splice()练习：数组去重\"></a>splice()练习：数组去重</h3><p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//去除数组中重复的数字</span></span><br><span class=\"line\"><span class=\"comment\">//获取数组中的每一个元素</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*获取当前元素后的所有元素*/</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//console.log(&quot;----&gt;&quot;+arr[j]);</span></span><br><span class=\"line\">        <span class=\"comment\">//判断两个元素的值是否相等</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] == arr[j]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果相等则证明出现了重复的元素，则删除j对应的元素</span></span><br><span class=\"line\">            arr.<span class=\"title function_\">splice</span>(j, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">//当删除了当前j所在的元素以后，后边的元素会自动补位</span></span><br><span class=\"line\">            <span class=\"comment\">//此时将不会再比较这个元素，我们需要再比较一次j所在位置的元素</span></span><br><span class=\"line\">            <span class=\"comment\">//使j自减</span></span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"清空数组\"><a href=\"#清空数组\" class=\"headerlink\" title=\"清空数组\"></a>清空数组</h3><p>清空数组，有以下几种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr = []; <span class=\"comment\">//方式1：推荐</span></span><br><span class=\"line\">arr.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">//方式2：length属性可以赋值，在其它语言中length是只读</span></span><br><span class=\"line\">arr.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>); <span class=\"comment\">//方式3：删除数组中所有元素。也可以写成 arr.splice(0, arr.length)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"join-练习\"><a href=\"#join-练习\" class=\"headerlink\" title=\"join() 练习\"></a>join() 练习</h3><p><strong>问题</strong>：将一个字符串数组输出为<code>|</code>分割的形式，比如“千古|宿敌|素颜”。使用两种方式实现。</p>\n<p>答案：</p>\n<p>方式 1：（不推荐）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;千古&#x27;</span>, <span class=\"string\">&#x27;宿敌&#x27;</span>, <span class=\"string\">&#x27;素颜&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> separator = <span class=\"string\">&#x27;|&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    str += separator + arr[i]; <span class=\"comment\">//从第1个数组元素开始，每个元素前面加上符号&quot;|&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180126_1336.png\"></p>\n<p>不推荐这种方式，因为：由于字符串的不变性，str 拼接过多的话，容易导致内存溢出（很多个 str 都堆放在栈里）。</p>\n<p>方式 2：（推荐。通过 array 数组自带的 api 来实现）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;千古&#x27;</span>, <span class=\"string\">&#x27;宿敌&#x27;</span>, <span class=\"string\">&#x27;素颜&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;|&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180126_1339.png\"></p>\n<h3 id=\"reverse-练习\"><a href=\"#reverse-练习\" class=\"headerlink\" title=\"reverse() 练习\"></a>reverse() 练习</h3><p>题目：将一个字符串数组的元素的顺序进行反转，使用两种种方式实现。提示：第 i 个和第 length-i-1 个进行交换。</p>\n<p>答案：</p>\n<p>方式 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = array.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        newArr[newArr.<span class=\"property\">length</span>] = array[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式 2：（算法里比较常见的方式）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.<span class=\"property\">length</span> / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = array[i];</span><br><span class=\"line\">        array[i] = array[array.<span class=\"property\">length</span> - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">        array[array.<span class=\"property\">length</span> - <span class=\"number\">1</span> - i] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式 3：（数组自带的 reverse 方法）</p>\n<p>现在我们学习了数组自带的 api，我们就可以直接使用 reverse()方法。</p>\n<h3 id=\"练习：数组去重\"><a href=\"#练习：数组去重\" class=\"headerlink\" title=\"练习：数组去重\"></a>练习：数组去重</h3><p>问题：编写一个方法去掉一个数组中的重复元素。</p>\n<p>分析：创建一个新数组，循环遍历，只要新数组中有老数组的值，就不用再添加了。</p>\n<p>答案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//    编写一个方法 去掉一个数组的重复元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span><br><span class=\"line\"><span class=\"keyword\">var</span> aaa = <span class=\"title function_\">fn</span>(arr);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(aaa);</span><br><span class=\"line\"><span class=\"comment\">//思路：创建一个新数组，循环遍历，只要新数组中有老数组的值，就不用再添加了。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开闭原则</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bool = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//每次都要判断新数组中是否有旧数组中的值。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; newArr.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[i] === newArr[j]) &#123;</span><br><span class=\"line\">                bool = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bool) &#123;</span><br><span class=\"line\">            newArr[newArr.<span class=\"property\">length</span>] = array[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"数组的方法清单数组的类型相关方法描述备注Array.isArray()判断是否为数组toString()将数组转换为字符串不会改变原数组join()将数组转换为字符串，返回结果为转换后的字符串不会改变原数组字符串的方法：split()将字符串按照指定的分隔符，组装为数组不会改变原","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]}]}