{"total":49,"pageSize":10,"pageCount":5,"data":[{"title":"18-数组简介","slug":"JavaScript/18-数组简介","date":"2023-02-15T12:06:59.477Z","updated":"2023-02-15T12:26:30.049Z","comments":true,"path":"api/articles/JavaScript/18-数组简介.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20200612_1707.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<blockquote>\n<p>之前学习的数据类型，只能存储一个值（字符串也为一个值）。如果我们想存储多个值，就可以使用数组。</p>\n</blockquote>\n<h2 id=\"数组简介\"><a href=\"#数组简介\" class=\"headerlink\" title=\"数组简介\"></a>数组简介</h2><p>数组（Array）是属于<strong>内置对象</strong>，数组和普通对象的功能类似，都可以用来存储一些值。不同的是：</p>\n<ul>\n<li>普通对象是使用字符串作为属性名，而数组是使用数字作为<strong>索引</strong>来操作元素。索引：从 0 开始的整数就是索引。</li>\n</ul>\n<p>数组的存储性能比普通对象要好。在实际开发中我们经常使用数组存储一些数据（尤其是<strong>列表数据</strong>），使用频率非常高。</p>\n<p><img src=\"http://img.smyhvae.com/20200612_1707.png\"></p>\n<p>比如说，上面这个页面的列表数据，它的数据结构就是一个数组。</p>\n<p>数组中的元素可以是任意的数据类型，可以是对象，可以是函数，也可以是数组。数组的元素中，如果存放的是数组，我们就称这种数组为二维数组。</p>\n<p>接下来，我们讲一讲数组的基本操作。</p>\n<h2 id=\"创建数组对象\"><a href=\"#创建数组对象\" class=\"headerlink\" title=\"创建数组对象\"></a>创建数组对象</h2><h3 id=\"方式一：使用字面量创建数组\"><a href=\"#方式一：使用字面量创建数组\" class=\"headerlink\" title=\"方式一：使用字面量创建数组\"></a>方式一：使用字面量创建数组</h3><p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = []; <span class=\"comment\">// 创建一个空的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">// 创建带初始值的数组</span></span><br></pre></td></tr></table></figure>\n\n<p>方式一最简单，也用得最多。</p>\n<h3 id=\"方式二：使用构造函数创建数组\"><a href=\"#方式二：使用构造函数创建数组\" class=\"headerlink\" title=\"方式二：使用构造函数创建数组\"></a>方式二：使用构造函数创建数组</h3><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(参数);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"title class_\">Array</span>(参数);</span><br></pre></td></tr></table></figure>\n\n<p>如果<strong>参数为空</strong>，表示创建一个空数组；如果参数是<strong>一个数值</strong>，表示数组的长度；如果<strong>有多个参数</strong>，表示数组中的元素内容。</p>\n<p>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(); <span class=\"comment\">// 参数为空：创建空数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 参数为 size</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>); <span class=\"comment\">// 参数为多个数值：创建一个带数据的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> arr1); <span class=\"comment\">// 打印结果：object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr1 = &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr2 = &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr3 = &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr3));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;arr4 = &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr4));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object;</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>];</span><br><span class=\"line\">arr2 = [];</span><br><span class=\"line\">arr3 = [<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>];</span><br><span class=\"line\">arr4 = [<span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>];</span><br></pre></td></tr></table></figure>\n\n<p>从上方打印结果的第一行可以看出，数组的类型是属于<strong>对象</strong>。</p>\n<h3 id=\"数组中的元素的类型\"><a href=\"#数组中的元素的类型\" class=\"headerlink\" title=\"数组中的元素的类型\"></a>数组中的元素的类型</h3><p>数组中可以存放<strong>任意类型</strong>的数据，例如字符串、数字、布尔值、对象等。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;qianguyihao&#x27;</span>, <span class=\"number\">28</span>, <span class=\"literal\">true</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span> &#125;];</span><br></pre></td></tr></table></figure>\n\n<p>我们甚至可以在数组里存放数组。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [</span><br><span class=\"line\">    [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">    [<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>],</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组的基本操作\"><a href=\"#数组的基本操作\" class=\"headerlink\" title=\"数组的基本操作\"></a>数组的基本操作</h2><h3 id=\"数组的索引\"><a href=\"#数组的索引\" class=\"headerlink\" title=\"数组的索引\"></a>数组的索引</h3><p><strong>索引</strong> (下标) ：用来访问数组元素的序号，代表的是数组中的元素在数组中的位置（下标从 0 开始算起）。</p>\n<p>数组可以通过索引来访问、修改对应的数组元素。我们继续看看。</p>\n<h3 id=\"向数组中添加元素\"><a href=\"#向数组中添加元素\" class=\"headerlink\" title=\"向数组中添加元素\"></a>向数组中添加元素</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组[索引] = 值;</span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向数组中添加元素</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">20</span>;</span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"number\">30</span>;</span><br><span class=\"line\">arr[<span class=\"number\">3</span>] = <span class=\"number\">40</span>;</span><br><span class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[10,20,30,40,null,50]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取数组中的元素\"><a href=\"#获取数组中的元素\" class=\"headerlink\" title=\"获取数组中的元素\"></a>获取数组中的元素</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组[索引];</span><br></pre></td></tr></table></figure>\n\n<p>如果读取不存在的索引（比如元素没那么多），系统不会报错，而是返回 undefined。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[<span class=\"number\">0</span>]); <span class=\"comment\">// 打印结果：21</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[<span class=\"number\">5</span>]); <span class=\"comment\">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取数组的长度\"><a href=\"#获取数组的长度\" class=\"headerlink\" title=\"获取数组的长度\"></a>获取数组的长度</h3><p>可以使用<code>length</code>属性来获取数组的长度(即“元素的个数”)。</p>\n<p>数组的长度是元素个数，不要跟索引号混淆。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组的长度 = 数组名.<span class=\"property\">length</span>；</span><br></pre></td></tr></table></figure>\n\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"property\">length</span>); <span class=\"comment\">// 打印结果：3</span></span><br></pre></td></tr></table></figure>\n\n<p>补充：</p>\n<p>对于连续的数组，使用 length 可以获取到数组的长度（元素的个数）；对于非连续的数组（即“稀疏数组”，本文稍后会讲），length 的值会大于元素的个数。因此，尽量不要创建非连续的数组。</p>\n<h3 id=\"修改数组的长度\"><a href=\"#修改数组的长度\" class=\"headerlink\" title=\"修改数组的长度\"></a>修改数组的长度</h3><p>可以通过修改length属性修改数组的长度。</p>\n<ul>\n<li><p>如果修改的 length 大于原长度，则多出部分会空出来，置为 null。</p>\n</li>\n<li><p>如果修改的 length 小于原长度，则多出的元素会被删除，数组将从后面删除元素。</p>\n</li>\n<li><p>（特例：伪数组 arguments 的长度可以修改，但是不能修改里面的元素，以后单独讲。）</p>\n</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改数组 arr1 的 length</span></span><br><span class=\"line\">arr1.<span class=\"property\">length</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr1));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改数组 arr2 的 length</span></span><br><span class=\"line\">arr2.<span class=\"property\">length</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr2));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">11</span>]</span><br><span class=\"line\">[<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><p><strong>遍历</strong>: 就是把数组中的每个元素从头到尾都访问一次。</p>\n<p>最简单的做法是通过 for 循环，遍历数组中的每一项。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i]); <span class=\"comment\">// 打印出数组中的每一项</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下一篇文章，会学习数组的各种方法，到时候，会有更多的做法去遍历数组。</p>\n<h2 id=\"JS语言中，数组的注意点\"><a href=\"#JS语言中，数组的注意点\" class=\"headerlink\" title=\"JS语言中，数组的注意点\"></a>JS语言中，数组的注意点</h2><blockquote>\n<p>和其他编程语言相比，JS语言中的数组比较灵活，有许多与众不同的地方。</p>\n</blockquote>\n<p>1、如果访问数组中不存在的索引时，不会报错，会返回undefined。</p>\n<p>2、当数组的存储空间不够时，数组会自动扩容。其它编程语言中数组的大小是固定的，不会自动扩容。</p>\n<p>3、数组可以存储不同类型数据，其它编程语言中数组只能存储相同类型数据。</p>\n<p>4、数组分配的存储空间不一定是连续的。其它语言数组分配的存储空间是连续的。</p>\n<p>JS中的数组采用”哈希映射”的方式分配存储空间，我们可以通过索引找到对应空间。各大浏览器也对数组分配的存储空间进行了优化：如果存储的都是相同类型的数据，则会尽量分配连续的存储空间；如果存储的不是相同的数据类型，则不会分配连续的存储空间。</p>\n<h2 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h2><p>解构赋值是ES6中新增的一种赋值方式。</p>\n<p>ES5中，如果想把数组中的元素赋值给其他变量，是这样做的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>,<span class=\"number\">4</span>]];</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = arr[<span class=\"number\">0</span>]; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = arr[<span class=\"number\">1</span>]; <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = arr[<span class=\"number\">2</span>]; <span class=\"comment\">// [3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这种写法比较啰嗦。通过ES6中的结构复制，我们可以像下面这样做。</p>\n<p>1、数组解构赋值，代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">// [3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p>注意点：</p>\n<p>（1）等号左边的个数和格式，必须和右边的一模一样，才能完全解构。</p>\n<p>（2）当然，左边的个数和右边的个数，可以不一样。</p>\n<p>2、默认值。在赋值之前，我们可以给左边的变量指定<strong>默认值</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b = <span class=\"number\">3</span>, c = <span class=\"number\">4</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 2。默认值被覆盖。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">// 4。继续保持默认值。</span></span><br></pre></td></tr></table></figure>\n\n<p>3、我们可以使用ES6中新增的<strong>扩展运算符</strong>打包剩余的数据。如果使用了扩展运算符, 那么扩展运算符只能写在最后。代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, ...b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"稀疏数组与密集数组\"><a href=\"#稀疏数组与密集数组\" class=\"headerlink\" title=\"稀疏数组与密集数组\"></a>稀疏数组与密集数组</h2><blockquote>\n<p> 这个知识点，简单了解即可。</p>\n</blockquote>\n<ul>\n<li><p>稀疏数组：索引不连续、数组长度大于元素个数的数组，可以简单理解为有 <code>empty</code>（有空隙）的数组。</p>\n</li>\n<li><p>密集数组：索引连续、数组长度等于元素个数的数组。</p>\n</li>\n</ul>\n<p>参考链接：</p>\n<ul>\n<li><p><a href=\"https://juejin.cn/post/6975531514444562462\">JavaScript 之稀疏数组与密集数组</a></p>\n</li>\n<li><p><a href=\"https://github.com/JunreyCen/blog/issues/10\">JS 稀疏数组</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6844904050152964109\">JS 中的稀疏数组和密集数组</a></p>\n</li>\n<li><p>[译]JavaScript中的稀疏数组与密集数组：<a href=\"https://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687165.html\">https://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687165.html</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000008533942\">JavaScript || 数组</a></p>\n</li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"例-1：翻转数组\"><a href=\"#例-1：翻转数组\" class=\"headerlink\" title=\"例 1：翻转数组\"></a>例 1：翻转数组</h3><p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]; <span class=\"comment\">// 原始数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = []; <span class=\"comment\">// 翻转后的数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    newArr[i] = arr[arr.<span class=\"property\">length</span> - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(newArr));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[50,40,30,20,10]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例-2：冒泡排序\"><a href=\"#例-2：冒泡排序\" class=\"headerlink\" title=\"例 2：冒泡排序\"></a>例 2：冒泡排序</h3><p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">20</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.<span class=\"property\">length</span> - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[10,20,30,40,50]</span><br></pre></td></tr></table></figure>\n\n","text":"之前学习的数据类型，只能存储一个值（字符串也为一个值）。如果我们想存储多个值，就可以使用数组。数组简介数组（Array）是属于内置对象，数组和普通对象的功能类似，都可以用来存储一些值。不同的是：普通对象是使用字符串作为属性名，而数组是使用数字作为索引来操作元素。索引：从 0 开始","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"17-内置对象：Date","slug":"JavaScript/17-内置对象：Date","date":"2023-02-15T12:06:59.475Z","updated":"2023-02-15T12:26:01.669Z","comments":true,"path":"api/articles/JavaScript/17-内置对象：Date.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180202_1110.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"内置对象：Date\"><a href=\"#内置对象：Date\" class=\"headerlink\" title=\"内置对象：Date\"></a>内置对象：Date</h2><blockquote>\n<p>Date 对象在实际开发中，使用得很频繁，且容易在细节地方出错，需要引起重视。</p>\n</blockquote>\n<p>内置对象 Date 用来处理日期和时间。</p>\n<p><strong>需要注意的是</strong>：与 Math 对象不同，Date 对象是一个<strong>构造函数</strong> ，需要<strong>先实例化</strong>后才能使用。</p>\n<h2 id=\"创建Date对象\"><a href=\"#创建Date对象\" class=\"headerlink\" title=\"创建Date对象\"></a>创建Date对象</h2><p>创建Date对象有两种写法：</p>\n<ul>\n<li><p>写法一：如果Date()不写参数，就返回当前时间对象</p>\n</li>\n<li><p>写法二：如果Date()里面写参数，就返回括号里输入的时间对象</p>\n</li>\n</ul>\n<p>针对这两种写法，我们来具体讲一讲。</p>\n<h3 id=\"写法一：不传递参数时，则获取系统的当前时间对象\"><a href=\"#写法一：不传递参数时，则获取系统的当前时间对象\" class=\"headerlink\" title=\"写法一：不传递参数时，则获取系统的当前时间对象\"></a>写法一：不传递参数时，则获取系统的当前时间对象</h3><p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> date1);</span><br></pre></td></tr></table></figure>\n\n<p>代码解释：不传递参数时，表示的是获取系统的当前时间对象。也可以理解成是：获取当前代码执行的时间。</p>\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mon Feb 17 2020 21:57:22 GMT+0800 (中国标准时间)</span><br><span class=\"line\">object</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写法二：传递参数\"><a href=\"#写法二：传递参数\" class=\"headerlink\" title=\"写法二：传递参数\"></a>写法二：传递参数</h3><p>传递参数时，表示获取指定时间的时间对象。参数中既可以传递字符串，也可以传递数字，也可以传递时间戳。</p>\n<p>通过传参的这种写法，我们可以把时间字符串&#x2F;时间数字&#x2F;时间戳，按照指定的格式，转换为时间对象。</p>\n<p>举例1：（参数是字符串）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> date11 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020/02/17 21:00:00&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date11); <span class=\"comment\">// Mon Feb 17 2020 21:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date12 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020/04/19&#x27;</span>); <span class=\"comment\">// 返回的就是四月</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date12); <span class=\"comment\">// Sun Apr 19 2020 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date13 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020-05-20&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date13); <span class=\"comment\">// Wed May 20 2020 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date14 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;Wed Jan 27 2017 12:00:00 GMT+0800 (中国标准时间)&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date14); <span class=\"comment\">// Fri Jan 27 2017 12:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n\n\n<p>举例2：（参数是多个数字）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> date21 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">2</span>, <span class=\"number\">18</span>); <span class=\"comment\">// 注意，第二个参数返回的是三月，不是二月</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date21); <span class=\"comment\">// Wed Mar 18 2020 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date22 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">3</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">59</span>, <span class=\"number\">58</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date22); <span class=\"comment\">// Sat Apr 18 2020 22:59:58 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> params = [<span class=\"number\">2020</span>, <span class=\"number\">06</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>, <span class=\"number\">20</span>, <span class=\"number\">59</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> date23 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(...params);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date23); <span class=\"comment\">// Sun Jul 12 2020 16:20:59 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n\n\n<p>举例3：（参数是时间戳）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> date31 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">1591950413388</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date31); <span class=\"comment\">// Fri Jun 12 2020 16:26:53 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先把时间对象转换成时间戳，然后把时间戳转换成时间对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> date32 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(timestamp);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date32); <span class=\"comment\">// Fri Jun 12 2020 16:28:21 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"日期的格式化\"><a href=\"#日期的格式化\" class=\"headerlink\" title=\"日期的格式化\"></a>日期的格式化</h2><p>上一段内容里，我们获取到了 Date <strong>对象</strong>，但这个对象，打印出来的结果并不是特别直观。</p>\n<p>如果我们需要获取日期的<strong>指定部分</strong>，就需要用到 Date对象自带的方法。</p>\n<p>获取了日期指定的部分之后，我们就可以让日期按照指定的格式，进行展示（即日期的格式化）。比如说，我期望能以 <code>2020-02-02 19:30:59</code> 这种格式进行展示。</p>\n<p>在这之前，我们先来看看 Date 对象有哪些方法。</p>\n<h3 id=\"Date对象的方法\"><a href=\"#Date对象的方法\" class=\"headerlink\" title=\"Date对象的方法\"></a>Date对象的方法</h3><p>Date对象 有如下方法，可以获取日期和时间的<strong>指定部分</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getFullYear()</td>\n<td>获取年份</td>\n<td></td>\n</tr>\n<tr>\n<td>getMonth()</td>\n<td><strong>获取月： 0-11</strong></td>\n<td>0代表一月</td>\n</tr>\n<tr>\n<td>getDate()</td>\n<td><strong>获取日：1-31</strong></td>\n<td>获取的是几号</td>\n</tr>\n<tr>\n<td>getDay()</td>\n<td><strong>获取星期：0-6</strong></td>\n<td>0代表周日，1代表周一</td>\n</tr>\n<tr>\n<td>getHours()</td>\n<td>获取小时：0-23</td>\n<td></td>\n</tr>\n<tr>\n<td>getMinutes()</td>\n<td>获取分钟：0-59</td>\n<td></td>\n</tr>\n<tr>\n<td>getSeconds()</td>\n<td>获取秒：0-59</td>\n<td></td>\n</tr>\n<tr>\n<td>getMilliseconds()</td>\n<td>获取毫秒</td>\n<td>1s &#x3D; 1000ms</td>\n</tr>\n</tbody></table>\n<p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我在执行这行代码时，当前时间为 2019年2月4日，周一，13:23:52</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate); <span class=\"comment\">// 打印结果：Mon Feb 04 2019 13:23:52 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getFullYear</span>()); <span class=\"comment\">// 打印结果：2019</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>); <span class=\"comment\">// 打印结果：2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getDate</span>()); <span class=\"comment\">// 打印结果：4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dayArr  = [<span class=\"string\">&#x27;星期日&#x27;</span>, <span class=\"string\">&#x27;星期一&#x27;</span>, <span class=\"string\">&#x27;星期二&#x27;</span>, <span class=\"string\">&#x27;星期三&#x27;</span>, <span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>, <span class=\"string\">&#x27;星期六&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getDay</span>()); <span class=\"comment\">// 打印结果：1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dayArr[myDate.<span class=\"title function_\">getDay</span>()]); <span class=\"comment\">// 打印结果：星期一</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getHours</span>()); <span class=\"comment\">// 打印结果：13</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getMinutes</span>()); <span class=\"comment\">// 打印结果：23</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getSeconds</span>()); <span class=\"comment\">// 打印结果：52</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getMilliseconds</span>()); <span class=\"comment\">// 打印结果：393</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getTime</span>()); <span class=\"comment\">// 获取时间戳。打印结果：1549257832393</span></span><br></pre></td></tr></table></figure>\n\n<p>获取了日期和时间的指定部分之后，我们把它们用字符串拼接起来，就可以按照自己想要的格式，来展示日期。</p>\n<h3 id=\"举例：年月日的格式化\"><a href=\"#举例：年月日的格式化\" class=\"headerlink\" title=\"举例：年月日的格式化\"></a>举例：年月日的格式化</h3><p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">formatDate</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    方法：日期格式化。</span></span><br><span class=\"line\"><span class=\"comment\">    格式要求：今年是：2020年02月02日 08:57:09 星期日</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatDate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = date.<span class=\"title function_\">getFullYear</span>(); <span class=\"comment\">// 年</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>; <span class=\"comment\">// 月</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> day = date.<span class=\"title function_\">getDate</span>(); <span class=\"comment\">// 日</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> week = date.<span class=\"title function_\">getDay</span>(); <span class=\"comment\">// 星期几</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> weekArr = [<span class=\"string\">&#x27;星期日&#x27;</span>, <span class=\"string\">&#x27;星期一&#x27;</span>, <span class=\"string\">&#x27;星期二&#x27;</span>, <span class=\"string\">&#x27;星期三&#x27;</span>, <span class=\"string\">&#x27;星期四&#x27;</span>, <span class=\"string\">&#x27;星期五&#x27;</span>, <span class=\"string\">&#x27;星期六&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hour = date.<span class=\"title function_\">getHours</span>(); <span class=\"comment\">// 时</span></span><br><span class=\"line\">    hour = hour &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + hour : hour; <span class=\"comment\">// 如果只有一位，则前面补零</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> minute = date.<span class=\"title function_\">getMinutes</span>(); <span class=\"comment\">// 分</span></span><br><span class=\"line\">    minute = minute &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + minute : minute; <span class=\"comment\">// 如果只有一位，则前面补零</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> second = date.<span class=\"title function_\">getSeconds</span>(); <span class=\"comment\">// 秒</span></span><br><span class=\"line\">    second = second &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + second : second; <span class=\"comment\">// 如果只有一位，则前面补零</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;今天是：&#x27;</span> + year + <span class=\"string\">&#x27;年&#x27;</span> + month + <span class=\"string\">&#x27;月&#x27;</span> + day + <span class=\"string\">&#x27;日 &#x27;</span> + hour + <span class=\"string\">&#x27;:&#x27;</span> + minute + <span class=\"string\">&#x27;:&#x27;</span> + second + <span class=\"string\">&#x27; &#x27;</span> + weekArr[week];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"获取时间戳\"><a href=\"#获取时间戳\" class=\"headerlink\" title=\"获取时间戳\"></a>获取时间戳</h2><h3 id=\"时间戳的定义和作用\"><a href=\"#时间戳的定义和作用\" class=\"headerlink\" title=\"时间戳的定义和作用\"></a>时间戳的定义和作用</h3><p><strong>时间戳</strong>：指的是从格林威治标准时间的<code>1970年1月1日，0时0分0秒</code>到当前日期所花费的<strong>毫秒数</strong>（1秒 &#x3D; 1000毫秒）。</p>\n<p>计算机底层在保存时间时，使用的都是时间戳。时间戳的存在，就是为了<strong>统一</strong>时间的单位。</p>\n<p>我们经常会利用时间戳来计算时间，因为它更精确。而且，在实战开发中，接口返回给前端的日期数据，都是以时间戳的形式。</p>\n<p>我们再来看下面这样的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;1970/01/01 0:0:0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate.<span class=\"title function_\">getTime</span>()); <span class=\"comment\">// 获取时间戳</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果（可能会让你感到惊讶）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"number\">28800000</span></span><br></pre></td></tr></table></figure>\n\n<p>为啥打印结果是<code>-28800000</code>，而不是<code>0</code>呢？这是因为，我们的当前代码，是在中文环境下运行的，与英文时间会存在<strong>8个小时的时差</strong>（中文时间比英文时间早了八个小时）。如果代码是在英文环境下运行，打印结果就是<code>0</code>。</p>\n<h3 id=\"getTime-：获取时间戳\"><a href=\"#getTime-：获取时间戳\" class=\"headerlink\" title=\"getTime()：获取时间戳\"></a>getTime()：获取时间戳</h3><p><code>getTime()</code>  获取日期对象的<strong>时间戳</strong>（单位：毫秒）。这个方法在实战开发中，用得比较多。但还有比它更常用的写法，我们往下看。</p>\n<h3 id=\"获取-Date-对象的时间戳\"><a href=\"#获取-Date-对象的时间戳\" class=\"headerlink\" title=\"获取 Date 对象的时间戳\"></a>获取 Date 对象的时间戳</h3><p>代码演示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一：获取 Date 对象的时间戳（最常用的写法）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp1 = +<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp1); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二：获取 Date 对象的时间戳（较常用的写法）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp2); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式三：获取 Date 对象的时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">valueOf</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp3); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式4：获取 Date 对象的时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() * <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp4); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式5：获取 Date 对象的时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timestamp5 = <span class=\"title class_\">Number</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp5); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这五种写法都可以获取任意 Date 对象的时间戳，最常见的写法是<strong>方式一</strong>，其次是方式二。</p>\n<p>根据前面所讲的关于「时间戳」的概念，上方代码获取到的时间戳指的是：从 <code>1970年1月1日，0时0分0秒</code> 到现在所花费的总毫秒数。</p>\n<h3 id=\"获取当前时间的时间戳\"><a href=\"#获取当前时间的时间戳\" class=\"headerlink\" title=\"获取当前时间的时间戳\"></a>获取当前时间的时间戳</h3><p>如果我们要获取<strong>当前时间</strong>的时间戳，除了上面的几种方式之外，还有另一种方式。代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式六：获取当前时间的时间戳（很常用的写法）</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()); <span class=\"comment\">// 打印结果举例：1589448165370</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这种方式六，用得也很多。只不过，<code>Date.now()</code>是H5标准中新增的特性，如果你的项目需要兼容低版本的IE浏览器，就不要用了。这年头，谁还用IE呢？</p>\n<h3 id=\"利用时间戳检测代码的执行时间\"><a href=\"#利用时间戳检测代码的执行时间\" class=\"headerlink\" title=\"利用时间戳检测代码的执行时间\"></a>利用时间戳检测代码的执行时间</h3><p>我们可以在业务代码的前面定义 <code>时间戳1</code>，在业务代码的后面定义 <code>时间戳2</code>。把这两个时间戳相减，就能得出业务代码的执行时间。</p>\n<h3 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format()\"></a>format()</h3><p>将时间对象转换为指定格式。</p>\n<p>参考链接：<a href=\"https://www.cnblogs.com/tugenhua0707/p/3776808.html\">https://www.cnblogs.com/tugenhua0707/p/3776808.html</a></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><h3 id=\"举例1：模拟日历\"><a href=\"#举例1：模拟日历\" class=\"headerlink\" title=\"举例1：模拟日历\"></a>举例1：模拟日历</h3><p>要求每天打开这个页面，都能定时显示当前的日期。</p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">font</span>: <span class=\"number\">600</span> <span class=\"number\">30px</span>/<span class=\"number\">30px</span> <span class=\"string\">&#x27;simsun&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//模拟日历</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//需求：每天打开这个页面都能定时显示年月日和星期几</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">function</span> <span class=\"title function_\">getCurrentDate</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//1.创建一个当前日期的日期对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//2.然后获取其中的年、月、日和星期</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> year = date.<span class=\"title function_\">getFullYear</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> month = date.<span class=\"title function_\">getMonth</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> hao = date.<span class=\"title function_\">getDate</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> week = date.<span class=\"title function_\">getDay</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//        console.log(year+&quot; &quot;+month+&quot; &quot;+hao+&quot; &quot;+week);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//3.赋值给div</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;星期日&#x27;</span>, <span class=\"string\">&#x27;星期一&#x27;</span>, <span class=\"string\">&#x27;星期二&#x27;</span>, <span class=\"string\">&#x27;星期三&#x27;</span>, <span class=\"string\">&#x27;星期四&#x27;</span>, <span class=\"string\">&#x27;星期五&#x27;</span>, <span class=\"string\">&#x27;星期六&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;今天是：&#x27;</span> + year + <span class=\"string\">&#x27;年&#x27;</span> + (month + <span class=\"number\">1</span>) + <span class=\"string\">&#x27;月&#x27;</span> + hao + <span class=\"string\">&#x27;日 &#x27;</span> + arr[week];</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">            div.<span class=\"property\">innerText</span> = <span class=\"title function_\">getCurrentDate</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>实现效果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1110.png\"></p>\n<h3 id=\"举例2：发布会倒计时\"><a href=\"#举例2：发布会倒计时\" class=\"headerlink\" title=\"举例2：发布会倒计时\"></a>举例2：发布会倒计时</h3><p>实现思路：</p>\n<ul>\n<li><p>设置一个定时器，每间隔1毫秒就自动刷新一次div的内容。</p>\n</li>\n<li><p>核心算法：输入的时间戳减去当前的时间戳，就是剩余时间（即倒计时），然后转换成时分秒。</p>\n</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">width</span>: <span class=\"number\">1210px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">font</span>: <span class=\"number\">600</span> <span class=\"number\">30px</span>/<span class=\"number\">30px</span> <span class=\"string\">&#x27;simsun&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>)[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">countDown</span>(<span class=\"string\">&#x27;2022/02/03 11:20:00&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">function</span> <span class=\"title function_\">countDown</span>(<span class=\"params\">myTime</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> nowTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> future = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(myTime);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> timeSum = future.<span class=\"title function_\">getTime</span>() - nowTime.<span class=\"title function_\">getTime</span>(); <span class=\"comment\">//获取时间差：发布会时间减去此刻的毫秒值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> day = <span class=\"built_in\">parseInt</span>(timeSum / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>); <span class=\"comment\">// 天</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> hour = <span class=\"built_in\">parseInt</span>((timeSum / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span>) % <span class=\"number\">24</span>); <span class=\"comment\">// 时</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> minu = <span class=\"built_in\">parseInt</span>((timeSum / <span class=\"number\">1000</span> / <span class=\"number\">60</span>) % <span class=\"number\">60</span>); <span class=\"comment\">// 分</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> sec = <span class=\"built_in\">parseInt</span>((timeSum / <span class=\"number\">1000</span>) % <span class=\"number\">60</span>); <span class=\"comment\">// 秒</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> millsec = <span class=\"built_in\">parseInt</span>(timeSum % <span class=\"number\">1000</span>); <span class=\"comment\">// 毫秒</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//细节处理：所有的时间小于10的时候，在前面自动补0，毫秒值要补双0（比如如，把 8 秒改成 08 秒）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                day = day &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + day : day; <span class=\"comment\">//day小于10吗？如果小于，就补0；如果不小于，就是day本身</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                hour = hour &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + hour : hour;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                minu = minu &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + minu : minu;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                sec = sec &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + sec : sec;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (millsec &lt; <span class=\"number\">10</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    millsec = <span class=\"string\">&#x27;00&#x27;</span> + millsec;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (millsec &lt; <span class=\"number\">100</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    millsec = <span class=\"string\">&#x27;0&#x27;</span> + millsec;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 兜底处理</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (timeSum &lt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    div.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;距离苹果发布会还有00天00小时00分00秒000毫秒&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"built_in\">clearInterval</span>(timer);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 前端要显示的文案</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                div.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;距离苹果发布会还有&#x27;</span> + day + <span class=\"string\">&#x27;天&#x27;</span> + hour + <span class=\"string\">&#x27;小时&#x27;</span> + minu + <span class=\"string\">&#x27;分&#x27;</span> + sec + <span class=\"string\">&#x27;秒&#x27;</span> + millsec + <span class=\"string\">&#x27;毫秒&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现效果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1130.gif\"></p>\n<h2 id=\"Moment-js\"><a href=\"#Moment-js\" class=\"headerlink\" title=\"Moment.js\"></a>Moment.js</h2><p>Moment.js 是一个轻量级的JavaScript时间库，我们可以利用它很方便地进行时间操作，提升开发效率。</p>\n<ul>\n<li>中文官网：<a href=\"http://momentjs.cn/\">http://momentjs.cn/</a></li>\n</ul>\n<p>使用举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/moment.js/2.26.0/moment.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 按照指定的格式，格式化当前时间</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">moment</span>().<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)); <span class=\"comment\">// 打印结果举例：2020-06-12 16:38:38</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title function_\">moment</span>().<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)); <span class=\"comment\">// 打印结果：string</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 按照指定的格式，格式化指定的时间</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">moment</span>(<span class=\"string\">&#x27;2020/06/12 18:01:59&#x27;</span>).<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)); <span class=\"comment\">// 打印结果：2020-06-12 18:01:59</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 按照指定的格式，获取七天后的时间</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">moment</span>().<span class=\"title function_\">add</span>(<span class=\"number\">7</span>, <span class=\"string\">&#x27;days&#x27;</span>).<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>)); <span class=\"comment\">// 打印结果举例：2020-06-19 04:43:56</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","text":"内置对象：DateDate 对象在实际开发中，使用得很频繁，且容易在细节地方出错，需要引起重视。内置对象 Date 用来处理日期和时间。需要注意的是：与 Math 对象不同，Date 对象是一个构造函数 ，需要先实例化后才能使用。创建Date对象创建Date对象有两种写法：写法一","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"16-内置对象：Number和Math","slug":"JavaScript/16-内置对象：Number和Math","date":"2023-02-15T12:06:59.472Z","updated":"2023-02-15T12:25:20.472Z","comments":true,"path":"api/articles/JavaScript/16-内置对象：Number和Math.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180117_1730.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"内置对象-Number-的常见方法\"><a href=\"#内置对象-Number-的常见方法\" class=\"headerlink\" title=\"内置对象 Number 的常见方法\"></a>内置对象 Number 的常见方法</h2><h3 id=\"Number-isInteger-判断是否为整数\"><a href=\"#Number-isInteger-判断是否为整数\" class=\"headerlink\" title=\"Number.isInteger() 判断是否为整数\"></a>Number.isInteger() 判断是否为整数</h3><p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = Number.isInteger(数字);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"toFixed-小数点后面保留多少位\"><a href=\"#toFixed-小数点后面保留多少位\" class=\"headerlink\" title=\"toFixed() 小数点后面保留多少位\"></a>toFixed() 小数点后面保留多少位</h3><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 = myNum.<span class=\"title function_\">toFixed</span>(num);</span><br></pre></td></tr></table></figure>\n\n<p>解释：将数字 myNum 的小数点后面保留 num 位小数（四舍五入），并返回。不会改变原数字。注意，<strong>返回结果是字符串</strong>。</p>\n<p>参数 num：指定了小数点后面的位数。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">3.456</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = num.<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">// 打印结果：3.456</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2); <span class=\"comment\">// 打印结果：3.46</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> num); <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> num2); <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，<code>num2</code>的结果是3.46，但是请注意，<code>num</code>的类型Number型，而<code>num2</code>的类型却是String型。</p>\n<h2 id=\"内置对象-Math-的常见方法\"><a href=\"#内置对象-Math-的常见方法\" class=\"headerlink\" title=\"内置对象 Math 的常见方法\"></a>内置对象 Math 的常见方法</h2><p>Math 和其他的对象不同，它不是一个构造函数，不需要创建对象。所以我们不需要 通过 new 来调用，而是直接使用里面的属性和方法即可。</p>\n<p>Math属于一个工具类，里面封装了数学运算相关的属性和方法。如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Math.PI</td>\n<td align=\"left\">圆周率</td>\n<td align=\"left\">Math对象的属性</td>\n</tr>\n<tr>\n<td align=\"left\">Math.abs()</td>\n<td align=\"left\"><strong>返回绝对值</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.random()</td>\n<td align=\"left\">生成0-1之间的<strong>随机浮点数</strong></td>\n<td align=\"left\">取值范围是 [0，1)</td>\n</tr>\n<tr>\n<td align=\"left\">Math.floor()</td>\n<td align=\"left\"><strong>向下取整</strong>（往小取值）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.ceil()</td>\n<td align=\"left\"><strong>向上取整</strong>（往大取值）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.round()</td>\n<td align=\"left\">四舍五入取整（正数四舍五入，负数五舍六入）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.max(x, y, z)</td>\n<td align=\"left\">返回多个数中的最大值</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.min(x, y, z)</td>\n<td align=\"left\">返回多个数中的最小值</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.pow(x,y)</td>\n<td align=\"left\">乘方：返回 x 的 y 次幂</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.sqrt()</td>\n<td align=\"left\">开方：对一个数进行开方运算</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p><strong>举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = -<span class=\"number\">0.6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(num));        <span class=\"comment\">//取绝对值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(num));      <span class=\"comment\">//向下取整，向小取</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(num));       <span class=\"comment\">//向上取整，向大取</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(num));      <span class=\"comment\">//四舍五入取整（正数四舍五入，负数五舍六入）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());        <span class=\"comment\">//生成0-1之间的随机数</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.6</span><br><span class=\"line\"></span><br><span class=\"line\">-1</span><br><span class=\"line\"></span><br><span class=\"line\">-0</span><br><span class=\"line\"></span><br><span class=\"line\">-1</span><br><span class=\"line\"></span><br><span class=\"line\">0.6453756205275165</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-abs-：获绝对值\"><a href=\"#Math-abs-：获绝对值\" class=\"headerlink\" title=\"Math.abs()：获绝对值\"></a>Math.abs()：获绝对值</h2><p>方法定义：返回绝对值。</p>\n<p>注意：</p>\n<ul>\n<li>参数中可以接收字符串类型的数字，此时会将字符串做隐式类型转换，然后再调用 Math.abs() 方法。</li>\n</ul>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(-<span class=\"number\">2</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先做隐式类型转换，将 &#x27;-2&#x27;转换为数字类型 -2，然后再调用 Math.abs()</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(<span class=\"string\">&#x27;-2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(<span class=\"string\">&#x27;hello&#x27;</span>)); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-random-方法：生成随机数\"><a href=\"#Math-random-方法：生成随机数\" class=\"headerlink\" title=\"Math.random() 方法：生成随机数\"></a>Math.random() 方法：生成随机数</h2><p>方法定义：生成 [0, 1) 之间的<strong>随机浮点数</strong>。</p>\n<p>我们来看几个例子。</p>\n<h3 id=\"生成-0-x-之间的随机数\"><a href=\"#生成-0-x-之间的随机数\" class=\"headerlink\" title=\"生成 [0, x) 之间的随机数\"></a>生成 [0, x) 之间的随机数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*x)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"生成-x-y-之间的随机数\"><a href=\"#生成-x-y-之间的随机数\" class=\"headerlink\" title=\"生成 [x, y) 之间的随机数\"></a>生成 [x, y) 之间的随机数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*(y-x)+x)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"【重要】生成-x-y-之间的随机整数\"><a href=\"#【重要】生成-x-y-之间的随机整数\" class=\"headerlink\" title=\"【重要】生成 [x, y]之间的随机整数\"></a>【重要】生成 [x, y]之间的随机整数</h3><p>也就是说：生成两个整数之间的随机整数，<strong>并且要包含这两个整数</strong>。</p>\n<p>这个功能很常用，我们可以将其封装成一个方法，代码实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 生成两个整数之间的随机整数，并且要包含这两个整数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getRandom</span>(<span class=\"params\">min, max</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getRandom</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"举例：随机点名\"><a href=\"#举例：随机点名\" class=\"headerlink\" title=\"举例：随机点名\"></a>举例：随机点名</h3><p>根据上面的例子，我们还可以再延伸一下，来看看随机点名的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 生成两个整数之间的随机整数，并且要包含这两个整数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getRandom</span>(<span class=\"params\">min, max</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;许嵩&#x27;</span>, <span class=\"string\">&#x27;邓紫棋&#x27;</span>, <span class=\"string\">&#x27;毛不易&#x27;</span>, <span class=\"string\">&#x27;解忧邵帅&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = <span class=\"title function_\">getRandom</span>(<span class=\"number\">0</span>, arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>); <span class=\"comment\">// 生成随机的index</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[index]); <span class=\"comment\">// 随机点名</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"pow-：乘方\"><a href=\"#pow-：乘方\" class=\"headerlink\" title=\"pow()：乘方\"></a>pow()：乘方</h2><p>如果想计算 <code>a 的 b 次方</code>，可以使用如下函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.pow(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>Math的中文是“数学”，pow是“幂”。</p>\n<p><strong>举例1：</strong></p>\n<p><img src=\"http://img.smyhvae.com/20180117_1730.png\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Math.pow(3, Math.pow(2, 2));</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p><strong>举例2：</strong></p>\n<p><img src=\"http://img.smyhvae.com/20180117_1740.png\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Math.pow(Math.pow(3, 2), 4);</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sqrt-：开方\"><a href=\"#sqrt-：开方\" class=\"headerlink\" title=\"sqrt()：开方\"></a>sqrt()：开方</h2><p>如果想计算数值a的开二次方，可以使用如下函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.sqrt(a);</span><br></pre></td></tr></table></figure>\n\n<p>sqrt即“square 开方”。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Math.sqrt(36);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"url-编码和解码\"><a href=\"#url-编码和解码\" class=\"headerlink\" title=\"url 编码和解码\"></a>url 编码和解码</h2><p>URI (Uniform ResourceIdentifiers,通用资源标识符)进行编码，以便发送给浏览器。有效的URI中不能包含某些字符，例如空格。而这URI编码方法就可以对URI进行编码，它们用特殊的UTF-8编码替换所有无效的字符，从而让浏览器能够接受和理解。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">encodeURIComponent</span>();   <span class=\"comment\">//把字符串作为 URI 组件进行编码</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURIComponent</span>();   <span class=\"comment\">//把字符串作为 URI 组件进行解码</span></span><br></pre></td></tr></table></figure>\n\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&quot;http://www.cnblogs.com/smyhvae/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">encodeURIComponent</span>(url);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);                           <span class=\"comment\">//打印url的编码</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">decodeURIComponent</span>(str));       <span class=\"comment\">//对url进行编码后，再解码，还原为url</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1432.png\"></p>\n","text":"内置对象 Number 的常见方法Number.isInteger() 判断是否为整数语法：1<br>布尔值 = Number.isInteger(数字);<br>toFixed() 小数点后面保留多少位语法：1<br>字符串 = myNum.toFixed(num);<br>解","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"15-内置对象 String：字符串的常见方法","slug":"JavaScript/15-内置对象 String：字符串的常见方法","date":"2023-02-15T12:06:59.470Z","updated":"2023-02-15T12:25:02.011Z","comments":true,"path":"api/articles/JavaScript/15-内置对象 String：字符串的常见方法.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180202_1420.png","content":"<h2 id=\"内置对象简介\"><a href=\"#内置对象简介\" class=\"headerlink\" title=\"内置对象简介\"></a>内置对象简介</h2><blockquote>\n<p>JavaScript 中的对象分为3种：自定义对象、内置对象、浏览器对象。</p>\n</blockquote>\n<blockquote>\n<p>前面两种对象：是JS的基础内容，属于 ECMAScript； 第三个浏览器对象：属于JS独有，即 JS 内置的API。</p>\n</blockquote>\n<p><strong>内置对象</strong>：就是指这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用或者基本而必要的功能（属性和方法）。</p>\n<p>内置对象最大的优点就是帮助我们快速开发。</p>\n<p><strong>JavaScript的内置对象</strong>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">内置对象</th>\n<th align=\"left\">对象说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Arguments</td>\n<td align=\"left\">函数参数集合</td>\n</tr>\n<tr>\n<td align=\"left\">Array</td>\n<td align=\"left\">数组</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean</td>\n<td align=\"left\">布尔对象</td>\n</tr>\n<tr>\n<td align=\"left\">Math</td>\n<td align=\"left\">数学对象</td>\n</tr>\n<tr>\n<td align=\"left\">Date</td>\n<td align=\"left\">日期时间</td>\n</tr>\n<tr>\n<td align=\"left\">Error</td>\n<td align=\"left\">异常对象</td>\n</tr>\n<tr>\n<td align=\"left\">Function</td>\n<td align=\"left\">函数构造器</td>\n</tr>\n<tr>\n<td align=\"left\">Number</td>\n<td align=\"left\">数值对象</td>\n</tr>\n<tr>\n<td align=\"left\">Object</td>\n<td align=\"left\">基础对象</td>\n</tr>\n<tr>\n<td align=\"left\">RegExp</td>\n<td align=\"left\">正则表达式对象</td>\n</tr>\n<tr>\n<td align=\"left\">String</td>\n<td align=\"left\">字符串对象</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串前言\"><a href=\"#字符串前言\" class=\"headerlink\" title=\"字符串前言\"></a>字符串前言</h2><blockquote>\n<p>在日常开发中，String 对象（字符串对象）的使用频率是非常高的。所以有必要详细介绍。</p>\n</blockquote>\n<p>需要注意的是：<strong>字符串的所有方法，都不会改变原字符串</strong>（字符串的不可变性），操作完成后会返回一个新的值。</p>\n<p>字符串的常见方法如下。</p>\n<h2 id=\"查找字符串\"><a href=\"#查找字符串\" class=\"headerlink\" title=\"查找字符串\"></a>查找字符串</h2><h3 id=\"1、indexOf-x2F-lastIndexOf-：获取字符串中指定内容的索引\"><a href=\"#1、indexOf-x2F-lastIndexOf-：获取字符串中指定内容的索引\" class=\"headerlink\" title=\"1、indexOf()&#x2F;lastIndexOf()：获取字符串中指定内容的索引\"></a>1、indexOf()&#x2F;lastIndexOf()：获取字符串中指定内容的索引</h3><blockquote>\n<p>这个方法，是使用频率最高的一个方法。</p>\n</blockquote>\n<p><strong>语法 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引值 = str.<span class=\"title function_\">indexOf</span>(想要查询的字符串);</span><br></pre></td></tr></table></figure>\n\n<p>备注：<code>indexOf()</code> 是从前向后查找字符串的位置。同理，<code>lastIndexOf()</code>是从后向前寻找。</p>\n<p><strong>解释</strong>：可以检索一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回其<strong>第一次出现</strong>的索引；如果没有找到指定的内容，则返回 -1。</p>\n<p>因此可以得出一个重要技巧：</p>\n<ul>\n<li><p><strong>如果获取的索引值为 0，说明字符串是以查询的参数为开头的</strong>。</p>\n</li>\n<li><p>如果获取的索引值为-1，说明这个字符串中没有指定的内容。</p>\n</li>\n</ul>\n<p>举例 1：(查找单个字符)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;abcdea&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给字符查索引(索引值为0,说明字符串以查询的参数为开头)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;c&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;c&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1420.png\"></p>\n<p>举例 2：（查找字符串）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;yi&#x27;</span>)); <span class=\"comment\">// 打印结果：6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>语法 2</strong>：</p>\n<p>这个方法还可以指定第二个参数，用来指定查找的<strong>起始位置</strong>。语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引值 = str.<span class=\"title function_\">indexOf</span>(想要查询的字符串, [起始位置]);</span><br></pre></td></tr></table></figure>\n\n<p>举例 3：（两个参数时，需要特别注意）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\">result = str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从下标为3的位置开始查找 &#x27;a&#x27;这个字符 【重要】</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 打印结果：9</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，<code>indexOf()</code>方法中携带了两个参数，具体解释请看注释。</p>\n<h3 id=\"indexOf-举例\"><a href=\"#indexOf-举例\" class=\"headerlink\" title=\"indexOf 举例\"></a>indexOf 举例</h3><p><strong>案例</strong>：查找字符串”qianguyihao”中，所有 <code>a</code> 出现的位置以及次数。</p>\n<p>思路：</p>\n<p>（1）先查找第一个 a 出现的位置。</p>\n<p>（2）只要 indexOf 返回的结果不是 -1 就继续往后查找。</p>\n<p>（3）因为 indexOf 只能查找到第一个，所以后面的查找，可以利用第二个参数，在当前索引加 1，从而继续查找。</p>\n<p>代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (index !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index);</span><br><span class=\"line\">    num++; <span class=\"comment\">// 每打印一次，就计数一次</span></span><br><span class=\"line\">    index = str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a 出现的次数是: &#x27;</span> + num);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、search-：获取字符串中指定内容的索引（参数里一般是正则）\"><a href=\"#2、search-：获取字符串中指定内容的索引（参数里一般是正则）\" class=\"headerlink\" title=\"2、search()：获取字符串中指定内容的索引（参数里一般是正则）\"></a>2、search()：获取字符串中指定内容的索引（参数里一般是正则）</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引值 = str.<span class=\"title function_\">search</span>(想要查找的字符串);</span><br><span class=\"line\">索引值 = str.<span class=\"title function_\">search</span>(正则表达式);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>备注：<code>search()</code> 方法里的参数，既可以传字符串，也可以传正则表达式。</p>\n<p><strong>解释</strong>：可以检索一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回其<strong>第一次出现</strong>的索引；如果没有找到指定的内容，则返回 -1。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">search</span>(<span class=\"string\">&#x27;yi&#x27;</span>)); <span class=\"comment\">// 打印结果：6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">search</span>(<span class=\"regexp\">/yi/i</span>)); <span class=\"comment\">// 打印结果：6</span></span><br></pre></td></tr></table></figure>\n\n<p>备注：上方的<code>/yi/i</code>采用的是正则表达式的写法，意思是，让 name去匹配字符<code>yi</code>，忽略大小写。我们在后面会专门介绍正则表达式。</p>\n<h3 id=\"3、includes-：字符串中是否包含指定的内容\"><a href=\"#3、includes-：字符串中是否包含指定的内容\" class=\"headerlink\" title=\"3、includes()：字符串中是否包含指定的内容\"></a>3、includes()：字符串中是否包含指定的内容</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = str.<span class=\"title function_\">includes</span>(想要查找的字符串, [position]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：判断一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回 true；否则返回 false。</p>\n<p>参数中的 <code>position</code>：如果不指定，则默认为0；如果指定，则规定了检索的起始位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;yi&#x27;</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;haha&#x27;</span>)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;yi&#x27;</span>,<span class=\"number\">7</span>)); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4、startsWith-：字符串是否以指定的内容开头\"><a href=\"#4、startsWith-：字符串是否以指定的内容开头\" class=\"headerlink\" title=\"4、startsWith()：字符串是否以指定的内容开头\"></a>4、startsWith()：字符串是否以指定的内容开头</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = str.<span class=\"title function_\">startsWith</span>(想要查找的内容, [position]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：判断一个字符串是否以指定的子字符串开头。如果是，则返回 true；否则返回 false。</p>\n<p><strong>参数中的position</strong>：</p>\n<ul>\n<li><p>如果不指定，则默认为0。</p>\n</li>\n<li><p>如果指定，则规定了<strong>检索的起始位置</strong>。检索的范围包括：这个指定位置开始，直到字符串的末尾。即：[position, str.length)</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;abcdefg&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;a&#x27;</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;b&#x27;</span>)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为指定了起始位置为3，所以是在 defg 这个字符串中检索。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、endsWith-：字符串是否以指定的内容结尾\"><a href=\"#5、endsWith-：字符串是否以指定的内容结尾\" class=\"headerlink\" title=\"5、endsWith()：字符串是否以指定的内容结尾\"></a>5、endsWith()：字符串是否以指定的内容结尾</h3><p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">布尔值 = str.<span class=\"title function_\">endsWith</span>(想要查找的内容, [position]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：判断一个字符串是否以指定的子字符串结尾。如果是，则返回 true；否则返回 false。</p>\n<p><strong>参数中的position</strong>：</p>\n<ul>\n<li><p>如果不指定，则默认为 str.length。</p>\n</li>\n<li><p>如果指定，则规定了<strong>检索的结束位置</strong>。检索的范围包括：从第一个字符串开始，直到这个指定的位置。即：[0, position)</p>\n</li>\n<li><p>或者你可以这样简单理解：endsWith() 方法里的position，表示<strong>检索的长度</strong>。</p>\n</li>\n</ul>\n<p>注意：startsWith() 和 endsWith()这两个方法，他们的 position 的含义是不同的，请仔细区分。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;abcdefg&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;g&#x27;</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;f&#x27;</span>)); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为指定了截止位置为3，所以是在 abc 这个长度为3字符串中检索</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<p>注意看上方的注释。</p>\n<p>参考链接：<a href=\"https://www.softwhy.com/article-2885-1.html\">JavaScript endsWith()介绍</a></p>\n<h2 id=\"获取指定位置的字符\"><a href=\"#获取指定位置的字符\" class=\"headerlink\" title=\"获取指定位置的字符\"></a>获取指定位置的字符</h2><h3 id=\"1、charAt-index\"><a href=\"#1、charAt-index\" class=\"headerlink\" title=\"1、charAt(index)\"></a>1、charAt(index)</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符 = str.<span class=\"title function_\">charAt</span>(index);</span><br></pre></td></tr></table></figure>\n\n<p>解释：返回字符串指定位置的字符。这里的 <code>str.charAt(index)</code>和<code>str[index]</code>的效果是一样的。</p>\n<p>注意：字符串中第一个字符的下标是 0。如果参数 index 不在 [0, string.length) 之间，该方法将返回一个空字符串。</p>\n<p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;smyhvae&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charAt</span>(i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1401.png\"></p>\n<p>上面这个例子一般不用。一般打印数组和 json 的时候用索引，打印 String 不建议用索引。</p>\n<h3 id=\"2、str-index\"><a href=\"#2、str-index\" class=\"headerlink\" title=\"2、str[index]\"></a>2、str[index]</h3><p><code>str.charAt(index)</code>和<code>str[index]</code>的效果是一样的，不再赘述。区别在于：<code>str[index]</code>是 H5 标准里新增的特性。</p>\n<h3 id=\"3、charCodeAt-index\"><a href=\"#3、charCodeAt-index\" class=\"headerlink\" title=\"3、charCodeAt(index)\"></a>3、charCodeAt(index)</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符 = str.<span class=\"title function_\">charCodeAt</span>(index);</span><br></pre></td></tr></table></figure>\n\n<p>解释：返回字符串指定位置的字符的 Unicode 编码。不会修改原字符串。</p>\n<p>在实际应用中，通过这个方法，我们可以判断用户按下了哪个按键。</p>\n<p><strong>代码举例</strong>：打印字符串的<strong>占位长度</strong>。</p>\n<p>提示：一个英文占一个位置，一个中文占两个位置。</p>\n<p>思路：判断该字符是否在 0-127 之间（在的话是英文，不在是非英文）。</p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//    sort();   底层用到了charCodeAt();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;I love my country!我你爱中国！&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//需求：求一个字符串占有几个字符位。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//思路；如果是英文，站一个字符位，如果不是英文占两个字符位。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//技术点：判断该字符是否在0-127之间。（在的话是英文，不在是非英文）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"title function_\">getZFWlength</span>(str));</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(str.<span class=\"property\">length</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//定义方法：字符位</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">getZFWlength</span>(<span class=\"params\">string</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//定义一个计数器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; string.<span class=\"property\">length</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//对每一位字符串进行判断，如果Unicode编码在0-127，计数器+1；否则+2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (string.<span class=\"title function_\">charCodeAt</span>(i) &lt; <span class=\"number\">128</span> &amp;&amp; string.<span class=\"title function_\">charCodeAt</span>(i) &gt;= <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                count++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                count += <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> count;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30</span><br><span class=\"line\">24</span><br></pre></td></tr></table></figure>\n\n<p>从打印结果可以看出：字符串的长度是 24，但是却占了 30 个字符位（一个中文占两个字符位）。</p>\n<p>另外，sort()方法其实底层也是用到了 charCodeAt()，因为用到了 Unicode 编码。</p>\n<h2 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h2><h3 id=\"1、slice\"><a href=\"#1、slice\" class=\"headerlink\" title=\"1、slice()\"></a>1、slice()</h3><blockquote>\n<p>slice() 方法用的最多。</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新字符串 = str.<span class=\"title function_\">slice</span>(开始索引, 结束索引); <span class=\"comment\">//两个参数都是索引值。包左不包右。</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：从字符串中截取指定的内容。不会修改原字符串，而是将截取到的内容返回。</p>\n<p>注意：上面的参数，包左不包右。参数举例如下：</p>\n<ul>\n<li><p><code>(2, 5)</code> 截取时，包左不包右。</p>\n</li>\n<li><p><code>(2)</code> 表示<strong>从指定的索引位置开始，截取到最后</strong>。</p>\n</li>\n<li><p><code>(-3)</code> 表示从倒数第三个开始，截取到最后。</p>\n</li>\n<li><p><code>(1, -1)</code> 表示从第一个截取到倒数第一个。</p>\n</li>\n<li><p><code>(5, 2)</code> 表示前面的大，后面的小，返回值为空。</p>\n</li>\n</ul>\n<h3 id=\"2、substring\"><a href=\"#2、substring\" class=\"headerlink\" title=\"2、substring()\"></a>2、substring()</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新字符串 = str.<span class=\"title function_\">substring</span>(开始索引, 结束索引); <span class=\"comment\">//两个参数都是索引值。包左不包右。</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：从字符串中截取指定的内容。和<code>slice()</code>类似。</p>\n<p><code>substring()</code>和<code>slice()</code>是类似的。但不同之处在于：</p>\n<ul>\n<li><p><code>substring()</code>不能接受负值作为参数。如果传递了一个<strong>负值</strong>，则默认使用 0。</p>\n</li>\n<li><p><code>substring()</code>还会自动调整参数的位置，如果第二个参数小于第一个，则自动交换。比如说， <code>substring(1, 0)</code>相当于截取的是第一个字符。</p>\n</li>\n</ul>\n<h3 id=\"3、substr\"><a href=\"#3、substr\" class=\"headerlink\" title=\"3、substr()\"></a>3、substr()</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 = str.<span class=\"title function_\">substr</span>(开始索引, 截取的长度);</span><br></pre></td></tr></table></figure>\n\n<p>解释：从字符串中截取指定的内容。不会修改原字符串，而是将截取到的内容返回。</p>\n<p>注意，这个方法的第二个参数<strong>截取的长度</strong>，不是结束索引。</p>\n<p>参数举例：</p>\n<ul>\n<li><p><code>(2,4)</code> 从索引值为 2 的字符开始，截取 4 个字符。</p>\n</li>\n<li><p><code>(1)</code> 从指定位置开始，截取到最后。</p>\n</li>\n<li><p><code>(-3)</code> 从倒数第几个开始，截取到最后。</p>\n</li>\n</ul>\n<p>备注：ECMAscript 没有对 <code>substr()</code> 方法进行标准化，因此不建议使用它。</p>\n<h2 id=\"String-fromCharCode\"><a href=\"#String-fromCharCode\" class=\"headerlink\" title=\"String.fromCharCode()\"></a>String.fromCharCode()</h2><p><code>String.fromCharCode()</code>：根据字符的 Unicode 编码获取字符。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result1 = <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(<span class=\"number\">72</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(<span class=\"number\">20013</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 打印结果：H</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 打印结果：中</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h2><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新字符串 = str1.<span class=\"title function_\">concat</span>(str2)； <span class=\"comment\">//连接两个字符串</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：字符串的连接。</p>\n<p>这种方法基本不用，直接把两个字符串相加就好。</p>\n<p>是的，你会发现，数组中也有<code>concat()</code>方法，用于数组的连接。这个方法在数组中用得挺多的。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;qiangu&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;yihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = str1.<span class=\"title function_\">concat</span>(str2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 打印结果：qianguyihao</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"split-：字符串转换为数组-【重要】\"><a href=\"#split-：字符串转换为数组-【重要】\" class=\"headerlink\" title=\"split()：字符串转换为数组 【重要】\"></a>split()：字符串转换为数组 【重要】</h2><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的数组 = str.<span class=\"title function_\">split</span>(分隔符);</span><br></pre></td></tr></table></figure>\n\n<p>解释：通过指定的分隔符，将一个字符串拆分成一个<strong>数组</strong>。不会改变原字符串。</p>\n<p>备注：<code>split()</code>这个方法在实际开发中用得非常多。一般来说，从接口拿到的 json 数据中，经常会收到类似于<code>&quot;q, i, a, n&quot;</code>这样的字符串，前端需要将这个字符串拆分成<code>[&#39;q&#39;, &#39;i&#39;, &#39;a&#39;, &#39;n&#39;]</code>数组，这个时候<code>split()</code>方法就派上用场了。</p>\n<p><strong>代码举例 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qian, gu, yi, hao&#x27;</span>; <span class=\"comment\">// 用逗号隔开的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = str.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>); <span class=\"comment\">// 将字符串 str 拆分成数组，通过逗号来拆分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array); <span class=\"comment\">// 打印结果是数组：[&quot;qian&quot;, &quot; gu&quot;, &quot; yi&quot;, &quot; hao&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码举例 2</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//split()方法：字符串变数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;千古壹号|qianguyihao|许嵩&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;结果1：&#x27;</span> +str3.<span class=\"title function_\">split</span>()); <span class=\"comment\">// 无参数，表示：把整个字符串作为一个元素添加到数组中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>)); <span class=\"comment\">// 参数为空字符串，则表示：分隔字符串中每一个字符，分别添加到数组中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;|&#x27;</span>)); <span class=\"comment\">// 参数为指定字符，表示：用 &#x27;|&#x27; 分隔字符串。此分隔符将不会出现在数组的任意一个元素中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str3.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;许&#x27;</span>)); <span class=\"comment\">// 同上</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：（都是数组）</p>\n<p><img src=\"http://img.smyhvae.com/20200611_2050.png\"></p>\n<h2 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h2><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的字符串 = str.<span class=\"title function_\">replace</span>(被替换的子串，新的子串);</span><br></pre></td></tr></table></figure>\n\n<p>解释：将字符串中的指定内容，替换为新的内容并返回。不会修改原字符串。</p>\n<p>注意：这个方法，默认只会替换第一个被匹配到的字符。如果要全局替换，需要使用正则。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//replace()方法：替换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;Today is fine day,today is fine day !&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;today&#x27;</span>, <span class=\"string\">&#x27;tomorrow&#x27;</span>)); <span class=\"comment\">//只能替换第一个today</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str2.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/today/gi</span>, <span class=\"string\">&#x27;tomorrow&#x27;</span>)); <span class=\"comment\">//这里用到了正则，才能替换所有的today</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"repeat-：重复字符串\"><a href=\"#repeat-：重复字符串\" class=\"headerlink\" title=\"repeat()：重复字符串\"></a>repeat()：重复字符串</h2><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newStr = str.<span class=\"title function_\">repeat</span>(重复的次数);</span><br></pre></td></tr></table></figure>\n\n<p>解释：将字符串重复指定的次数。会返回新的值，不会修改原字符串。</p>\n<p>举例1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name.<span class=\"title function_\">repeat</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// 打印内容：qianguyihaoqianguyihao</span></span><br></pre></td></tr></table></figure>\n\n<p>举例2：（模糊字符串的后四位）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> telephone = <span class=\"string\">&#x27;13088889999&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mix_telephone = telephone.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, -<span class=\"number\">4</span>) + <span class=\"string\">&#x27;*&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 模糊电话号码的后四位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(telephone); <span class=\"comment\">// 打印结果：13088889999</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mix_telephone); <span class=\"comment\">// 打印结果：1308888****</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h2 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"trim()\"></a>trim()</h2><p><code>trim()</code>：去除字符串前后的空白。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//去除字符串前后的空格，trim();</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;   a   b   c   &#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">trim</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">trim</span>().<span class=\"property\">length</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20200607_2132.png\"></p>\n<h2 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h2><p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcdEFG&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转换成小写</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">toLowerCase</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转换成大写</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">toUpperCase</span>());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"html-方法\"><a href=\"#html-方法\" class=\"headerlink\" title=\"html 方法\"></a>html 方法</h2><ul>\n<li><p>anchor() 创建 a 链接</p>\n</li>\n<li><p>big()</p>\n</li>\n<li><p>sub()</p>\n</li>\n<li><p>sup()</p>\n</li>\n<li><p>link()</p>\n</li>\n<li><p>bold()</p>\n</li>\n</ul>\n<p>注意，str.link() 返回值是字符串。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;你好&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">anchor</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">big</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">sub</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">sup</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">link</span>(<span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">bold</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.smyhvae.com/20180202_1536.png\"></p>\n<h2 id=\"字符串练习\"><a href=\"#字符串练习\" class=\"headerlink\" title=\"字符串练习\"></a>字符串练习</h2><p><strong>练习 1</strong>：”smyhvaevaesmyh”查找字符串中所有 m 出现的位置。</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;smyhvaevaesmyh&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str2.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果指定位置的符号=== &quot;o&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//str2[i]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str2.<span class=\"title function_\">charAt</span>(i) === <span class=\"string\">&#x27;m&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>练习 2</strong>：判断一个字符串中出现次数最多的字符，统计这个次数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;smyhvaevaesmyhvae&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//定义一个json，然后判断json中是够有该属性，如果有该属性，那么值+1;否则创建一个该属性，并赋值为1；</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> json = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str2.<span class=\"property\">length</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//判断：如果有该属性，那么值+1;否则创建一个该属性，并赋值为1；</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> key = str2.<span class=\"title function_\">charAt</span>(i);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (json[key] === <span class=\"literal\">undefined</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            json[key] = <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            json[key] += <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(json);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;----------------&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//获取json中属性值最大的选项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> maxKey = <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> maxValue = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> json) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//        if(maxKey == &quot;&quot;)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//            maxKey = k;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//            maxValue = json[k];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//        &#125;else&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (json[k] &gt; maxValue) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            maxKey = k;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            maxValue = json[k];</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(maxKey);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(maxValue);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1540.png\"></p>\n","text":"内置对象简介JavaScript 中的对象分为3种：自定义对象、内置对象、浏览器对象。前面两种对象：是JS的基础内容，属于 ECMAScript； 第三个浏览器对象：属于JS独有，即 JS 内置的API。内置对象：就是指这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"14-基本包装类型","slug":"JavaScript/14-基本包装类型","date":"2023-02-15T12:06:59.467Z","updated":"2023-02-15T12:24:26.005Z","comments":true,"path":"api/articles/JavaScript/14-基本包装类型.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180202_1351.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"基本数据类型不能绑定属性和方法\"><a href=\"#基本数据类型不能绑定属性和方法\" class=\"headerlink\" title=\"基本数据类型不能绑定属性和方法\"></a>基本数据类型不能绑定属性和方法</h2><p>属性和方法只能添加给对象，不能添加给基本数据类型。我们拿字符串来举例。</p>\n<p><strong>1、基本数据类型：</strong></p>\n<p>基本数据类型<code>string</code>是<strong>无法绑定属性和方法</strong>的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.<span class=\"property\">aaa</span> = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> str); <span class=\"comment\">//打印结果为：string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"property\">aaa</span>); <span class=\"comment\">//打印结果为：undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，当我们尝试打印<code>str.aaa</code>的时候，会发现打印结果为：undefined。也就是说，不能给 <code>string</code> 绑定属性和方法。</p>\n<p>当然，我们可以打印 str.length、str.indexOf(“m”)等等。因为这两个方法的底层做了数据类型转换（<strong>临时</strong>将 <code>string</code> 字符串转换为 <code>String</code> 对象，然后再调用内置方法），也就是我们在下一段将要讲到的<strong>包装类</strong>。</p>\n<p><strong>2、引用数据类型：</strong></p>\n<p>引用数据类型<code>String</code>是可以绑定属性和方法的。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strObj = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;smyhvae&#x27;</span>);</span><br><span class=\"line\">strObj.<span class=\"property\">aaa</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(strObj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> strObj); <span class=\"comment\">//打印结果：Object</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(strObj.<span class=\"property\">aaa</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180202_1351.png\"></p>\n<p>内置对象 Number 也有一些自带的方法，比如：</p>\n<ul>\n<li><p>Number.MAX_VALUE;</p>\n</li>\n<li><p>Number.MIN_VALUE;</p>\n</li>\n</ul>\n<p>内置对象 Boolean 也有一些自带的方法，但是用的不多。</p>\n<h3 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h3><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>JS 中的数据类型包括以下几种。</p>\n<ul>\n<li><p>基本数据类型：String 字符串、Number 数值、BigInt 大型数值、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol。</p>\n</li>\n<li><p>引用数据类型：Object 对象。</p>\n</li>\n</ul>\n<p>JS 为我们提供了三个<strong>基本包装类</strong>：</p>\n<ul>\n<li><p>String()：将基本数据类型字符串，转换为 String 对象。</p>\n</li>\n<li><p>Number()：将基本数据类型的数字，转换为 Number 对象。</p>\n</li>\n<li><p>Boolean()：将基本数据类型的布尔值，转换为 Boolean 对象。</p>\n</li>\n</ul>\n<p>通过上面这这三个包装类，我们可以<strong>将基本数据类型的数据转换为对象</strong>。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> bool = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> str1); <span class=\"comment\">// 打印结果：string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> str2); <span class=\"comment\">// 注意，打印结果：object</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的是</strong>：我们在实际应用中一般不会使用基本数据类型的<strong>对象</strong>。如果使用基本数据类型的对象，在做一些比较时可能会带来一些<strong>不可预期</strong>的结果。</p>\n<p>比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> boo1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> boo2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boo1 === boo2); <span class=\"comment\">// 打印结果竟然是：false</span></span><br></pre></td></tr></table></figure>\n\n<p>再比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> boo3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (boo3) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>); <span class=\"comment\">// 这行代码竟然执行了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本包装类型的作用\"><a href=\"#基本包装类型的作用\" class=\"headerlink\" title=\"基本包装类型的作用\"></a>基本包装类型的作用</h3><p>当我们对一些基本数据类型的值去调用属性和方法时，JS引擎会<strong>临时使用包装类将基本数据类型转换为引用数据类型</strong>（即“隐式类型转换”），这样的话，基本数据类型就有了属性和方法，然后再调用对象的属性和方法；调用完以后，再将其转换为基本数据类型。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"property\">length</span>); <span class=\"comment\">// 打印结果：11</span></span><br></pre></td></tr></table></figure>\n\n<p>比如，上面的代码，执行顺序是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 步骤（1）：把简单数据类型 string 转换为 引用数据类型  String，保存到临时变量中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 步骤（2）：把临时变量的值 赋值给 str</span></span><br><span class=\"line\">str = temp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  步骤（3）：销毁临时变量</span></span><br><span class=\"line\">temp = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在底层，字符串以字符数组的形式保存\"><a href=\"#在底层，字符串以字符数组的形式保存\" class=\"headerlink\" title=\"在底层，字符串以字符数组的形式保存\"></a>在底层，字符串以字符数组的形式保存</h2><p>在底层，字符串是以字符数组的形式保存的。代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;smyhvae&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"property\">length</span>); <span class=\"comment\">// 获取字符串的长度</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str[<span class=\"number\">2</span>]); <span class=\"comment\">// 获取字符串中的第3个字符（下标为2的字符）</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，<code>smyhvae</code>这个字符串在底层是以<code>[&quot;s&quot;, &quot;m&quot;, &quot;y&quot;, &quot;h&quot;, &quot;v&quot;, &quot;a&quot;, &quot;e&quot;]</code>的形式保存的。因此，我们既可以获取字符串的长度，也可以获取指定索引 index 位置的单个字符。这很像数组中的操作。</p>\n<p>再比如，String 对象的很多内置方法，也可以直接给字符串用。此时，也是临时将字符串转换为 String 对象，然后再调用内置方法。</p>\n","text":"基本数据类型不能绑定属性和方法属性和方法只能添加给对象，不能添加给基本数据类型。我们拿字符串来举例。1、基本数据类型：基本数据类型string是无法绑定属性和方法的。1<br>2<br>3<br>4<br>5<br>var str = &#x27;qianguyihao&#x27","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"13-对象简介","slug":"JavaScript/13-对象简介","date":"2023-02-15T12:06:59.464Z","updated":"2023-02-15T12:23:48.156Z","comments":true,"path":"api/articles/JavaScript/13-对象简介.json","excerpt":"","keywords":null,"cover":"https://img.smyhvae.com/20221014_1130.png","content":"<h2 id=\"对象简介\"><a href=\"#对象简介\" class=\"headerlink\" title=\"对象简介\"></a>对象简介</h2><h3 id=\"对象的概念\"><a href=\"#对象的概念\" class=\"headerlink\" title=\"对象的概念\"></a>对象的概念</h3><p>在 JavaScript 中，对象是一组<strong>无序</strong>的相关属性和方法的集合。</p>\n<p><strong>对象的作用是：封装信息</strong>。比如 Student 类里可以封装学生的姓名、年龄、成绩等。</p>\n<p>对象具有<strong>特征</strong>（属性）和<strong>行为</strong>（方法）。</p>\n<h3 id=\"对象包括哪些数据类型\"><a href=\"#对象包括哪些数据类型\" class=\"headerlink\" title=\"对象包括哪些数据类型\"></a>对象包括哪些数据类型</h3><p>我们知道，JS 中的数据类型，包括以下几种：</p>\n<ul>\n<li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、BigInt 大型数值、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol。</p>\n</li>\n<li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p>\n</li>\n</ul>\n<p>只要不是那七种基本数据类型，就全都是对象。对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p>\n<h3 id=\"对象的分类\"><a href=\"#对象的分类\" class=\"headerlink\" title=\"对象的分类\"></a>对象的分类</h3><p>1、内置对象：</p>\n<ul>\n<li><p>由 ES 标准中定义的对象，在任何的 ES 的实现中都可以使用。</p>\n</li>\n<li><p>比如：Object、Math、Date、String、Array、Number、Boolean、Function 等。</p>\n</li>\n</ul>\n<p>2、宿主对象：</p>\n<ul>\n<li><p>由 JS 的运行环境提供的对象，目前来讲主要指由浏览器提供的对象。</p>\n</li>\n<li><p>比如 BOM、DOM，比如<code>console</code>、<code>document</code>。</p>\n</li>\n</ul>\n<p>3、自定义对象：</p>\n<ul>\n<li>由开发人员自己创建的对象。</li>\n</ul>\n<p>通过 new 关键字创建出来的对象实例，都是属于对象类型。</p>\n<h2 id=\"自定义对象\"><a href=\"#自定义对象\" class=\"headerlink\" title=\"自定义对象\"></a>自定义对象</h2><h3 id=\"为什么需要自定义对象\"><a href=\"#为什么需要自定义对象\" class=\"headerlink\" title=\"为什么需要自定义对象\"></a>为什么需要自定义对象</h3><p>保存一个值时，可以使用<strong>变量</strong>，保存多个值（一组值）时，可以使用<strong>数组</strong>。</p>\n<p>比如，如果要保存一个人的信息，通过数组的方式可以这样保存：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;王二&#x27;</span>, <span class=\"number\">35</span>, <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"string\">&#x27;180&#x27;</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上面这种表达方式比较乱。而如果用 JS 中的<strong>自定义对象</strong>来表达，<strong>结构会更清晰</strong>。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">favor</span>: [<span class=\"string\">&#x27;阅读&#x27;</span>, <span class=\"string\">&#x27;羽毛球&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，自定义对象里面的属性均是<strong>键值对（key: value）</strong>，表示属性和值的映射关系：</p>\n<ul>\n<li><p>键&#x2F;属性：属性名。</p>\n</li>\n<li><p>值：属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）。</p>\n</li>\n</ul>\n<h3 id=\"自定义对象的语法\"><a href=\"#自定义对象的语法\" class=\"headerlink\" title=\"自定义对象的语法\"></a>自定义对象的语法</h3><p>语法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: value,</span><br><span class=\"line\">    <span class=\"attr\">key</span>: value,</span><br><span class=\"line\">    <span class=\"attr\">key</span>: value,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>key 和 value 之间用冒号分隔，每组 key:vaue 之间用逗号分隔，最后一对 key:value 的末尾可以写逗号，也可以不写逗号。</p>\n<p>问：对象的属性名是否需要加引号？</p>\n<p>答：如果属性名不符合 JS 标识符的命名规范，则需要用引号包裹。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;my-name&#x27;</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>补充：其实，JS 的内置对象、宿主对象，底层也是通过自定义对象的形式（也就是键值对的形式）进行封装的。</p>\n<h2 id=\"对象的属性值补充\"><a href=\"#对象的属性值补充\" class=\"headerlink\" title=\"对象的属性值补充\"></a>对象的属性值补充</h2><h3 id=\"对象的方法【重要】\"><a href=\"#对象的方法【重要】\" class=\"headerlink\" title=\"对象的方法【重要】\"></a>对象的方法【重要】</h3><p>对象的属性值可以是任何的数据类型，也可以是个<strong>函数</strong>（也称之为方法）。换而言之，<strong>如果对象的属性值是函数，则这个函数也被称之为对象的“方法”</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没加括号，就是获取方法</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">sayName</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;-----------&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 加了括号，就是调用方法。即：执行函数内容，并执行函数体的内容</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">sayName</span>());</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"https://img.smyhvae.com/20221014_1130.png\"></p>\n<h3 id=\"对象中的属性值，也可以是一个对象\"><a href=\"#对象中的属性值，也可以是一个对象\" class=\"headerlink\" title=\"对象中的属性值，也可以是一个对象\"></a>对象中的属性值，也可以是一个对象</h3><p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建对象 obj1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj1.<span class=\"property\">test</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建对象 obj2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj2.<span class=\"property\">name</span> = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将整个 obj2 对象，设置为 obj1 的属性</span></span><br><span class=\"line\">obj1.<span class=\"property\">test</span> = obj2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">test</span>.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果为：qianguyihao</p>\n<h2 id=\"传值和传址的区别\"><a href=\"#传值和传址的区别\" class=\"headerlink\" title=\"传值和传址的区别\"></a>传值和传址的区别</h2><h3 id=\"对象保存在哪里\"><a href=\"#对象保存在哪里\" class=\"headerlink\" title=\"对象保存在哪里\"></a>对象保存在哪里</h3><p>1、基本数据类型的值直接保存在<strong>栈内存</strong>中，变量与变量之间是独立的，值与值之间是独立的，修改一个变量不会影响其他的变量。</p>\n<p>2、对象是保存到<strong>堆内存</strong>中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间。变量保存的是对象的内存地址（对象的引用）。换而言之，对象的值是保存在<strong>堆内存</strong>中的，而对象的引用（即变量）是保存在<strong>栈内存</strong>中的。</p>\n<p><strong>如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响</strong>。这句话很重要，我们来看看下面的例子。</p>\n<h3 id=\"传值\"><a href=\"#传值\" class=\"headerlink\" title=\"传值\"></a>传值</h3><p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a; <span class=\"comment\">// 将 a 赋值给 b</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">2</span>; <span class=\"comment\">// 修改 b 的值</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，当我修改 b 的值之后，a 的值并不会发生改变。这个大家都知道。我们继续往下看。</p>\n<h3 id=\"传址（一个经典的例子）\"><a href=\"#传址（一个经典的例子）\" class=\"headerlink\" title=\"传址（一个经典的例子）\"></a>传址（一个经典的例子）</h3><p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&#x27;孙悟空&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1; <span class=\"comment\">// 将 obj1 的地址赋值给 obj2。从此， obj1 和 obj2 指向了同一个堆内存空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改obj2的name属性</span></span><br><span class=\"line\">obj2.<span class=\"property\">name</span> = <span class=\"string\">&#x27;猪八戒&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，当我修改 obj2 的 name 属性后，会发现，obj1 的 name 属性也会被修改。因为 obj1 和 obj2 指向的是堆内存中的同一个地址。</p>\n<p>这个例子要尤其注意，实战开发中，很容易忽略。</p>\n<p>对于引用类型的数据，赋值相当于地址拷贝，a、b 指向了同一个堆内存地址。所以改了 b，a 也会变；本质上 a、b 就是一个东西。</p>\n<p>如果你打算把引用类型 A 的值赋值给 B，让 A 和 B 相互不受影响的话，可以通过 Object.assign() 来复制对象。效果如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;孙悟空&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制对象：把 obj1 赋值给 obj3。两者之间互不影响</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, obj1);</span><br></pre></td></tr></table></figure>\n","text":"对象简介对象的概念在 JavaScript 中，对象是一组无序的相关属性和方法的集合。对象的作用是：封装信息。比如 Student 类里可以封装学生的姓名、年龄、成绩等。对象具有特征（属性）和行为（方法）。对象包括哪些数据类型我们知道，JS 中的数据类型，包括以下几种：基本数据类","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"12-流程控制语句：循环结构（for和while）","slug":"JavaScript/12-流程控制语句：循环结构（for和while）","date":"2023-02-15T12:06:59.462Z","updated":"2023-02-15T12:23:14.198Z","comments":true,"path":"api/articles/JavaScript/12-流程控制语句：循环结构（for和while）.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20181229_1415.png","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>循环语句：通过循环语句可以反复执行一段代码多次。</p>\n<h2 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h2><h3 id=\"for-循环的语法\"><a href=\"#for-循环的语法\" class=\"headerlink\" title=\"for 循环的语法\"></a>for 循环的语法</h3><p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(①初始化表达式; ②条件表达式; ④更新表达式)&#123;</span><br><span class=\"line\">\t③语句...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①执行初始化表达式，初始化变量（初始化表达式只会执行一次）</span><br><span class=\"line\"></span><br><span class=\"line\">②执行条件表达式，判断是否执行循环：</span><br><span class=\"line\">\t如果为true，则执行循环③</span><br><span class=\"line\">\t如果为false，终止循环</span><br><span class=\"line\"></span><br><span class=\"line\">④执行更新表达式，更新表达式执行完毕继续重复②</span><br></pre></td></tr></table></figure>\n\n<p>for 循环举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的解释：i 是循环变量，1 是初始值，i&lt;100是执行条件，i++是步长。</p>\n<h3 id=\"for-循环举例\"><a href=\"#for-循环举例\" class=\"headerlink\" title=\"for 循环举例\"></a>for 循环举例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">13</span>; i = i + <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的遍历步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序一运行，将执行let i = 1;这条语句， 所以i的值是1。</span><br><span class=\"line\">然后程序会验证一下i &lt; 13是否满足，1&lt;13是真，所以执行一次循环体（就是大括号里面的语句）。</span><br><span class=\"line\">执行完循环体之后，会执行i=i+4这条语句，所以i的值，是5。</span><br><span class=\"line\"></span><br><span class=\"line\">程序会会验证一下i &lt; 13是否满足，5&lt;13是真，所以执行一次循环体（就是大括号里面的语句）。</span><br><span class=\"line\">执行完循环体之后，会执行i=i+4这条语句，所以i的值，是9。</span><br><span class=\"line\"></span><br><span class=\"line\">程序会会验证一下i &lt; 13是否满足，9&lt;13是真，所以执行一次循环体（就是大括号里面的语句）。</span><br><span class=\"line\">执行完循环体之后，会执行i=i+4这条语句，所以i的值，是13。</span><br><span class=\"line\"></span><br><span class=\"line\">程序会会验证一下i &lt; 13是否满足，13&lt;13是假，所以不执行循环体了，将退出循环。</span><br><span class=\"line\"></span><br><span class=\"line\">最终输出输出结果为：1、5、9</span><br></pre></td></tr></table></figure>\n\n<p>接下来做几个题目。</p>\n<p><strong>题目 1</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i = i + <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    i = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：2、6、10</p>\n<p><strong>题目 2</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：11</p>\n<p><strong>题目 3</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">7</span>; i = i + <span class=\"number\">3</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：7</p>\n<p><strong>题目 4</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>死循环。</p>\n<h2 id=\"while-循环语句\"><a href=\"#while-循环语句\" class=\"headerlink\" title=\"while 循环语句\"></a>while 循环语句</h2><h3 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(条件表达式)&#123;</span><br><span class=\"line\">\t语句...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while语句在执行时，先对条件表达式进行求值判断：</span><br><span class=\"line\"></span><br><span class=\"line\">\t如果值为true，则执行循环体：</span><br><span class=\"line\">\t\t循环体执行完毕后，继续对表达式进行判断</span><br><span class=\"line\">\t\t如果为true，则继续执行循环体，以此类推</span><br><span class=\"line\"></span><br><span class=\"line\">\t如果值为false，则终止循环</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果有必要的话，我们可以使用 break 来终止循环</strong>。</p>\n<h3 id=\"do…while-循环\"><a href=\"#do…while-循环\" class=\"headerlink\" title=\"do…while 循环\"></a>do…while 循环</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">\t语句...</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(条件表达式)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do...while语句在执行时，会先执行循环体：</span><br><span class=\"line\"></span><br><span class=\"line\">\t循环体执行完毕以后，再对while后的条件表达式进行判断：</span><br><span class=\"line\">\t\t如果结果为true，则继续执行循环体，执行完毕继续判断，以此类推</span><br><span class=\"line\">\t\t如果结果为false，则终止循环</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while-循环和-do…while-循环的区别\"><a href=\"#while-循环和-do…while-循环的区别\" class=\"headerlink\" title=\"while 循环和 do…while 循环的区别\"></a>while 循环和 do…while 循环的区别</h3><p>这两个语句的功能类似，不同的是：</p>\n<ul>\n<li>while：先判断后执行。只有条件表达式为真，才会执行循环体。</li>\n<li>do…while：先执行后判断。无论条件表达式是否为真，循环体至少会被执行一次。</li>\n</ul>\n<h3 id=\"while-循环举例\"><a href=\"#while-循环举例\" class=\"headerlink\" title=\"while 循环举例\"></a>while 循环举例</h3><p>题目：假如投资的年利率为 5%，试求从 1000 块增长到 5000 块，需要花费多少年？</p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             * 假如投资的年利率为5%，试求从1000块增长到5000块，需要花费多少年</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//定义一个变量，表示当前的钱数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> money = <span class=\"number\">1000</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//定义一个计数器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//定义一个while循环来计算每年的金额</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">while</span> (money &lt; <span class=\"number\">5000</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                money *= <span class=\"number\">1.05</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//使count自增</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                count++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(money);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;一共需要&#x27;</span> + count + <span class=\"string\">&#x27;年&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5003.18854203379</span><br><span class=\"line\"></span><br><span class=\"line\">一共需要33年</span><br></pre></td></tr></table></figure>\n\n<p>另外，你也可以自己算一下，假如投资的年利率为 5%，从 1000 块增长到 1 万块，需要花费 48 年：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10401.269646942128</span><br><span class=\"line\">一共需要48年</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"break-和-continue\"><a href=\"#break-和-continue\" class=\"headerlink\" title=\"break 和 continue\"></a>break 和 continue</h2><blockquote>\n<p>这个知识点非常重要。</p>\n</blockquote>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><ul>\n<li><p>break 可以用来退出 switch 语句或退出<strong>整个</strong>循环语句（循环语句包括 for 循环、while 循环。不包括 if。单独的 if 语句里不能用 break 和 continue，否则会报错）。</p>\n</li>\n<li><p>break 会立即终止离它<strong>最近</strong>的那个循环语句。</p>\n</li>\n<li><p>可以为循环语句创建一个 label，来标识当前的循环（格式：label:循环语句）。使用 break 语句时，可以在 break 后跟着一个 label，这样 break 将会结束指定的循环，而不是最近的。</p>\n</li>\n</ul>\n<p><strong>举例 1</strong>：通过 break 终止循环语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i的值:&#x27;</span> + i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 注意，虽然在 if 里 使用了 break，但这里的 break 是服务于外面的 for 循环。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i的值:0</span><br><span class=\"line\">i的值:1</span><br><span class=\"line\">i的值:2</span><br></pre></td></tr></table></figure>\n\n<p><strong>举例 2</strong>：label 的使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">outer</span>: <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;外层循环 i 的值：&#x27;</span> + i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span> outer; <span class=\"comment\">// 直接跳出outer所在的外层循环（这个outer是我自定义的label）</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;内层循环 j 的值:&#x27;</span> + j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">外层循环 i 的值：0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><ul>\n<li><p>continue 只能用于循环语句（包括 for 循环、while 循环，不包括 if。单独的 if 语句里不能用 break 和 continue，否则会报错）。可以用来跳过<strong>当次</strong>循环，继续下一次循环。</p>\n</li>\n<li><p>同样，continue 默认只会离他<strong>最近</strong>的循环起作用。</p>\n</li>\n<li><p>同样，如果需要跳过指定的当次循环，可以使用 label 标签。</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i的值:&#x27;</span> + i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i的值:1</span><br><span class=\"line\"></span><br><span class=\"line\">i的值:3</span><br><span class=\"line\"></span><br><span class=\"line\">i的值:5</span><br><span class=\"line\"></span><br><span class=\"line\">i的值:7</span><br><span class=\"line\"></span><br><span class=\"line\">i的值:9</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"各种练习\"><a href=\"#各种练习\" class=\"headerlink\" title=\"各种练习\"></a>各种练习</h2><h3 id=\"练习一：质数相关\"><a href=\"#练习一：质数相关\" class=\"headerlink\" title=\"练习一：质数相关\"></a>练习一：质数相关</h3><p><strong>题目</strong>：在页面中接收一个用户输入的数字，并判断该数是否是质数。</p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            质数：只能被1和它自身整除的数，1不是质数也不是合数，质数必须是大于1的自然数。</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">         */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> num = <span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入一个大于1的整数:&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//判断这个值是否合法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;该值不合法！&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//先用flag标志位，来保存当前的数的状态</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//默认当前num是质数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//判断num是否是质数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//获取2-num之间的数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; num; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">//console.log(i);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">//判断num是否能被i整除</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (num % i == <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">//一旦发现：如果num能被i整除，则说明num一定不是质数，</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">//此时：设置flag为false，然后跳出 for 循环</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        flag = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">break</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//如果num是质数则输出</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (flag) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(num + <span class=\"string\">&#x27;是质数！！！&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;这个不是质数&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"练习二：质数相关\"><a href=\"#练习二：质数相关\" class=\"headerlink\" title=\"练习二：质数相关\"></a>练习二：质数相关</h3><p><strong>题目</strong>：打印 1~100 之间的所有质数</p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             * 打印出1-100之间所有的质数</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//打印2-100之间所有的数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//创建一个布尔值，用来保存结果，默认i是质数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//判断i是否是质数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//获取到2-i之间的所有的数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">2</span>; j &lt; i; j++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">//判断i是否能被j整除</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (i % j == <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">//如果进入判断则证明i不是质数,修改flag值为false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        flag = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//如果是质数，则打印i的值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (flag) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20181229_1415.png\"></p>\n<h3 id=\"练习三：99-乘法表\"><a href=\"#练习三：99-乘法表\" class=\"headerlink\" title=\"练习三：99 乘法表\"></a>练习三：99 乘法表</h3><p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">width</span>: <span class=\"number\">2000px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">span</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             * 1.打印99乘法表</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             *   1*1=1</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             *   1*2=2 2*2=4</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             *   1*3=3 2*3=6 3*3=9</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             *   1*4=4 2*4=8 3*4=12 4*4=16</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             *                      ....9*9=81</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             *</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             * 2.打印出1-100之间所有的质数</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">             */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//创建外层循环，用来控制乘法表的高度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//创建一个内层循环来控制图形的宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;span&gt;&#x27;</span> + j + <span class=\"string\">&#x27;*&#x27;</span> + i + <span class=\"string\">&#x27;=&#x27;</span> + i * j + <span class=\"string\">&#x27;&lt;/span&gt;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//输出一个换行</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;&lt;br /&gt;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<p><img src=\"http://img.smyhvae.com/20181229_1410.png\"></p>\n","text":"前言循环语句：通过循环语句可以反复执行一段代码多次。for 循环for 循环的语法语法：1<br>2<br>3<br>for(①初始化表达式; ②条件表达式; ④更新表达式)&#123;<br>\t③语句...<br>&#125;<br>执行流程：1<br>2<br>3<br>4<","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"11-流程控制语句：选择结构","slug":"JavaScript/11-流程控制语句：选择结构（if和switch）","date":"2023-02-15T12:06:59.460Z","updated":"2023-02-15T12:22:44.180Z","comments":true,"path":"api/articles/JavaScript/11-流程控制语句：选择结构（if和switch）.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20181227_1200.png","content":"<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><p>用<code>&#123;&#125;</code>包围起来的代码，就是代码块。</p>\n<p>在 ES5 语法中，代码块，只具有<strong>分组</strong>的作用，没有其他的用途。代码块中的内容，在外部是完全可见的。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;qianguyihao&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;千古壹号&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a = &#x27;</span> + a);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：（可以看出，虽然变量 a 是定义在代码块中的，但是在外部依然可以访问）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">千古壹号</span><br><span class=\"line\">a = 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流程控制语句\"><a href=\"#流程控制语句\" class=\"headerlink\" title=\"流程控制语句\"></a>流程控制语句</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候我们要通过控制语句的执行顺序来实现我们想要的业务逻辑和功能。</p>\n<h3 id=\"流程控制语句分类\"><a href=\"#流程控制语句分类\" class=\"headerlink\" title=\"流程控制语句分类\"></a>流程控制语句分类</h3><ul>\n<li><p>顺序结构</p>\n</li>\n<li><p>选择结构：if 语句、switch 语句</p>\n</li>\n<li><p>循环结构：while 语句、for 语句</p>\n</li>\n</ul>\n<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><p>按照代码的先后顺序，依次执行。结构图如下：</p>\n<p><img src=\"http://img.smyhvae.com/20181227_1200.png\"></p>\n<h2 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h2><p>if 语句有以下三种形式。</p>\n<h3 id=\"if-语句的三种形式\"><a href=\"#if-语句的三种形式\" class=\"headerlink\" title=\"if 语句的三种形式\"></a>if 语句的三种形式</h3><p>形式1：（条件成立才执行。如果条件不成立，那就什么都不做）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (条件表达式) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件为真时，做的事情</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于非布尔类型的数据，会先转换成布尔类型再判断。下同。</p>\n<p>形式 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (条件表达式) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件为真时，做的事情</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件为假时，做的事情</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>形式3：（多分支的 if 语句）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (条件表达式<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件1为真时，做的事情</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (条件表达式<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件1不满足，条件2满足时，做的事情</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (条件表达式<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件1、2不满足，条件3满足时，做的事情</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件1、2、3都不满足时，做的事情</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上所有的语句体中，只执行其中一个。</p>\n<h3 id=\"做个题目\"><a href=\"#做个题目\" class=\"headerlink\" title=\"做个题目\"></a>做个题目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据BMI（身体质量指数）显示一个人的体型。</span><br><span class=\"line\">BMI指数，就是体重、身高的一个计算公式。公式是：</span><br><span class=\"line\">BMI =体重÷身高的平方</span><br><span class=\"line\"></span><br><span class=\"line\">比如，老师的体重是81.6公斤，身高是1.71米。</span><br><span class=\"line\">那么老师的BMI就是  81.6 ÷ 1.712     等于 27.906022365856163</span><br><span class=\"line\"></span><br><span class=\"line\">过轻：低于18.5</span><br><span class=\"line\">正常：18.5-24.99999999</span><br><span class=\"line\">过重：25-27.9999999</span><br><span class=\"line\">肥胖：28-32</span><br><span class=\"line\">非常肥胖, 高于32</span><br><span class=\"line\"></span><br><span class=\"line\">用JavaScript开发一个程序，让用户先输入自己的体重，然后输入自己的身高（弹出两次prompt框）。</span><br><span class=\"line\">计算它的BMI，根据上表，弹出用户的身体情况。比如“过轻” 、 “正常” 、“过重” 、 “肥胖” 、“非常肥胖”。</span><br></pre></td></tr></table></figure>\n\n<p><strong>答案</strong>：</p>\n<p>写法 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一步，输入身高和体重</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> height = <span class=\"built_in\">parseFloat</span>(<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入身高，单位是米&#x27;</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> weight = <span class=\"built_in\">parseFloat</span>(<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入体重，单位是公斤&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">//第二步，计算BMI指数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">BMI</span> = weight / <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(height, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//第三步，if语句来判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable constant_\">BMI</span> &lt; <span class=\"number\">18.5</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;偏瘦&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable constant_\">BMI</span> &lt; <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;正常&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable constant_\">BMI</span> &lt; <span class=\"number\">28</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;过重&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable constant_\">BMI</span> &lt;= <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;肥胖&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;非常肥胖&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写法 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一步，输入身高和体重</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> height = <span class=\"built_in\">parseFloat</span>(<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入身高，单位是米&#x27;</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> weight = <span class=\"built_in\">parseFloat</span>(<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入体重，单位是公斤&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">//第二步，计算BMI指数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">BMI</span> = weight / <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(height, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//第三步，if语句来判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable constant_\">BMI</span> &gt; <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;非常肥胖&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable constant_\">BMI</span> &gt;= <span class=\"number\">28</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;肥胖&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable constant_\">BMI</span> &gt;= <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;过重&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable constant_\">BMI</span> &gt;= <span class=\"number\">18.5</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;正常&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;偏瘦&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"if-语句的嵌套\"><a href=\"#if-语句的嵌套\" class=\"headerlink\" title=\"if 语句的嵌套\"></a>if 语句的嵌套</h3><p>我们通过下面这个例子来引出 if 语句的嵌套。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个加油站为了鼓励车主多加油，所以加的多有优惠。</span><br><span class=\"line\">92号汽油，每升6元；如果大于等于20升，那么每升5.9；</span><br><span class=\"line\">97号汽油，每升7元；如果大于等于30升，那么每升6.95</span><br><span class=\"line\">编写JS程序，用户输入自己的汽油编号，然后输入自己加多少升，弹出价格。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://img.smyhvae.com/20180117_2232.png\"></p>\n<p>代码实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一步，输入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bianhao = <span class=\"built_in\">parseInt</span>(<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;您想加什么油？填写92或者97&#x27;</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> sheng = <span class=\"built_in\">parseFloat</span>(<span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;您想加多少升？&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二步，判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (bianhao == <span class=\"number\">92</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//编号是92的时候做的事情</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sheng &gt;= <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> price = sheng * <span class=\"number\">5.9</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> price = sheng * <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bianhao == <span class=\"number\">97</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//编号是97的时候做的事情</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sheng &gt;= <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> price = sheng * <span class=\"number\">6.95</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> price = sheng * <span class=\"number\">7</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;不好意思，没有这个编号的汽油！&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;价格是&#x27;</span> + price);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"switch-语句（条件分支语句）\"><a href=\"#switch-语句（条件分支语句）\" class=\"headerlink\" title=\"switch 语句（条件分支语句）\"></a>switch 语句（条件分支语句）</h2><p>switch 语句也叫条件分支语句。</p>\n<h3 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(表达式) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 值<span class=\"number\">1</span>：</span><br><span class=\"line\">\t\t语句体<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 值<span class=\"number\">2</span>：</span><br><span class=\"line\">\t\t语句体<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>：</span><br><span class=\"line\">\t\t语句体 n+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：switch 可以理解为“开关、转换” 。case 可以理解为“案例、选项”。</p>\n<h3 id=\"switch-语句的执行流程\"><a href=\"#switch-语句的执行流程\" class=\"headerlink\" title=\"switch 语句的执行流程\"></a>switch 语句的执行流程</h3><p>流程图如下：</p>\n<p><img src=\"http://img.smyhvae.com/20190815_1501.png\"></p>\n<p>执行流程如下：</p>\n<p>（1）首先，计算出表达式的值，和各个 case 依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到 break 就会结束。</p>\n<p>（2）然后，如果所有的 case 都和表达式的值不匹配，就会执行 default 语句体部分。</p>\n<h3 id=\"switch-语句的结束条件【非常重要】\"><a href=\"#switch-语句的结束条件【非常重要】\" class=\"headerlink\" title=\"switch 语句的结束条件【非常重要】\"></a>switch 语句的结束条件【非常重要】</h3><ul>\n<li>情况 a：遇到 break 就结束（而不是遇到 default 就结束）。因为 break 在此处的作用是，立即结束并退出整个 switch 语句。</li>\n<li>情况 b：执行到程序的末尾就结束。</li>\n</ul>\n<p>我们稍后讲 case穿透的时候，你就会明白其中的奥妙了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>1、switch 后面的括号里可以是变量、常量、表达式， 通常是一个<strong>变量</strong>（一般做法是：先把表达式存放到变量中）。</p>\n<p>case 后面的值可以是变量、常量、表达式。</p>\n<p>2、**case的判断逻辑是<code>===</code>，不是<code>==</code>**。因此，字符串<code>&#39;6&#39;</code>和 数字 <code>6</code> 是不一样的。</p>\n<p>举例 1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> msg = <span class=\"string\">&#x27;notice&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (msg) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;notice&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;提示&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;warning&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;警告&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;error&#x27;</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;错误&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;默认文案&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举例 2：（case 后面的是表达式）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">28</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;未成年人&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> age &gt;= <span class=\"number\">18</span> &amp;&amp; age &lt;= <span class=\"number\">65</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;还能干活儿&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> age &gt; <span class=\"number\">65</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;该退休了&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;默认文案&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码解释：由于 switch 里的值是 true，所以，在众多的 case 语句中，会去匹配第一个符合 <code>case true</code>的语句，然后命中这条语句。</p>\n<p>3、default不一定要写在最后面。 switch 中的 default 无论放到什么位置，都会等到所有case 都不匹配再执行。default 也可以省略。</p>\n<h3 id=\"case-穿透\"><a href=\"#case-穿透\" class=\"headerlink\" title=\"case 穿透\"></a>case 穿透</h3><p>switch 语句中的<code>break</code>可以省略，但一般不建议（对于新手而言）。否则结果可能不是你想要的，会出现一个现象：<strong>case 穿透</strong>。</p>\n<p>当然，如果你能利用好 case 穿透，会让代码写得十分优雅。</p>\n<p><strong>举例 1</strong>：（case 穿透的情况）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//switch判断语句</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;星期一&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;星期二&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;星期三&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;星期四&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//break;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;星期五&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//break;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;星期六&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;星期日&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你输入的数据有误&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的运行结果，可能会令你感到意外：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">星期四</span><br><span class=\"line\">星期五</span><br><span class=\"line\">星期六</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的解释：因为在 case 4 和 case 5 中都没有 break，那语句走到 case 6 的 break 才会停止。</p>\n<p><strong>举例 2</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//switch判断语句</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> number = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (number) &#123;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是defaul语句&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// break;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;第二个呵呵:&#x27;</span> + number);</span><br><span class=\"line\">    <span class=\"comment\">//break;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;第三个呵呵:&#x27;</span> + number);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;第四个呵呵:&#x27;</span> + number);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的运行结果，你也许会意外：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是defaul语句</span><br><span class=\"line\">第二个呵呵:5</span><br><span class=\"line\">第三个呵呵:5</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的解释：代码走到 default 时，因为没有遇到 break，所以会继续往下走，直到遇见 break 或者走到程序的末尾。 从这个例子可以看出：switch 语句的结束与 default 的顺序无关。</p>\n<h2 id=\"switch-语句的实战举例：替换-if-语句\"><a href=\"#switch-语句的实战举例：替换-if-语句\" class=\"headerlink\" title=\"switch 语句的实战举例：替换 if 语句\"></a>switch 语句的实战举例：替换 if 语句</h2><p>我们实战开发中，经常需要根据接口的返回码 retCode ，来让前端做不同的展示。</p>\n<p>这种场景是业务开发中经常出现的，请一定要掌握。然而，很多人估计会这么写：</p>\n<h3 id=\"写法-1（不推荐。这种写法太挫了）\"><a href=\"#写法-1（不推荐。这种写法太挫了）\" class=\"headerlink\" title=\"写法 1（不推荐。这种写法太挫了）\"></a>写法 1（不推荐。这种写法太挫了）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> retCode = <span class=\"number\">1003</span>; <span class=\"comment\">// 返回码 retCode 的值可能有很多种情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (retCode == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;接口联调成功&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retCode == <span class=\"number\">101</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动不存在&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retCode == <span class=\"number\">103</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动未开始&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retCode == <span class=\"number\">104</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动已结束&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retCode == <span class=\"number\">1001</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;参数错误&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retCode == <span class=\"number\">1002</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;接口频率限制&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retCode == <span class=\"number\">1003</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;未登录&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retCode == <span class=\"number\">1004</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他异常返回码</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;系统君失联了，请稍候再试&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你是按照上面的 <code>if else</code>的方式来写各种条件判断，说明你的代码水平太初级了，会被人喷的，千万不要这么写。这种写法，容易导致<strong>嵌套太深，可读性很差</strong>。</p>\n<p>那要怎么改进呢？继续往下看。</p>\n<h3 id=\"写法-2（推荐。通过-return-的方式，将上面的写法进行改进）\"><a href=\"#写法-2（推荐。通过-return-的方式，将上面的写法进行改进）\" class=\"headerlink\" title=\"写法 2（推荐。通过 return 的方式，将上面的写法进行改进）\"></a>写法 2（推荐。通过 return 的方式，将上面的写法进行改进）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> retCode = <span class=\"number\">1003</span>; <span class=\"comment\">// 返回码 retCode 的值可能有很多种情况</span></span><br><span class=\"line\"><span class=\"title function_\">handleRetCode</span>(retCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法：根据接口不同的返回码，处理前端不同的显示状态</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleRetCode</span>(<span class=\"params\">retCode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retCode == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;接口联调成功&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retCode == <span class=\"number\">101</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动不存在&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retCode == <span class=\"number\">103</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动未开始&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retCode == <span class=\"number\">104</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动已结束&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retCode == <span class=\"number\">1001</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;参数错误&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retCode == <span class=\"number\">1002</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;接口频率限制&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retCode == <span class=\"number\">1003</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;未登录&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retCode == <span class=\"number\">1004</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他异常返回码</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;系统君失联了，请稍候再试&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的写法 2，是比较推荐的写法：直接通过 return 的方式，让 function 里的代码不再继续往下走，这就达到目的了。对了，因为要用到 return ，所以整段代码是封装到一个 function 里的。</p>\n<p>如果你以后看到有前端小白采用的是<strong>写法 1</strong>，请一定要把<strong>写法 2</strong>传授给他：不需要那么多的 if else，直接用 return 返回就行了。</p>\n<h3 id=\"写法-3（推荐。将-if-else-改为-switch）\"><a href=\"#写法-3（推荐。将-if-else-改为-switch）\" class=\"headerlink\" title=\"写法 3（推荐。将 if else 改为 switch）\"></a>写法 3（推荐。将 if else 改为 switch）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> retCode = <span class=\"number\">1003</span>; <span class=\"comment\">// 返回码 retCode 的值可能有很多种情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (retCode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;接口联调成功&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">101</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动不存在&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">103</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动未开始&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">104</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;活动已结束&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1001</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;参数错误&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1002</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;接口频率限制&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1003</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;未登录&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1004</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;（风控用户）提示 活动太火爆啦~军万马都在挤，请稍后再试&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他异常返回码</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;系统君失联了，请稍候再试&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在实战开发中，方式 3 是非常推荐的写法，甚至比方式 2 还要好。我们尽量不要写太多的 if 语句，避免代码嵌套过深。</p>\n<h3 id=\"switch-语句的优雅写法：适时地去掉-break\"><a href=\"#switch-语句的优雅写法：适时地去掉-break\" class=\"headerlink\" title=\"switch 语句的优雅写法：适时地去掉 break\"></a>switch 语句的优雅写法：适时地去掉 break</h3><p>我们先来看看下面这段代码：（不推荐）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> day = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;work&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;work&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;work&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;work&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;work&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;relax&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;relax&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码，咋一看，好像没啥毛病。但你有没有发现，重复代码太多了？</p>\n<p>实战开发中，凡是有重复的地方，我们都必须要想办法简化。写代码就是在不断重构的过程。</p>\n<p>上面的代码，可以改进如下：（推荐，非常优雅）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> day = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;work&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 在这里放一个 break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;relax&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 在这里放一个 break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改进后的这种写法，是最优雅的、最简洁、可读性最好的。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"if-和-switch如何选择\"><a href=\"#if-和-switch如何选择\" class=\"headerlink\" title=\"if 和 switch如何选择\"></a>if 和 switch如何选择</h3><p>如果是对区间进行判断，则建议用 if。如果是对几个固定的值进行判断，那么，数量少的话用 if，数量多的话用switch。</p>\n<h3 id=\"用-return-代替-if-else\"><a href=\"#用-return-代替-if-else\" class=\"headerlink\" title=\"用 return 代替 if else\"></a>用 return 代替 if else</h3><p>业务场景举例：</p>\n<p>在实战业务中涉及到调接口时，一般会这样做：</p>\n<ul>\n<li><p>接口返回码为 0 时，前端 resolve。</p>\n</li>\n<li><p>接口返回未登录时，前端跳转到登录页面。</p>\n</li>\n<li><p>接口返回其他情况，或者无返回时，前端 reject。</p>\n</li>\n</ul>\n<p>写法 1、if else 的写法：（不推荐）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (+res.<span class=\"property\">retCode</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (+res.<span class=\"property\">retCode</span> == <span class=\"number\">8888</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">goLogin</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写法 2、 return 的写法：（推荐）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!res || +res.<span class=\"property\">retCode</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (+res.<span class=\"property\">retCode</span> === <span class=\"number\">8888</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 未登录</span></span><br><span class=\"line\">        <span class=\"title function_\">goLogin</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">resolve</span>(res);</span><br></pre></td></tr></table></figure>\n\n<p>备注： Promise</p>\n","text":"代码块用&#123;&#125;包围起来的代码，就是代码块。在 ES5 语法中，代码块，只具有分组的作用，没有其他的用途。代码块中的内容，在外部是完全可见的。举例：1<br>2<br>3<br>4<br>5<br>6<br>7<br>&#123;<br>    var a = 2","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"10-运算符","slug":"JavaScript/10-运算符","date":"2023-02-15T12:06:59.457Z","updated":"2023-02-15T12:21:08.507Z","comments":true,"path":"api/articles/JavaScript/10-运算符.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20181222_1218.png","content":"<h2 id=\"运算符的定义和分类\"><a href=\"#运算符的定义和分类\" class=\"headerlink\" title=\"运算符的定义和分类\"></a>运算符的定义和分类</h2><h3 id=\"运算符的定义\"><a href=\"#运算符的定义\" class=\"headerlink\" title=\"运算符的定义\"></a>运算符的定义</h3><p><strong>运算符</strong>：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p>\n<p><strong>表达式</strong>：数字、运算符、变量的组合（组成的式子）。</p>\n<p>表达式最终都会有一个运算结果，我们将这个结果称为表达式的<strong>返回值</strong>。</p>\n<p>比如：<code>+</code>、<code>*</code>、<code>/</code>、<code>()</code> 都是<strong>运算符</strong>，而<code>（3+5）/2</code>则是<strong>表达式</strong>。</p>\n<p>比如：typeof 就是运算符，可以获得一个值的类型。它会将该值的类型以<strong>字符串</strong>的形式返回，返回值可以是 number、string、boolean、undefined、object。</p>\n<h3 id=\"运算符的分类\"><a href=\"#运算符的分类\" class=\"headerlink\" title=\"运算符的分类\"></a>运算符的分类</h3><p>JS 中的运算符，分类如下：</p>\n<ul>\n<li>算数运算符</li>\n<li>自增&#x2F;自减运算符</li>\n<li>一元运算符</li>\n<li>三元运算符（条件运算符）</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n<li>比较运算符</li>\n</ul>\n<p>下面来逐一讲解。</p>\n<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><p><strong>算术运算符</strong>：用于执行两个变量或值的算术运算。</p>\n<p>常见的算数运算符有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"center\">加、字符串连接</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"center\">减</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"center\">乘</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"center\">除</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"center\">获取余数（取余、取模）</td>\n</tr>\n</tbody></table>\n<p><strong>求余的举例</strong>：</p>\n<p>假设用户输入 345，怎么分别得到 3、4、5 这三个数呢？</p>\n<p><strong>答案</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">得到3的方法：345 除以100，得到3.45然后取整，得到3。即：parseInt(345/100)</span><br><span class=\"line\"></span><br><span class=\"line\">得到4的方法：345 除以100，余数是45，除以10，得到4.5，取整。即：parseInt(345 % 100 / 10)</span><br><span class=\"line\"></span><br><span class=\"line\">得到5的方法：345 除以10，余数就是5。即：345 % 10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"算数运算符的运算规则\"><a href=\"#算数运算符的运算规则\" class=\"headerlink\" title=\"算数运算符的运算规则\"></a>算数运算符的运算规则</h3><p>（1）<code>* / %</code> 的优先级高于 <code>+ -</code></p>\n<p>（2）无论是<code>+ - * / %</code>都是左结合性（从左至右计算）</p>\n<p>（2）小括号<code>( )</code>：能够影响计算顺序，且可以嵌套。没有中括号、没有大括号，只有小括号。</p>\n<p>举例 1：（取余）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> % <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 3。</p>\n<p>举例 2：（注意运算符的优先级）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span> + ((<span class=\"number\">2</span> * <span class=\"number\">3</span>) % <span class=\"number\">4</span>) / <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>结果分析：</p>\n<p>原式 &#x3D; 1 + 6 % 4 &#x2F; 3 &#x3D; 1 + 2 &#x2F; 3 &#x3D; 1.66666666666666</p>\n<h3 id=\"取模（取余）运算\"><a href=\"#取模（取余）运算\" class=\"headerlink\" title=\"取模（取余）运算\"></a>取模（取余）运算</h3><p>格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">余数 = m % n;</span><br></pre></td></tr></table></figure>\n\n<p>计算结果注意：</p>\n<ul>\n<li><p>取余运算结果的正负性，取决于 m，而不是 n。比如：<code>10 % -3</code>的运算结果是 1。<code>-10 % 3</code>的运算结果是-1。</p>\n</li>\n<li><p>如果 n &lt; 0，那就先把 n 取绝对值后，再计算。等价于 m % (-n)。</p>\n</li>\n<li><p>如果 n 是 0，那么结果是 NaN。</p>\n</li>\n<li><p>在 n &gt; 0 的情况下：</p>\n<ul>\n<li>如果 m&gt;&#x3D;n，那就正常取余。</li>\n<li>如果 m&lt;n，那结果就是 m。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"浮点数运算的精度问题\"><a href=\"#浮点数运算的精度问题\" class=\"headerlink\" title=\"浮点数运算的精度问题\"></a>浮点数运算的精度问题</h3><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时，会丢失精度，导致计算不够准确。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>); <span class=\"comment\">// 运算结果不是 0.3，而是 0.30000000000000004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0.07</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 运算结果不是 7，而是 7.000000000000001</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，<strong>不要直接判断两个浮点数是否相等</strong>。前面的文章《JavaScript 基础：基本数据类型：Number》有详细介绍。</p>\n<h3 id=\"隐式类型转换——运算符：加号\"><a href=\"#隐式类型转换——运算符：加号\" class=\"headerlink\" title=\"隐式类型转换——运算符：加号 +\"></a>隐式类型转换——运算符：加号 <code>+</code></h3><ol>\n<li><strong>字符串 + XX &#x3D; 字符串</strong></li>\n</ol>\n<p>任何值和字符串做加法运算，都会先调用 String() 函数转换为字符串，然后再做拼串操作。最终的运算结果是字符串。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result1 = <span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"string\">&#x27;3&#x27;</span>; <span class=\"comment\">// 字符串：33</span></span><br><span class=\"line\"></span><br><span class=\"line\">result2 = <span class=\"string\">&#x27;1&#x27;</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span>; <span class=\"comment\">// 字符串：123</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>Boolean + 数字 &#x3D; 数字</strong></li>\n</ol>\n<p>Boolean 型和数字型相加时， true 按 1 来算 ，false 按 0 来算。这里其实是先调 Number() 函数，将 Boolean 类型转为 Number 类型，然后再和 数字相加。</p>\n<ol start=\"3\">\n<li><strong>null + 数字 &#x3D; 数字</strong></li>\n</ol>\n<p>等价于：0 + 数字</p>\n<ol start=\"4\">\n<li><strong>undefined + 数字 &#x3D; NaN</strong></li>\n</ol>\n<p>计算结果：NaN</p>\n<ol start=\"5\">\n<li>任何值和 <strong>NaN</strong> 运算的结果都是 NaN。</li>\n</ol>\n<h3 id=\"隐式类型转换——运算符：-、-、-、\"><a href=\"#隐式类型转换——运算符：-、-、-、\" class=\"headerlink\" title=\"隐式类型转换——运算符：-、*、/、%\"></a>隐式类型转换——运算符：<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></h3><p>任何非 Number 类型的值做<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>运算时，会将这些值转换为 Number 然后再运算(内部调用的是 Number() 函数），运算结果是 Number 类型。</p>\n<p>任何数据和 NaN进行运算，结果都是NaN。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result1 = <span class=\"number\">100</span> - <span class=\"string\">&#x27;1&#x27;</span>; <span class=\"comment\">// 99</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = <span class=\"literal\">true</span> + <span class=\"title class_\">NaN</span>; <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自增和自减运算符\"><a href=\"#自增和自减运算符\" class=\"headerlink\" title=\"自增和自减运算符\"></a>自增和自减运算符</h2><h3 id=\"自增运算符\"><a href=\"#自增运算符\" class=\"headerlink\" title=\"自增运算符 ++\"></a>自增运算符 <code>++</code></h3><p>作用：可以快速对一个变量进行加1操作。只能操作变量，不能操作常量或者表达式。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a1++;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = a1++ + a2; <span class=\"comment\">// result的结果为4</span></span><br><span class=\"line\"><span class=\"comment\">// (a1+a2)++; // 报错，没有这种写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a3 = <span class=\"number\">3</span>;</span><br><span class=\"line\">a3++; <span class=\"comment\">// 报错，因为常量无法再自加</span></span><br></pre></td></tr></table></figure>\n\n<p>自增分成两种：<code>a++</code>和<code>++a</code>。共同点：</p>\n<p>（1）无论是 <code>a++</code> 还是<code>++a</code>，自增都会使原变量的值加 1。</p>\n<p>（2）<strong>我们要注意的是</strong>：<code>a</code>是变量，而<code>a++</code>和<code>++a</code>是<strong>表达式</strong>。</p>\n<p>那这两种自增，有啥区别呢？区别是：<code>a++</code> 和 <code>++a</code>的值不同：（也就是说，表达式的值不同）</p>\n<ul>\n<li><p><code>a++</code>这个表达式的值等于原变量的值（a 自增前的值）。可以这样理解：先把 a 的值赋值给表达式，然后 a 再自增。</p>\n</li>\n<li><p><code>++a</code>这个表达式的值等于新值 （a 自增后的值）。 可以这样理解：a 先自增，然后把自增后的值赋值给表达式。</p>\n</li>\n</ul>\n<h3 id=\"自减运算符\"><a href=\"#自减运算符\" class=\"headerlink\" title=\"自减运算符 --\"></a>自减运算符 <code>--</code></h3><p>作用：可以快速对一个变量进行减1操作。原理同自增运算符。</p>\n<p>开发时，大多使用后置的自增&#x2F;自减，并且代码独占一行，例如：<code>num++</code>，或者 <code>num--</code>。</p>\n<h3 id=\"代码举例\"><a href=\"#代码举例\" class=\"headerlink\" title=\"代码举例\"></a>代码举例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n1 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result1 = n1++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n1); <span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = ++n1;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n1); <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">//12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = n2--;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n2); <span class=\"comment\">// 19</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\">result2 = --n2;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n2); <span class=\"comment\">// 18</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2); <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><p>自增和自减时，a的执行过程：</p>\n<p>（1）先调用<code>Number(a)</code>函数；</p>\n<p>（2）然后将<code>Number(a)</code>的返回结果进行 加 1 操作，得到的结果赋值给 a。</p>\n<p>举例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;666&#x27;</span>; <span class=\"comment\">// 这里不能用 const 定义，否则报错。</span></span><br><span class=\"line\">a++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：667</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果： number</span></span><br></pre></td></tr></table></figure>\n\n<p>举例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">a++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：NaN。因为 Number(&#x27;abc&#x27;)的结果为 NaN，再自增后，结果依然是 NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果：number</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一元运算符\"><a href=\"#一元运算符\" class=\"headerlink\" title=\"一元运算符\"></a>一元运算符</h2><p>一元运算符，只需要一个操作数。常见的一元运算符如下。</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><blockquote>\n<p>typeof 就是典型的一元运算符，因为后面只跟一个操作数。</p>\n</blockquote>\n<p><code>typeof()</code>表示“<strong>获取变量的数据类型</strong>”，它是 JS 提供的一个操作符。返回的是小写，语法为：（两种写法都可以）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法1</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> 变量;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法2</span></span><br><span class=\"line\"><span class=\"title function_\">typeof</span>(变量);</span><br></pre></td></tr></table></figure>\n\n<p>typeof 这个运算符的返回结果就是变量的类型。那返回结果的类型是什么呢？是字符串。</p>\n<p><strong>返回结果</strong>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">typeof 的语法</th>\n<th align=\"center\">返回结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">typeof 数字（含 typeof NaN）</td>\n<td align=\"center\">number</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 字符串</td>\n<td align=\"center\">string</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 布尔型</td>\n<td align=\"center\">boolean</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 对象</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 方法</td>\n<td align=\"center\">function</td>\n</tr>\n<tr>\n<td align=\"left\">typeof null</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"left\">typeof undefined</td>\n<td align=\"center\">undefined</td>\n</tr>\n</tbody></table>\n<p>备注 1：为啥 <code>typeof null</code>的返回值也是 object 呢？因为 null 代表的是<strong>空对象</strong>。</p>\n<p>备注 2：<code>typeof NaN</code>的返回值是 number，上一篇文章中讲过，NaN 是一个特殊的数字。</p>\n<p><strong>返回结果举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果：string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> []); <span class=\"comment\">// 空数组的打印结果：object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123;&#125;); <span class=\"comment\">// 空对象的打印结果：object</span></span><br></pre></td></tr></table></figure>\n\n<p>代码解释：这里的空数组<code>[]</code>、空对象<code>&#123;&#125;</code> ，为啥他们在使用 typeof 时，返回值也是 <code>object</code>呢？因为空数组、空对象都是<strong>引用数据类型 Object</strong>。</p>\n<p>typeof 无法区分数组，但 instanceof 可以。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<p>关于 instanceof 的详细内容，以后讲对象的时候，会详细介绍。</p>\n<h3 id=\"正号-x2F-负号：-a、-a\"><a href=\"#正号-x2F-负号：-a、-a\" class=\"headerlink\" title=\"正号&#x2F;负号：+a、-a\"></a>正号&#x2F;负号：<code>+a</code>、<code>-a</code></h3><blockquote>\n<p>注意，这里说的是正号&#x2F;负号，不是加号&#x2F;减号。</p>\n</blockquote>\n<p>（1）不会改变原数值。</p>\n<p>（1）正号不会对数字产生任何影响。比如说，<code>2</code>和<code>+2</code>是一样的。</p>\n<p>（2）我们可以对其他的数据类型使用<code>+</code>，来将其转换为 number【重要的小技巧】。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">true</span>;</span><br><span class=\"line\">a = +a; <span class=\"comment\">// 注意这行代码的一元运算符操作</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a：&#x27;</span> + a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;-----------------&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;18&#x27;</span>;</span><br><span class=\"line\">b = +b; <span class=\"comment\">// 注意这行代码的一元运算符操作</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b：&#x27;</span> + b);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> b);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a：1</span><br><span class=\"line\">number</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">b：18</span><br><span class=\"line\">number</span><br></pre></td></tr></table></figure>\n\n<p>（3）负号可以对数字进行取反。</p>\n<h3 id=\"隐式类型转换——正号-x2F-负号\"><a href=\"#隐式类型转换——正号-x2F-负号\" class=\"headerlink\" title=\"隐式类型转换——正号&#x2F;负号\"></a>隐式类型转换——正号&#x2F;负号</h3><p>任何值做<code>+a</code>、<code>-a</code>运算时， 内部调用的是 Number() 函数。</p>\n<p><strong>举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;666&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = +a; <span class=\"comment\">// 对 a 进行一元运算，b是运算结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果：string。说明 a 的数据类型保持不变。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：&quot;666&quot;。不会改变原数值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> b); <span class=\"comment\">// 打印结果：number。说明 b 的数据类型发生了变化。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 打印结果：666</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h2><p>三目运算符也叫三元运算符、条件运算符。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">条件表达式 ? 语句1 : 语句2;</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行流程</strong>——条件运算符在执行时，首先对条件表达式进行求值：</p>\n<ul>\n<li><p>如果该值为 true，则执行语句 1，并返回执行结果</p>\n</li>\n<li><p>如果该值为 false，则执行语句 2，并返回执行结果</p>\n</li>\n</ul>\n<p>如果条件表达式的求值结果是一个非布尔值，会将其转换为布尔值然后再运算。</p>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>逻辑运算符有三个：</p>\n<ul>\n<li><p><code>&amp;&amp;</code>： 与（且）。两个都为真，结果才为真。特点：一假则假。</p>\n</li>\n<li><p><code>||</code> ：或。只要有一个是真，结果就是真。特点：特点: 一真则真。</p>\n</li>\n<li><p><code>!</code> ：非。对一个布尔值进行取反。特点: 真变假, 假变真。</p>\n</li>\n</ul>\n<p>注意：能参与逻辑运算的，都是布尔值。</p>\n<p><strong>连比的写法：</strong></p>\n<p>来看看逻辑运算符连比的写法。</p>\n<p>举例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> &lt; <span class=\"number\">2</span> &amp;&amp; <span class=\"number\">2</span> &lt; <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为 false。</p>\n<p>举例 2：（判断一个人的年龄是否在 18~65 岁之间）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;请输入您的年龄&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt;= <span class=\"number\">18</span> &amp;&amp; a &lt; <span class=\"number\">65</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;可以上班&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;准备退休&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PS：上面的<code>a&gt;=18 &amp;&amp; a&lt;= 65</code>千万别想当然地写成<code> 18&lt;= a &lt;= 65</code>，没有这种语法。</p>\n<h3 id=\"非布尔值的与或运算【重要】\"><a href=\"#非布尔值的与或运算【重要】\" class=\"headerlink\" title=\"非布尔值的与或运算【重要】\"></a>非布尔值的与或运算【重要】</h3><blockquote>\n<p>之所以重要，是因为在实际开发中，我们经常用这种代码做容错处理或者兜底处理。</p>\n</blockquote>\n<p>非布尔值进行<strong>与或运算</strong>时，会先将其转换为布尔值，然后再运算，但返回结果是<strong>原值</strong>。比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">5</span> &amp;&amp; <span class=\"number\">6</span>; <span class=\"comment\">// 运算过程：true &amp;&amp; true;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;result：&#x27;</span> + result); <span class=\"comment\">// 打印结果：6（也就是最后面的那个值）</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码可以看到，虽然运算过程为布尔值的运算，但返回结果是原值。</p>\n<p>那么，返回结果是哪个原值呢？我们来看一下。</p>\n<p>1、两个非布尔值，做逻辑运算：</p>\n<p><strong>与运算</strong>的返回结果：</p>\n<ul>\n<li><p>如果第一个值为 false，则只执行第一条语句，并直接返回第一个值；不会再往后执行。</p>\n</li>\n<li><p>如果第一个值为 true，则继续执行第二条语句，并返回第二个值（无论第二个值的结果如何）。</p>\n</li>\n</ul>\n<p><strong>或运算</strong>的返回结果：</p>\n<ul>\n<li><p>如果第一个值为 true，则只执行第一条语句，并直接返回第一个值；不会再往后执行。</p>\n</li>\n<li><p>如果第一个值为 false，则继续执行第二条语句，并返回第二个值（无论第二个值的结果如何）。</p>\n</li>\n</ul>\n<p>2、三个及以上的非布尔值，做逻辑运算：</p>\n<p><strong>与运算</strong>的返回结果：（value1 &amp;&amp; value2 &amp;&amp; value3）</p>\n<ul>\n<li>从左到右依次计算操作数，找到第一个为 false 的值为止。</li>\n<li>如果所有的值都为 true，则返回最后一个值。</li>\n</ul>\n<p><strong>或运算</strong>的返回结果：（value1 || value2 || value3）</p>\n<ul>\n<li>从左到右依次计算操作数，找到第一个为 true 的值为止。</li>\n<li>如果所有的值都为 false，则返回最后一个值。</li>\n</ul>\n<h3 id=\"非布尔值的-运算\"><a href=\"#非布尔值的-运算\" class=\"headerlink\" title=\"非布尔值的 ! 运算\"></a>非布尔值的 <code>!</code> 运算</h3><p>非布尔值进行<strong>非运算</strong>时，会先将其转换为布尔值，然后再运算，返回结果是<strong>布尔值</strong>。</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">a = !a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// boolean</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"短路运算的妙用【重要】\"><a href=\"#短路运算的妙用【重要】\" class=\"headerlink\" title=\"短路运算的妙用【重要】\"></a>短路运算的妙用【重要】</h3><blockquote>\n<p>下方举例中的写法技巧，在实际开发中，经常用到。这种写法，是一种很好的「容错、容灾、降级」方案，需要多看几遍。</p>\n</blockquote>\n<p>1、JS 中的<code>&amp;&amp;</code>属于<strong>短路</strong>的与：</p>\n<ul>\n<li><p>如果第一个值为 false，则不会执行后面的内容。</p>\n</li>\n<li><p>如果第一个值为 true，则继续执行第二条语句，并返回第二个值。</p>\n</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第一个值为true，会继续执行后面的内容</span></span><br><span class=\"line\">a1 &amp;&amp; <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;看 a1 出不出来&#x27;</span>); <span class=\"comment\">// 可以弹出 alert 框</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第一个值为false，不会继续执行后面的内容</span></span><br><span class=\"line\">a2 &amp;&amp; <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;看 a2 出不出来&#x27;</span>); <span class=\"comment\">// 不会弹出 alert 框</span></span><br></pre></td></tr></table></figure>\n\n<p>2、JS 中的<code>||</code>属于<strong>短路</strong>的或：</p>\n<ul>\n<li><p>如果第一个值为 true，则不会执行后面的内容。</p>\n</li>\n<li><p>如果第一个值为 false，则继续执行第二条语句，并返回第二个值。</p>\n</li>\n</ul>\n<p>实际开发中，我们经常是这样来做「容错处理」的，如下。</p>\n<p>举例1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result; <span class=\"comment\">// 请求接口时，后台返回的内容</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> errorMsg = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// 前端的文案提示</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (result &amp; result.<span class=\"property\">retCode</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  errorMsg = <span class=\"string\">&#x27;恭喜你中奖啦~&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (result &amp;&amp; result.<span class=\"property\">retCode</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 接口返回异常码时</span></span><br><span class=\"line\">\terrorMsg = result.<span class=\"property\">msg</span> || <span class=\"string\">&#x27;活动太火爆，请稍后再试&#x27;</span>; <span class=\"comment\">// 文案提示信息，优先用 接口返回的msg字段，其次用 &#x27;活动太火爆，请稍后再试&#x27; 这个文案兜底。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 接口挂掉时</span></span><br><span class=\"line\">\terrorMsg = <span class=\"string\">&#x27;网络异常，请稍后再试&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举例2，当前端成功调用一个接口后，返回的数据为 result 对象。这个时候，我们用变量 a 来接收 result 里的图片资源：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (result.<span class=\"property\">retCode</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = result &amp;&amp; result.<span class=\"property\">data</span> &amp;&amp; result.<span class=\"property\">data</span>.<span class=\"property\">imgUrl</span> || <span class=\"string\">&#x27;http://img.smyhvae.com/20160401_01.jpg&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码的意思是，获取返回结果中的<code>result.data.imgUrl</code>这个图片资源；如果返回结果中没有 <code>result.data.imgUrl</code> 这个字段，就用 <code>http://img.smyhvae.com/20160401_01.jpg</code> 作为<strong>兜底</strong>图片。这种写法，在实际开发中经常用到。</p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>赋值：将等号右侧的值赋给符号左侧的变量。</p>\n<h3 id=\"赋值运算符包括哪些\"><a href=\"#赋值运算符包括哪些\" class=\"headerlink\" title=\"赋值运算符包括哪些\"></a>赋值运算符包括哪些</h3><ul>\n<li><p><code>=</code> 直接赋值。比如 <code>var a = 5</code>。意思是，把 5 这个值，往 a 里面存一份。简称：把 5 赋值给 a。</p>\n</li>\n<li><p><code>+=</code>：比如 a +&#x3D; 5 等价于 a &#x3D; a + 5。</p>\n</li>\n<li><p><code>-=</code>：比如 a -&#x3D; 5 等价于 a &#x3D; a - 5。</p>\n</li>\n<li><p><code>*=</code>：比如 a _ &#x3D; 5 等价于 a &#x3D; a -5。</p>\n</li>\n<li><p><code>/=</code>：比如 a &#x2F;&#x3D; 5 等价于 a &#x3D; a &#x2F; 5。</p>\n</li>\n<li><p><code>%=</code>：比如 a %&#x3D; 5 等价于 a &#x3D; a % 5。</p>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>（1）算数运算符的优先级高于赋值运算符。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"number\">1</span> + <span class=\"number\">2</span>; <span class=\"comment\">// 先计算 1 + 2，再把计算结果赋值给 result。因为算数运算符的优先级高于赋值运算符。</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）赋值运算符的结合性是右结合性（从右至左的顺序计算）。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1, a2;</span><br><span class=\"line\">a1 = a2 = <span class=\"number\">3</span>; <span class=\"comment\">// 先将 3 复制给 a2，再将 a2 的值赋值给 a1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p>比较运算符可以比较两个值之间的大小关系，如果关系成立它会返回 true，如果关系不成立则返回 false。</p>\n<p>比较运算符有很多种，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;\t大于号</span><br><span class=\"line\">&lt;\t小于号</span><br><span class=\"line\">&gt;= \t大于或等于</span><br><span class=\"line\">&lt;=  小于或等于</span><br><span class=\"line\">== \t等于</span><br><span class=\"line\">=== 全等于</span><br><span class=\"line\">!=\t不等于</span><br><span class=\"line\">!== 不全等于</span><br></pre></td></tr></table></figure>\n\n<p><strong>比较运算符，得到的结果都是布尔值：要么是 true，要么是 false</strong>。如果关系成立，就返回true；如果关系不成立，就返回false。</p>\n<p>举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"number\">5</span> &gt; <span class=\"number\">10</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"非数值的比较\"><a href=\"#非数值的比较\" class=\"headerlink\" title=\"非数值的比较\"></a>非数值的比较</h3><p>（1）对于非数值进行比较时，会将其转换为数值类型（内部是调用<code>Number()方法</code>），再进行比较。</p>\n<p>举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span> &gt; <span class=\"literal\">true</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span> &gt;= <span class=\"literal\">true</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span> &gt; <span class=\"string\">&#x27;0&#x27;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//console.log(10 &gt; null); //true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//任何值和NaN做任何比较都是false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">10</span> &lt;= <span class=\"string\">&#x27;hello&#x27;</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> &gt; <span class=\"literal\">false</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）特殊情况：如果参与比较的都是字符串，则<strong>不会</strong>将其转换为数字进行比较，比较的是字符串的<strong>Unicode 编码</strong>。【非常重要，这里是个大坑，很容易踩到】</p>\n<p>比较字符编码时，是一位一位进行比较，顺序从左到右。如果大一样，则继续比较下一位。</p>\n<p>比如说，当你尝试去比较<code>&quot;123&quot;</code>和<code>&quot;56&quot;</code>这两个字符串时，你会发现，字符串”56”竟然比字符串”123”要大（因为 5 比 1 大）。也就是说，下面这样代码的打印结果，其实是 true:（这个我们一定要注意，在日常开发中，很容易忽视）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比较两个字符串时，比较的是字符串的字符编码，所以可能会得到不可预期的结果</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;56&#x27;</span> &gt; <span class=\"string\">&#x27;123&#x27;</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>因此</strong>：当我们想比较两个字符串型的数字时，<strong>一定一定要先转型</strong>再比较大小，比如 <code>parseInt()</code>。</p>\n<p>（3）任何值和 NaN 做任何比较都是 false。</p>\n<h3 id=\"符号的强调\"><a href=\"#符号的强调\" class=\"headerlink\" title=\"==符号的强调\"></a><code>==</code>符号的强调</h3><p><code>==</code>这个符号，它是<strong>判断是否等于</strong>，而不是赋值。注意事项如下：</p>\n<p>（1）<code>== </code>这个符号，还可以验证字符串是否相同。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我爱你中国&#x27;</span> == <span class=\"string\">&#x27;我爱你中国&#x27;</span>); <span class=\"comment\">// 输出结果为true</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>== </code>这个符号并不严谨，会做隐式转换，将不同的数据类型，<strong>转为相同类型</strong>进行比较。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;6&#x27;</span> == <span class=\"number\">6</span>); <span class=\"comment\">// 打印结果：true。这里的字符串&quot;6&quot;会先转换为数字6，然后再进行比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> == <span class=\"string\">&#x27;1&#x27;</span>); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span> == -<span class=\"number\">0</span>); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> == <span class=\"number\">0</span>); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）undefined 衍生自 null，所以这两个值做相等判断时，会返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> == <span class=\"literal\">null</span>); <span class=\"comment\">//打印结果：true。</span></span><br></pre></td></tr></table></figure>\n\n<p>（4）NaN 不和任何值相等，包括它本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">NaN</span> == <span class=\"title class_\">NaN</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">NaN</span> === <span class=\"title class_\">NaN</span>); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>问题：那如果我想判断 b 的值是否为 NaN，该怎么办呢？</p>\n<p>答案：可以通过 isNaN()函数来判断一个值是否是 NaN。举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(b));</span><br></pre></td></tr></table></figure>\n\n<p>如上方代码所示，如果 b 为 NaN，则返回 true；否则返回 false。</p>\n<h3 id=\"全等符号的强调\"><a href=\"#全等符号的强调\" class=\"headerlink\" title=\"===全等符号的强调\"></a><code>===</code>全等符号的强调</h3><p><strong>全等在比较时，不会做类型转换</strong>。如果要保证<strong>完全等于</strong>（即：不仅要判断取值相等，还要判断数据类型相同），我们就要用三个等号<code>===</code>。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;6&#x27;</span> === <span class=\"number\">6</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span> === <span class=\"number\">6</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>上述内容分析出：</p>\n<ul>\n<li><p><code>==</code>两个等号，不严谨，”6”和 6 是 true。</p>\n</li>\n<li><p><code>===</code>三个等号，严谨，”6”和 6 是 false。</p>\n</li>\n</ul>\n<p>另外还有：**<code>==</code>的反面是<code>!=</code>，<code>===</code>的反面是<code>!==</code>**。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> != <span class=\"number\">8</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> != <span class=\"string\">&#x27;3&#x27;</span>); <span class=\"comment\">// false，因为3==&quot;3&quot;是true，所以反过来就是false。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> !== <span class=\"string\">&#x27;3&#x27;</span>); <span class=\"comment\">// true，应为3===&quot;3&quot;是false，所以反过来是true。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同数据类型之间的大小比较\"><a href=\"#不同数据类型之间的大小比较\" class=\"headerlink\" title=\"不同数据类型之间的大小比较\"></a>不同数据类型之间的大小比较</h2><p>这一段是比较运算符的延伸，内容繁琐，新手可以不用记，等以后用到的时候再查阅。</p>\n<h3 id=\"数值类型和其他类型比较\"><a href=\"#数值类型和其他类型比较\" class=\"headerlink\" title=\"数值类型和其他类型比较\"></a>数值类型和其他类型比较</h3><p>先将其他类型隐式转换为数值类型（内部是调用<code>Number()</code>方法），然后比较大小。代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串与数字比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;200&#x27;</span> &gt; <span class=\"number\">100</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span> &gt; <span class=\"number\">100</span>); <span class=\"comment\">// false。 &#x27;a&#x27; 被转换成 NaN 进行比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;110a&#x27;</span> &gt; <span class=\"number\">100</span>); <span class=\"comment\">// false。 &#x27;110a&#x27; 被转换成 NaN 进行比较。说明`110a`在做隐式转换的时候，是调用了 Number(&#x27;110a&#x27;)方法，而不是调用  parseInt(&#x27;110a&#x27;)方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 布尔值与数字比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> == <span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">false</span> == <span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null 与数字进行比较</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> &lt; <span class=\"number\">0</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> == <span class=\"number\">0</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> &gt; <span class=\"number\">0</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> &lt;= <span class=\"number\">0</span>); <span class=\"comment\">// true。这是一个很严重的bug</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span> &gt;= <span class=\"number\">0</span>); <span class=\"comment\">// true。同上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined 与数字进行比较：结果都是 false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> &lt; <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span> &gt;= <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日期大小比较\"><a href=\"#日期大小比较\" class=\"headerlink\" title=\"日期大小比较\"></a>日期大小比较</h3><p>如果日期的格式为字符串，则比较字符串的<strong>Unicode 编码</strong>。代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myDate1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2022</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myDate2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2022</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myDate3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2022</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myDate4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2023</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate1 &lt; myDate2); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate1 &lt; myDate3); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate3 &lt; myDate4); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date1 = <span class=\"string\">&#x27;2022-08-08&#x27;</span>; <span class=\"comment\">// &quot;2022/08/08&quot;同理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> date2 = <span class=\"string\">&#x27;2022-08-09&#x27;</span>; <span class=\"comment\">// &quot;2022/08/09&quot;同理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> date3 = <span class=\"string\">&#x27;2022-09-08&#x27;</span>; <span class=\"comment\">// &quot;2022/09/08&quot;同理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> date4 = <span class=\"string\">&#x27;2023-08-08&#x27;</span>; <span class=\"comment\">// &quot;2023/08/08&quot;同理</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date1 &lt; date2); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date1 &lt; date3); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date3 &lt; date4); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> time1 = <span class=\"string\">&#x27;2022-08-08 08:00:00&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> time2 = <span class=\"string\">&#x27;2022-08-08 08:00:01&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> time3 = <span class=\"string\">&#x27;2022-08-08 08:01:00&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> time4 = <span class=\"string\">&#x27;2022-08-08 09:00:00&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(time1 &lt; time2); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(time1 &lt; time3); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(time1 &lt; time4); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据类型不同，此处是先将 myDate1 转为字符串类型，然后比较大小。可想而知，结果都是 false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate1 &gt;= date1); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDate1 &lt;= date1); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 虽然时间格式不同，但都是字符串，所以可以比较大小</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date1 &lt; time1); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/w390058785/article/details/79957206\">【JavaScript】探究数据类型之间的隐式转换和大小比较</a></li>\n</ul>\n<h2 id=\"逗号运算符\"><a href=\"#逗号运算符\" class=\"headerlink\" title=\"逗号运算符\"></a>逗号运算符</h2><p>逗号运算符一般用于简化代码。逗号运算符的优先级是所有运算符中最低的。</p>\n<p>逗号运算符也是一个运算符, 所以也有运算符结果。它的运算符结果是最后一个表达式的结果。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用逗号运算符同时定义多个变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a, b;</span><br><span class=\"line\"><span class=\"comment\">// 利用逗号运算符同时给多个变量赋值</span></span><br><span class=\"line\">a = <span class=\"number\">10</span>, b = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res1 = (<span class=\"number\">1</span> + <span class=\"number\">2</span>, <span class=\"number\">3</span> + <span class=\"number\">4</span>, <span class=\"number\">5</span> + <span class=\"number\">6</span>); <span class=\"comment\">// 打印结果：11</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h2><p>运算符的优先级如下：（优先级从高到低）</p>\n<ul>\n<li><p><code>.</code>、<code>[]</code>、<code>new</code></p>\n</li>\n<li><p><code>()</code></p>\n</li>\n<li><p><code>++</code>、<code>--</code></p>\n</li>\n<li><p><code>!</code>、<code>~</code>、<code>+</code>（单目）、<code>-</code>（单目）、<code>typeof</code>、<code>void</code>、<code>delete</code></p>\n</li>\n<li><p><code>*</code>、<code>/</code>、<code>%</code></p>\n</li>\n<li><p><code>+</code>（双目）、<code>-</code>（双目）</p>\n</li>\n<li><p><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></p>\n</li>\n<li><p>比较运算符：<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code></p>\n</li>\n<li><p>比较运算符：<code>==</code>、<code>!==</code>、<code>===</code>、<code>!==</code></p>\n</li>\n<li><p><code>&amp;</code></p>\n</li>\n<li><p><code>^</code></p>\n</li>\n<li><p><code>|</code></p>\n</li>\n<li><p>逻辑运算符：<code>&amp;&amp;</code> （注意：逻辑与 <code>&amp;&amp;</code> 比逻辑或 <code>||</code> 的优先级更高）</p>\n</li>\n<li><p>逻辑运算符：<code>||</code></p>\n</li>\n<li><p><code>?:</code></p>\n</li>\n<li><p><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>、<code>|=</code></p>\n</li>\n<li><p><code>,</code></p>\n</li>\n</ul>\n<p>备注：在实际写代码的时候，如果你不清楚哪个优先级更高，可以先尝试把括号用上。</p>\n<h2 id=\"Unicode-编码\"><a href=\"#Unicode-编码\" class=\"headerlink\" title=\"Unicode 编码\"></a>Unicode 编码</h2><blockquote>\n<p>这一段中，我们来讲引申的内容：Unicode 编码的使用。</p>\n</blockquote>\n<p>各位同学可以先在网上查一下“Unicode 编码表”。</p>\n<p>1、在字符串中可以使用转义字符输入 Unicode 编码。格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\u四位编码</span><br></pre></td></tr></table></figure>\n\n<p>举例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\u2600&#x27;</span>); <span class=\"comment\">// 这里的 2600 采用的是16进制</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\u2602&#x27;</span>); <span class=\"comment\">// 这里的 2602 采用的是16进制。</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20181222_1218.png\"></p>\n<p>2、我们还可以在 HTML 网页中使用 Unicode 编码。格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;#四位编码;</span><br></pre></td></tr></table></figure>\n\n<p>PS：我们知道，Unicode 编码采用的是 16 进制，但是，这里的编码需要使用 10 进制。</p>\n<p>举例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;font-size: 100px;&quot;</span>&gt;</span><span class=\"symbol\">&amp;#9860;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20181222_1226.png\"></p>\n","text":"运算符的定义和分类运算符的定义运算符：也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。表达式：数字、运算符、变量的组合（组成的式子）。表达式最终都会有一个运算结果，我们将这个结果称为表达式的返回值。比如：+、*、/、() 都是运算符，而（3+5）/2","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]},{"title":"09-数据类","slug":"JavaScript/09-数据类型转换","date":"2023-02-15T12:06:59.453Z","updated":"2023-02-15T12:19:59.273Z","comments":true,"path":"api/articles/JavaScript/09-数据类型转换.json","excerpt":"","keywords":null,"cover":"https://img.smyhvae.com/20211116_1458.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>变量的数据类型转换</strong>：将一种数据类型转换为另外一种数据类型。</p>\n<p>通常有三种形式的类型转换：</p>\n<ul>\n<li><p>转换为字符串类型</p>\n</li>\n<li><p>转换为数字型</p>\n</li>\n<li><p>转换为布尔型</p>\n</li>\n</ul>\n<p>把某个数据类型转换成 null 或者 undefined 没有意义。</p>\n<h2 id=\"变量的类型转换的分类\"><a href=\"#变量的类型转换的分类\" class=\"headerlink\" title=\"变量的类型转换的分类\"></a>变量的类型转换的分类</h2><p>类型转换分为两种：显式类型转换、隐式类型转换。</p>\n<h3 id=\"显式类型转换\"><a href=\"#显式类型转换\" class=\"headerlink\" title=\"显式类型转换\"></a>显式类型转换</h3><ul>\n<li><p>toString()</p>\n</li>\n<li><p>String()</p>\n</li>\n<li><p>Number()</p>\n</li>\n<li><p>parseInt(string)</p>\n</li>\n<li><p>parseFloat(string)</p>\n</li>\n<li><p>Boolean()</p>\n</li>\n</ul>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><ul>\n<li><p>isNaN ()</p>\n</li>\n<li><p>自增&#x2F;自减运算符：<code>++</code>、<code>—-</code></p>\n</li>\n<li><p>正号&#x2F;负号：<code>+a</code>、<code>-a</code></p>\n</li>\n<li><p>加号：<code>+</code></p>\n</li>\n<li><p>运算符：<code>-</code>、<code>*</code>、<code>/</code></p>\n</li>\n</ul>\n<h3 id=\"隐式类型转换（特殊）\"><a href=\"#隐式类型转换（特殊）\" class=\"headerlink\" title=\"隐式类型转换（特殊）\"></a>隐式类型转换（特殊）</h3><ul>\n<li><p>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code> 。非布尔值进行<strong>与或</strong>运算时，会先将其转换为布尔值，然后再运算。<code>&amp;&amp;</code>、<code>||</code>的运算结果是<strong>原值</strong>，<code>!</code>的运算结果为布尔值。具体可以看下一篇文章《运算符》。</p>\n</li>\n<li><p>关系运算符：<code>&lt;</code>、<code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code>等。关系运算符，得到的运算结果都是布尔值：要么是 true，要么是 false。具体可以看下一篇文章《运算符》。</p>\n</li>\n</ul>\n<p>针对上面这两种类型转换，这篇文章来详细介绍。</p>\n<h2 id=\"一、转换为-String\"><a href=\"#一、转换为-String\" class=\"headerlink\" title=\"一、转换为 String\"></a>一、转换为 String</h2><h3 id=\"1-调用-toString-方法\"><a href=\"#1-调用-toString-方法\" class=\"headerlink\" title=\"1. 调用 toString()方法\"></a>1. 调用 toString()方法</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">常量.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 这里的常量，不允许是数字，但可以是其它常量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者用一个新的变量接收转换结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = 变量.<span class=\"title function_\">toString</span>();</span><br></pre></td></tr></table></figure>\n\n<p>【重要】该方法<strong>不会影响到原变量</strong>，它会将转换的结果返回。当然我们还可以直接写成<code>a = a.toString()</code>，这样的话，就是直接修改原变量。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"string\">&#x27;qianguyihao&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"number\">29</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a3 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a4 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a5 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;qianguyihao&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">29</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null 和 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a6 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a7 = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果都是字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;qianguyihao&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a2.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;29&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a3.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a4.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;1,2,3&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a5.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这两个，打印报错</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a6.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 报错：Uncaught TypeError: Cannot read properties of null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a7.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 报错：Uncaught TypeError: Cannot read properties of undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>小技巧：在 chrome 浏览器的控制台中，Number类型、Boolean类型的打印结果是蓝色的，String类型的打印结果是黑色的。</p>\n<p>一起来看看 toString() 的注意事项。</p>\n<p>（1）null 和 undefined 这两个值没有 toString() 方法，所以它们不能用 toString() 。如果调用，会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">null</span>.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span>.<span class=\"title function_\">toString</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img.smyhvae.com/20211116_1458.png\"></p>\n<p>如果你不确定一个值是不是<code>null</code>或<code>undefined</code>，可以使用<code>String()</code>函数，下一小段会讲。</p>\n<p>（2）多数情况下，<code>toString()</code>不接收任何参数；当然也有例外：Number 类型的变量，在调用 toString()时，可以在方法中传递一个整数作为参数。此时它会把数字转换为指定的进制，如果不指定则默认转换为 10 进制。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">255</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Number数值在调用toString()时，可以在方法中传递一个整数作为参数</span></span><br><span class=\"line\"><span class=\"comment\">//此时它将会把数字转换为指定的进制,如果不指定则默认转换为10进制</span></span><br><span class=\"line\">a = a.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 转换为二进制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// &quot;11111111&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）纯小数的小数点后面，如果紧跟连续6个或6个以上的“0”时，那么，将用e来表示这个小数。代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num1 = <span class=\"number\">0.000001</span>; <span class=\"comment\">// 小数点后面紧跟五个零</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 打印结果：&quot;0.000001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> num2 = <span class=\"number\">0.0000001</span>; <span class=\"comment\">// 小数点后面紧跟六个零</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 【重点关注】打印结果：&quot;1e-7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> num3 = <span class=\"number\">1.0000001</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num3.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 打印结果：&quot;1.0000001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> num4 = <span class=\"number\">0.10000001</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num4.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 打印结果：&quot;0.10000001&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>（4）常量可以直接调用 toString() 方法，但这里的常量，不允许是数字。举例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span><span class=\"title function_\">toString</span>(); <span class=\"comment\">// 注意，会报错</span></span><br><span class=\"line\"><span class=\"number\">1.</span>.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 合法。得到的结果是字符串&quot;1&quot;</span></span><br><span class=\"line\"><span class=\"number\">1.2</span>.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 合法。得到的结果是字符串&quot;1.2&quot;</span></span><br><span class=\"line\">(<span class=\"number\">1</span>).<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 合法。得到的结果是字符串&quot;1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上方代码中，为何出现这样的打印结果？这是因为：</p>\n<ul>\n<li>第一行代码：JS引擎认为<code>1.toString()</code>中的<code>.</code>是小数点，小数点后面的字符是非法的。</li>\n<li>第二行、第三行代码：JS引擎认为第一个<code>.</code>是小数点，第二个<code>.</code>是属性访问的语法，所以能正常解释实行。</li>\n<li>第四行嗲吗：用<code>()</code>排除了<code>.</code>被视为小数点的语法解释，所以这种写法也能正常解释执行。</li>\n</ul>\n<p>参考链接：<a href=\"https://www.jianshu.com/p/88570529a03c\">你不知道的toString方法</a></p>\n<p>（5）既然常量没有方法，那它为什么可以调用 toString()呢？这是因为，除了 null、undefined之外，其他的常量都有对应的特殊的引用类型——<strong>基本包装类型</strong>，所以代码在解释执行的时候，会将常量转为基本包装类型，这样就可以调用相应的引用类型的方法。</p>\n<p>我们在后续的内容《JavaScritpt基础&#x2F;基本包装类型》中会专门讲到基本包装类型。</p>\n<h3 id=\"2-使用-String-函数\"><a href=\"#2-使用-String-函数\" class=\"headerlink\" title=\"2. 使用 String()函数\"></a>2. 使用 String()函数</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>(变量/常量);</span><br></pre></td></tr></table></figure>\n\n<p>使用 String()函数做强制类型转换时：</p>\n<ul>\n<li>对于 Number、Boolean、String、Object 而言，本质上就是调用 toString()方法，返回结果同 toString()方法。</li>\n<li>但是对于 null 和 undefined，则不会调用 toString()方法。它会将 null 直接转换为 “null”。将 undefined 直接转换为 “undefined”。</li>\n</ul>\n<p>该方法<strong>不会影响到原数值</strong>，它会将转换的结果返回。</p>\n<h3 id=\"3-隐式类型转换：字符串拼接\"><a href=\"#3-隐式类型转换：字符串拼接\" class=\"headerlink\" title=\"3. 隐式类型转换：字符串拼接\"></a>3. 隐式类型转换：字符串拼接</h3><p>格式：变量+”” 或者 变量+”abc”</p>\n<p>举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>; <span class=\"comment\">// Number 类型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + <span class=\"string\">&#x27;&#x27;</span>); <span class=\"comment\">// 打印结果：&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + <span class=\"string\">&#x27;haha&#x27;</span>); <span class=\"comment\">// 打印结果：&quot;123haha&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，打印的结果，都是字符串类型的数据。实际上底层是调用的 String() 函数。</p>\n<h3 id=\"prompt-：用户的输入\"><a href=\"#prompt-：用户的输入\" class=\"headerlink\" title=\"prompt()：用户的输入\"></a>prompt()：用户的输入</h3><p>我们在前面的《JavaScript基础&#x2F;02-JavaScript书写方式：hello world》就讲过，<code>prompt()</code>就是专门用来弹出能够让用户输入的对话框。重要的是：用户不管输入什么，都当字符串处理。</p>\n<h2 id=\"二、转换为-Number\"><a href=\"#二、转换为-Number\" class=\"headerlink\" title=\"二、转换为 Number\"></a>二、转换为 Number</h2><h3 id=\"1-使用-Number-函数\"><a href=\"#1-使用-Number-函数\" class=\"headerlink\" title=\"1. 使用 Number() 函数\"></a>1. 使用 Number() 函数</h3><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title class_\">Number</span>(变量/常量);</span><br></pre></td></tr></table></figure>\n\n<p><strong>情况一：字符串 –&gt; 数字</strong></p>\n<p>（1）如果字符串中是纯数字，则直接将其转换为数字。</p>\n<p>（2）如果字符串是一个<strong>空串</strong>或者是一个<strong>全是空格</strong>的字符串，则转换为 0。</p>\n<p>（3）只要字符串中包含了其他非数字的内容（<code>小数点</code>按数字来算），则转换为 NaN。怎么理解这里的 <strong>NaN</strong> 呢？可以这样理解，使用 Number() 函数之后，<strong>如果无法转换为数字，就会转换为 NaN</strong>。</p>\n<p><strong>情况二：布尔 –&gt; 数字</strong></p>\n<p>（1）true 转成 1</p>\n<p>（2）false 转成 0</p>\n<p><strong>情况三：null –&gt; 数字</strong>，结果为：0</p>\n<p><strong>情况四：undefined –&gt; 数字</strong>，结果为：NaN</p>\n<h3 id=\"2-隐式类型转换：正负号-a、-a\"><a href=\"#2-隐式类型转换：正负号-a、-a\" class=\"headerlink\" title=\"2. 隐式类型转换：正负号 +a、-a\"></a>2. 隐式类型转换：正负号 <code>+a</code>、<code>-a</code></h3><blockquote>\n<p>注意，这里说的是正号&#x2F;负号，不是加号&#x2F;减号。</p>\n</blockquote>\n<p>任何值做<code>+a</code>、<code>-a</code>运算时， 底层调用的是 Number() 函数。不会改变原数值；得到的结果，会改变正负性。</p>\n<p>代码举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a1); <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a1); <span class=\"comment\">// -123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = <span class=\"string\">&#x27;123abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a2); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a2); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a3 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a3); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a3); <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a4 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a4); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a4); <span class=\"comment\">// -0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a5 = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a5); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a5); <span class=\"comment\">// -0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a6 = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(+a6); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(-a6); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用-parseInt-函数：字符串-gt-整数\"><a href=\"#3-使用-parseInt-函数：字符串-gt-整数\" class=\"headerlink\" title=\"3. 使用 parseInt()函数：字符串 -&gt; 整数\"></a>3. 使用 parseInt()函数：字符串 -&gt; 整数</h3><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"built_in\">parseInt</span>(需要转换的字符串)</span><br></pre></td></tr></table></figure>\n\n<p><strong>parseInt()<strong>：将传入的数据当作</strong>字符串</strong>来处理，从左至右提取数值，一旦遇到非数值就立即停止；停止时如果还没有提取到数值，就返回NaN。</p>\n<p>parse 表示“转换”，Int 表示“整数”。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;5&#x27;</span>); <span class=\"comment\">// 得到的结果是数字 5</span></span><br></pre></td></tr></table></figure>\n\n<p>按照上面的规律，parseInt()的转换结果，列举如下。</p>\n<p><strong>情况一：字符串 –&gt; 数字</strong></p>\n<p>（1）<strong>只保留字符串最开头的数字</strong>，后面的中文自动消失。</p>\n<p>（2）如果字符串不是以数字开头，则转换为 NaN。</p>\n<p>（3）如果字符串是一个空串或者是一个全是空格的字符串，转换时会报错。</p>\n<p><strong>情况二：Boolean –&gt; 数字</strong>，结果为：NaN</p>\n<p><strong>情况三：Null –&gt; 数字</strong>，结果为：NaN</p>\n<p><strong>情况四：Undefined –&gt; 数字</strong>，结果为：NaN</p>\n<hr>\n<p>Number() 函数和 parseInt() 函数的区别：</p>\n<p>就拿<code>Number(true)</code> 和 <code>parseInt(true)/parseFloat(true)</code>来举例，二者在使用时，是有区别的：</p>\n<ul>\n<li><p>Number(true) ：千方百计地想转换为数字；如果转换不了则返回 NaN。</p>\n</li>\n<li><p>parseInt(true)&#x2F;parseFloat(true) ：提取出最前面的数字部分；没提取出来，那就返回 NaN。</p>\n</li>\n</ul>\n<p><strong>parseInt()具有以下特性</strong>：</p>\n<p>（1）parseInt()、parseFloat()会将传入的数据当作<strong>字符串</strong>来处理。也就是说，如果对<strong>非 String</strong>使用 parseInt()、parseFloat()，它会<strong>先将其转换为 String</strong> 然后再操作。【重要】</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">168.23</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(a)); <span class=\"comment\">//打印结果：168  （因为是先将 a 转为字符串&quot;168.23&quot;，然后然后再操作）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(b)); <span class=\"comment\">//打印结果：NaN （因为是先将 b 转为字符串&quot;true&quot;，然后然后再操作）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(c)); <span class=\"comment\">//打印结果：NaN  （因为是先将 c 转为字符串&quot;null&quot;，然后然后再操作）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(d)); <span class=\"comment\">//打印结果：NaN  （因为是先将 d 转为字符串&quot;undefined&quot;，然后然后再操作）</span></span><br></pre></td></tr></table></figure>\n\n\n<p>（2）<strong>只保留字符串最开头的数字</strong>，后面的中文自动消失。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;2017在公众号上写了6篇文章&#x27;</span>)); <span class=\"comment\">//打印结果：2017</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;2017.01在公众号上写了6篇文章&#x27;</span>)); <span class=\"comment\">//打印结果仍是：2017   （说明只会取整数）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;aaa2017.01在公众号上写了6篇文章&#x27;</span>)); <span class=\"comment\">//打印结果：NaN （因为不是以数字开头）</span></span><br></pre></td></tr></table></figure>\n\n\n<p>（3）自动截断小数：<strong>取整，不四舍五入</strong>。</p>\n<p>例 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">parseInt</span>(<span class=\"number\">5.8</span>) + <span class=\"built_in\">parseInt</span>(<span class=\"number\">4.7</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n\n<p>例 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">parseInt</span>(<span class=\"number\">5.8</span> + <span class=\"number\">4.7</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<p>（4）带两个参数时，表示在转换时，包含了进制转换。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;110&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(a, <span class=\"number\">16</span>); <span class=\"comment\">// 【重要】将 a 当成 十六进制 来看待，转换成 十进制 的 num</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">272</span><br></pre></td></tr></table></figure>\n\n<p>如果你对打印结果感到震惊，请仔细看上面的代码注释。就是说，无论 parseInt() 里面的进制参数是多少，最终的转换结果是十进制。</p>\n<p>我们来看下面的代码，打印结果继续震惊。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;5&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">parseInt</span>(a, <span class=\"number\">2</span>); <span class=\"comment\">// 将 a 当成 二进制 来看待，转换成 十进制 的 num</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">// 打印结果：NaN。因为 二进制中没有 5 这个数，转换失败。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-parseFloat-函数：字符串-–-gt-浮点数（小数）\"><a href=\"#4-parseFloat-函数：字符串-–-gt-浮点数（小数）\" class=\"headerlink\" title=\"4. parseFloat()函数：字符串 –&gt; 浮点数（小数）\"></a>4. parseFloat()函数：字符串 –&gt; 浮点数（小数）</h3><p>parseFloat()的作用是：将字符串转换为<strong>浮点数</strong>。</p>\n<p>parseFloat()和 parseInt()的作用类似，不同的是，parseFloat()可以获得小数部分。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;123.456.789px&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">parseFloat</span>(a)); <span class=\"comment\">// 打印结果：123.456</span></span><br></pre></td></tr></table></figure>\n\n<p>parseFloat() 的几个特性，可以参照 parseInt()。</p>\n<h2 id=\"三、转换为-Boolean\"><a href=\"#三、转换为-Boolean\" class=\"headerlink\" title=\"三、转换为 Boolean\"></a>三、转换为 Boolean</h2><h3 id=\"转换结果列举【重要】\"><a href=\"#转换结果列举【重要】\" class=\"headerlink\" title=\"转换结果列举【重要】\"></a>转换结果列举【重要】</h3><p>其他的数据类型都可以转换为 Boolean 类型。无论是隐式转换，还是显示转换，转换结果都是一样的。有下面几种情况：</p>\n<p>（1）情况一：数字 –&gt; 布尔。 0 和 NaN的转换结果 false，其余的都是 true。比如 <code>Boolean(NaN)</code>的结果是 false。</p>\n<p>（2）情况二：字符串 —&gt; 布尔。空串的转换结果是false，其余的都是 true。全是空格的字符串，转换结果也是 true。字符串<code>&#39;0&#39;</code>的转换结果也是 true。</p>\n<p>（3）情况三：null 和 undefined 都会转换为 false。</p>\n<p>（4）情况四：引用数据类型会转换为 true。注意，空数组<code>[]</code>和空对象<code>&#123;&#125;</code>，<strong>转换结果也是 true</strong>，这一点，很多人都不知道。</p>\n<p><strong>重中之重来了：</strong></p>\n<p>转换为 Boolean 的上面这几种情况，<strong>极其重要</strong>，开发中会频繁用到。比如说，我们在项目开发中，经常需要对一些<strong>非布尔值</strong>做逻辑判断，符合条件后，才做下一步的事情。这个逻辑判断就是依据上面的四种情况。</p>\n<p>举例：（接口返回的内容不为空，前端才做进一步的事情）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result1 = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = &#123; <span class=\"attr\">a</span>: <span class=\"string\">&#x27;data1&#x27;</span>, <span class=\"attr\">b</span>: <span class=\"string\">&#x27;data2&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (result1) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;因为 result1的内容为空，所以代码进不了这里&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (result2 &amp;&amp; result2.<span class=\"property\">a</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接口返回了 result2，且 result2.a 里面有值，前端才做进一步的事情</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;代码能进来，前端继续在这里干活儿&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里再次强调一下，空数组<code>[]</code>和空对象<code>&#123;&#125;</code>转换为 Boolean 值时，转换结果为 true。</p>\n<h3 id=\"1-隐式类型转换：逻辑运算\"><a href=\"#1-隐式类型转换：逻辑运算\" class=\"headerlink\" title=\"1. 隐式类型转换：逻辑运算\"></a>1. 隐式类型转换：逻辑运算</h3><p>当非 Boolean 类型的数值和 Boolean 类型的数值做比较时，会先把前者<strong>临时</strong>进行隐式转换为 Boolean 类型，然后再做比较；且不会改变前者的数据类型。举例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == <span class=\"literal\">true</span>); <span class=\"comment\">// 打印结果：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// 打印结果：number。可见，上面一行代码里，a 做了隐式类型转换，但是 a 的数据类型并没有发生变化，仍然是 Number 类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span> == <span class=\"literal\">true</span>); <span class=\"comment\">// 打印结果：false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用 !!\"></a>2. 使用 <code>!!</code></h3><p>使用 <code>!!</code>可以显式转换为 Boolean 类型。比如 <code>!!3</code>的结果是 true。</p>\n<h3 id=\"3-使用-Boolean-函数\"><a href=\"#3-使用-Boolean-函数\" class=\"headerlink\" title=\"3. 使用  Boolean()函数\"></a>3. 使用  Boolean()函数</h3><p>使用 Boolean()函数可以显式转换为 Boolean 类型。</p>\n<h2 id=\"知识补充：其他进制的数字\"><a href=\"#知识补充：其他进制的数字\" class=\"headerlink\" title=\"知识补充：其他进制的数字\"></a>知识补充：其他进制的数字</h2><ul>\n<li><p>16 进制的数字，以<code>0x</code>开头</p>\n</li>\n<li><p>8 进制的数字，以<code>0</code>开头</p>\n</li>\n<li><p>2 进制的数字，<code>0b</code>开头（不是所有的浏览器都支持：chrome 和火狐支持，IE 不支持）</p>\n</li>\n</ul>\n<p>比如<code>070</code>这个字符串，如果我调用 parseInt()转成数字时，有些浏览器会当成 8 进制解析，有些会当成 10 进制解析。</p>\n<p>所以，比较建议的做法是：可以在 parseInt()中传递第二个参数，来指定当前数字的进制。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;070&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"built_in\">parseInt</span>(a, <span class=\"number\">8</span>); <span class=\"comment\">//将 070 当成八进制来看待，转换结果为十进制。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 打印结果：56。这个地方要好好理解。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"隐式类型转换-1\"><a href=\"#隐式类型转换-1\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h2><p>重点：<strong>隐式类型转换，内部调用的都是显式类型的方法</strong>。</p>\n<p>常见的隐式类型转换，包括下面这几种：</p>\n<ul>\n<li><p>isNaN() 函数</p>\n</li>\n<li><p>运算符：加号 <code>+</code></p>\n</li>\n<li><p>运算符：<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></p>\n</li>\n<li><p>运算符：正号&#x2F;负号 +a<code>、</code>-a&#96;</p>\n</li>\n<li><p>自增&#x2F;自减运算符：<code>++</code>、<code>—-</code></p>\n</li>\n</ul>\n<p>本段先来讲一下 isNaN() ，其他内容，将在下一节《JavaScript基础&#x2F;运算符》中讲到。</p>\n<h3 id=\"isNaN-函数\"><a href=\"#isNaN-函数\" class=\"headerlink\" title=\"isNaN() 函数\"></a>isNaN() 函数</h3><p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(参数);</span><br></pre></td></tr></table></figure>\n\n<p>解释：判断指定的参数是否为 NaN（非数字类型），返回结果为 Boolean 类型。也就是说：<strong>任何不能被转换为数值的参数，都会让这个函数返回 true</strong>。</p>\n<p><strong>执行过程</strong>：</p>\n<p>（1）先调用<code>Number(参数)</code>函数；</p>\n<p>（2）然后将<code>Number(参数)</code>的返回结果是否为数值。如果不为数值，则最终结果为 true；如果为数值，则最终结果为 false。</p>\n<p>代码举例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;123&#x27;</span>)); <span class=\"comment\">// 返回结果：false。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">null</span>)); <span class=\"comment\">// 返回结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;abc&#x27;</span>)); <span class=\"comment\">// 返回结果：true。因为 Number(&#x27;abc&#x27;) 的返回结果是 NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// 返回结果：true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(<span class=\"title class_\">NaN</span>)); <span class=\"comment\">// 返回结果：true</span></span><br></pre></td></tr></table></figure>\n\n","text":"前言变量的数据类型转换：将一种数据类型转换为另外一种数据类型。通常有三种形式的类型转换：转换为字符串类型转换为数字型转换为布尔型把某个数据类型转换成 null 或者 undefined 没有意义。变量的类型转换的分类类型转换分为两种：显式类型转换、隐式类型转换。显式类型转换toS","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":20,"path":"api/tags/JavaScript.json"}]}]}