{"name":"JavaScript","slug":"JavaScript","count":1,"postlist":[{"title":"28-对象的创建与构造函数","slug":"JavaScript/28-对象的创建&构造函数","date":"2023-03-09T04:44:33.675Z","updated":"2023-03-09T04:44:33.676Z","comments":true,"path":"api/articles/JavaScript/28-对象的创建&构造函数.json","excerpt":"","keywords":null,"cover":"http://img.smyhvae.com/20180125_1350.png","content":"<p><ArticleTopAd></ArticleTopAd></p>\n<blockquote>\n<p>在看本文之前，可以先复习前面的一篇文章：《04-JavaScript 基础&#x2F;11-对象简介.md》</p>\n</blockquote>\n<h2 id=\"创建自定义对象的几种方法\"><a href=\"#创建自定义对象的几种方法\" class=\"headerlink\" title=\"创建自定义对象的几种方法\"></a>创建自定义对象的几种方法</h2><h3 id=\"方式一：对象字面量\"><a href=\"#方式一：对象字面量\" class=\"headerlink\" title=\"方式一：对象字面量\"></a>方式一：对象字面量</h3><p><strong>对象的字面量</strong>就是一个{}。里面的属性和方法均是<strong>键值对</strong>：</p>\n<ul>\n<li><p>键：相当于属性名。</p>\n</li>\n<li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）。</p>\n</li>\n</ul>\n<p>使用对象字面量来创建一个对象，非常简洁，举例如下：：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用对象字面量，可以在创建对象时，直接指定对象中的属性。语法：{属性名:属性值,属性名:属性值….}</p>\n<p>例 1：（一个简单的对象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;千古壹号&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>例 2：（一个较复杂的对象）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;千古壹号&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">    <span class=\"attr\">isBoy</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 还可以存放一个嵌套的对象</span></span><br><span class=\"line\">    <span class=\"attr\">test</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">tel</span>: <span class=\"number\">180</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//我们还可以在对象中增加一个方法。以后可以通过obj2.sayName()的方式调用这个方法</span></span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj2));</span><br><span class=\"line\">obj2.<span class=\"title function_\">sayName</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对象字面量的属性名可以加引号也可以不加，建议不加。如果要使用一些特殊的名字，则必须加引号。</p>\n<p>属性名和属性值是一组一组的键值对结构，键和值之间使用<code>:</code>连接，多个值对之间使用<code>,</code>隔开。</p>\n<h3 id=\"方式二：工厂模式-new-Object\"><a href=\"#方式二：工厂模式-new-Object\" class=\"headerlink\" title=\"方式二：工厂模式 new Object()\"></a>方式二：工厂模式 new Object()</h3><p>通过该方法可以大批量的创建对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用工厂方法创建对象</span></span><br><span class=\"line\"><span class=\"comment\"> *  通过该方法可以大批量的创建对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name, age, gender</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个新的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    <span class=\"comment\">//向对象中添加属性</span></span><br><span class=\"line\">    obj.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    obj.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    obj.<span class=\"property\">gender</span> = gender;</span><br><span class=\"line\">    obj.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//将新的对象返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;猪八戒&#x27;</span>, <span class=\"number\">28</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;白骨精&#x27;</span>, <span class=\"number\">16</span>, <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;蜘蛛精&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;女&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第一次看到这种工厂模式时，你可能会觉得陌生。如果简化一下，可以写成下面这种形式，更容易理解：（也就是，利用 new Object 创建对象）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Obejct</span>();</span><br><span class=\"line\">obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;猪八戒&#x27;</span>;</span><br><span class=\"line\">obj.<span class=\"property\">age</span> = <span class=\"number\">28</span>;</span><br><span class=\"line\">obj.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;男&#x27;</span>;</span><br><span class=\"line\">obj.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>弊端：</strong></p>\n<p>使用工厂方法创建的对象，使用的构造函数都是 Object。<strong>所以创建的对象都是 Object 这个类型，就导致我们无法区分出多种不同类型的对象</strong>。</p>\n<h3 id=\"方式三：利用构造函数\"><a href=\"#方式三：利用构造函数\" class=\"headerlink\" title=\"方式三：利用构造函数\"></a>方式三：利用构造函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用构造函数自定义对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;smyh&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu1);</span><br><span class=\"line\">stu1.<span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&#x27;vae&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu2);</span><br><span class=\"line\">stu2.<span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name; <span class=\"comment\">//this指的是当前对象实例【重要】</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27;厉害了&#x27;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180125_1350.png\"></p>\n<p>接下来，我们专门来讲一下构造函数。</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><h3 id=\"代码引入\"><a href=\"#代码引入\" class=\"headerlink\" title=\"代码引入\"></a>代码引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个构造函数，专门用来创建Person对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age, gender</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">gender</span> = gender;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> per = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;孙悟空&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> per2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;玉兔精&#x27;</span>, <span class=\"number\">16</span>, <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> per3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;奔波霸&#x27;</span>, <span class=\"number\">38</span>, <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个构造函数，专门用来创建 Dog 对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dog</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数的概念\"><a href=\"#构造函数的概念\" class=\"headerlink\" title=\"构造函数的概念\"></a>构造函数的概念</h3><p><strong>构造函数</strong>：是一种特殊的函数，主要用来创建和初始化对象，也就是为对象的成员变量赋初始值。它与 <code>new</code> 一起使用才有意义。</p>\n<p>我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个构造函数里面。</p>\n<h3 id=\"构造函数和普通函数的区别\"><a href=\"#构造函数和普通函数的区别\" class=\"headerlink\" title=\"构造函数和普通函数的区别\"></a>构造函数和普通函数的区别</h3><p>构造函数的创建方式和普通函数没有区别，不同的是构造函数习惯上首字母大写。</p>\n<p>构造函数和普通函数的区别就是<strong>调用方式</strong>的不同：普通函数是直接调用，而构造函数需要使用 new 关键字来调用。</p>\n<p><strong>this 的指向也有所不同</strong>：</p>\n<ul>\n<li><p>1.以函数的形式调用时，this 永远都是 window。比如<code>fun();</code>相当于<code>window.fun();</code></p>\n</li>\n<li><p>2.以方法的形式调用时，this 是调用方法的那个对象</p>\n</li>\n<li><p>3.以构造函数的形式调用时，this 是新创建的实例对象</p>\n</li>\n</ul>\n<h3 id=\"new-一个构造函数的执行流程\"><a href=\"#new-一个构造函数的执行流程\" class=\"headerlink\" title=\"new 一个构造函数的执行流程\"></a>new 一个构造函数的执行流程</h3><p>new 在执行时，会做下面这四件事：</p>\n<p>（1）开辟内存空间，在内存中创建一个新的空对象。</p>\n<p>（2）让 this 指向这个新的对象。</p>\n<p>（3）执行构造函数里面的代码，给这个新对象添加属性和方法。</p>\n<p>（4）返回这个新对象（所以构造函数里面不需要 return）。</p>\n<p>因为 this 指的是 new 一个 Object 之后的对象实例。于是，下面这段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStudent</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> student = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    student.<span class=\"property\">name</span> = name; <span class=\"comment\">//第一个name指的是student对象定义的变量。第二个name指的是createStudent函数的参数。二者不一样</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以改进为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name; <span class=\"comment\">//this指的是构造函数中的对象实例</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意上方代码中的注释。</p>\n<h3 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h3><p>JavaScript 的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的 this 上添加。通过这两种方式添加的成员，就分别称为静态成员和实例成员。</p>\n<ul>\n<li><p>静态成员：在构造函数本上添加的成员称为静态成员，只能由构造函数本身来访问。</p>\n</li>\n<li><p>实例成员：在构造函数内部创建的对象成员称为实例成员，只能由实例化的对象来访问。</p>\n</li>\n</ul>\n<h3 id=\"类、实例\"><a href=\"#类、实例\" class=\"headerlink\" title=\"类、实例\"></a>类、实例</h3><p>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个<strong>类</strong>。</p>\n<p>通过一个构造函数创建的对象，称为该类的<strong>实例</strong>。</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>使用 instanceof 可以检查<strong>一个对象是否为一个类的实例</strong>。</p>\n<p><strong>语法如下</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象 <span class=\"keyword\">instanceof</span> 构造函数;</span><br></pre></td></tr></table></figure>\n\n<p>如果是，则返回 true；否则返回 false。</p>\n<p><strong>代码举例</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dog</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>); <span class=\"comment\">// 打印结果： true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dog1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>); <span class=\"comment\">// 打印结果：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dog1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// 所有的对象都是Object的后代。因此，打印结果为：true</span></span><br></pre></td></tr></table></figure>\n\n<p>根据上方代码中的最后一行，需要补充一点：<strong>所有的对象都是 Object 的后代，因此 <code>任何对象 instanceof Object</code> 的返回结果都是 true</strong>。</p>\n<h2 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others\"></a>others</h2><h3 id=\"json-的介绍\"><a href=\"#json-的介绍\" class=\"headerlink\" title=\"json 的介绍\"></a>json 的介绍</h3><blockquote>\n<p>对象字面量和 json 比较像，这里我们对 json 做一个简单介绍。</p>\n</blockquote>\n<p>JSON：JavaScript Object Notation（JavaScript 对象表示形式）。</p>\n<p>JSON 和对象字面量的区别：JSON 的属性必须用双引号引号引起来，对象字面量可以省略。</p>\n<p>json 举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;name&quot; : &quot;zs&quot;,</span><br><span class=\"line\">      &quot;age&quot; : 18,</span><br><span class=\"line\">      &quot;sex&quot; : true,</span><br><span class=\"line\">      &quot;sayHi&quot; : function() &#123;</span><br><span class=\"line\">          console.log(this.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注：json 里一般放常量、数组、对象等，但很少放 function。</p>\n<p>另外，对象和 json 没有长度，json.length 的打印结果是 undefined。于是乎，自然也就不能用 for 循环遍历（因为遍历时需要获取长度 length）。</p>\n<p><strong>json 遍历的方法：</strong></p>\n<p>json 采用 <code>for...in...</code>进行遍历，和数组的遍历方式不同。如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> myJson = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;helloworlds&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&quot;aaa&quot;</span>: <span class=\"number\">111</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&quot;bbb&quot;</span>: <span class=\"number\">222</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//json遍历的方法：for...in...</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> myJson) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key); <span class=\"comment\">//获取 键</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myJson[key]); <span class=\"comment\">//获取 值（第二种属性绑定和获取值的方法）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;------&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src=\"http://img.smyhvae.com/20180203_1518.png\"></p>\n","text":"在看本文之前，可以先复习前面的一篇文章：《04-JavaScript 基础&#x2F;11-对象简介.md》创建自定义对象的几种方法方式一：对象字面量对象的字面量就是一个{}。里面的属性和方法均是键值对：键：相当于属性名。值：相当于属性值，可以是任意类型的值（数字类型、字符串类型","link":"","raw":null,"photos":[],"categories":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}]}]}